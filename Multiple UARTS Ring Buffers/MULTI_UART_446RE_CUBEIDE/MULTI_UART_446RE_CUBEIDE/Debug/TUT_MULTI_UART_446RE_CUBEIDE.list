
TUT_MULTI_UART_446RE_CUBEIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027ac  080027ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  2000000c  080027c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  080027c0  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d06  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197e  00000000  00000000  00027d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  000296c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209c2  00000000  00000000  0002a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cad  00000000  00000000  0004ae9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5ecb  00000000  00000000  00053b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c94  00000000  00000000  00119a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800275c 	.word	0x0800275c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800275c 	.word	0x0800275c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <Ringbuf_init+0x68>)
 800051e:	4a19      	ldr	r2, [pc, #100]	; (8000584 <Ringbuf_init+0x6c>)
 8000520:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <Ringbuf_init+0x70>)
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <Ringbuf_init+0x74>)
 8000526:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <Ringbuf_init+0x78>)
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <Ringbuf_init+0x7c>)
 800052c:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <Ringbuf_init+0x80>)
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <Ringbuf_init+0x84>)
 8000532:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <Ringbuf_init+0x88>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	695a      	ldr	r2, [r3, #20]
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <Ringbuf_init+0x88>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <Ringbuf_init+0x8c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <Ringbuf_init+0x8c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f042 0201 	orr.w	r2, r2, #1
 8000552:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <Ringbuf_init+0x88>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <Ringbuf_init+0x88>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f042 0220 	orr.w	r2, r2, #32
 8000562:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <Ringbuf_init+0x8c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <Ringbuf_init+0x8c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f042 0220 	orr.w	r2, r2, #32
 8000572:	60da      	str	r2, [r3, #12]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000848 	.word	0x20000848
 8000584:	20000028 	.word	0x20000028
 8000588:	2000084c 	.word	0x2000084c
 800058c:	20000230 	.word	0x20000230
 8000590:	20000850 	.word	0x20000850
 8000594:	20000438 	.word	0x20000438
 8000598:	20000854 	.word	0x20000854
 800059c:	20000640 	.word	0x20000640
 80005a0:	20000858 	.word	0x20000858
 80005a4:	20000898 	.word	0x20000898

080005a8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005ba:	3301      	adds	r3, #1
 80005bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005c0:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d009      	beq.n	80005e2 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	79f9      	ldrb	r1, [r7, #7]
 80005d8:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a1c      	ldr	r2, [pc, #112]	; (800066c <Uart_peek+0x7c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d114      	bne.n	800062a <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <Uart_peek+0x80>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <Uart_peek+0x80>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000610:	429a      	cmp	r2, r3
 8000612:	d102      	bne.n	800061a <Uart_peek+0x2a>
		  {
		    return -1;
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	e022      	b.n	8000660 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <Uart_peek+0x80>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <Uart_peek+0x80>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	e01a      	b.n	8000660 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <Uart_peek+0x84>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d114      	bne.n	800065c <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <Uart_peek+0x88>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <Uart_peek+0x88>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000642:	429a      	cmp	r2, r3
 8000644:	d102      	bne.n	800064c <Uart_peek+0x5c>
		  {
		    return -1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	e009      	b.n	8000660 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <Uart_peek+0x88>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <Uart_peek+0x88>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	e001      	b.n	8000660 <Uart_peek+0x70>
		  }
	}

	return -1;
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20000858 	.word	0x20000858
 8000670:	20000848 	.word	0x20000848
 8000674:	20000898 	.word	0x20000898
 8000678:	20000850 	.word	0x20000850

0800067c <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a29      	ldr	r2, [pc, #164]	; (800072c <Uart_read+0xb0>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d121      	bne.n	80006d0 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <Uart_read+0xb4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <Uart_read+0xb4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800069c:	429a      	cmp	r2, r3
 800069e:	d102      	bne.n	80006a6 <Uart_read+0x2a>
		  {
		    return -1;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	e03c      	b.n	8000720 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <Uart_read+0xb4>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <Uart_read+0xb4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <Uart_read+0xb4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <Uart_read+0xb4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	e027      	b.n	8000720 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <Uart_read+0xb8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d121      	bne.n	800071c <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <Uart_read+0xbc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <Uart_read+0xbc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d102      	bne.n	80006f2 <Uart_read+0x76>
		  {
		    return -1;
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	e016      	b.n	8000720 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <Uart_read+0xbc>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <Uart_read+0xbc>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006fe:	5cd3      	ldrb	r3, [r2, r3]
 8000700:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <Uart_read+0xbc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <Uart_read+0xbc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000714:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	e001      	b.n	8000720 <Uart_read+0xa4>
		  }
	}

	else return -1;
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	20000858 	.word	0x20000858
 8000730:	20000848 	.word	0x20000848
 8000734:	20000898 	.word	0x20000898
 8000738:	20000850 	.word	0x20000850

0800073c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db54      	blt.n	80007f6 <Uart_write+0xba>
	{
		if (uart == device_uart){
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <Uart_write+0xc8>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d126      	bne.n	80007a2 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <Uart_write+0xcc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800075c:	3301      	adds	r3, #1
 800075e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000762:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000764:	bf00      	nop
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <Uart_write+0xcc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	429a      	cmp	r2, r3
 8000772:	d0f8      	beq.n	8000766 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <Uart_write+0xcc>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <Uart_write+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	b2c9      	uxtb	r1, r1
 8000784:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <Uart_write+0xcc>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <Uart_write+0xc8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	68da      	ldr	r2, [r3, #12]
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <Uart_write+0xc8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800079e:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 80007a0:	e029      	b.n	80007f6 <Uart_write+0xba>
		else if (uart == pc_uart){
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <Uart_write+0xd0>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d125      	bne.n	80007f6 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <Uart_write+0xd4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007b2:	3301      	adds	r3, #1
 80007b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007b8:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80007ba:	bf00      	nop
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <Uart_write+0xd4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d0f8      	beq.n	80007bc <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <Uart_write+0xd4>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <Uart_write+0xd4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	b2c9      	uxtb	r1, r1
 80007da:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <Uart_write+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <Uart_write+0xd0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <Uart_write+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007f4:	60da      	str	r2, [r3, #12]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000858 	.word	0x20000858
 8000808:	2000084c 	.word	0x2000084c
 800080c:	20000898 	.word	0x20000898
 8000810:	20000854 	.word	0x20000854

08000814 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a19      	ldr	r2, [pc, #100]	; (8000884 <IsDataAvailable+0x70>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d111      	bne.n	8000848 <IsDataAvailable+0x34>
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <IsDataAvailable+0x74>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <IsDataAvailable+0x74>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000836:	b29b      	uxth	r3, r3
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	b29b      	uxth	r3, r3
 800083c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000840:	b29b      	uxth	r3, r3
 8000842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000846:	e017      	b.n	8000878 <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <IsDataAvailable+0x78>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d111      	bne.n	8000874 <IsDataAvailable+0x60>
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <IsDataAvailable+0x7c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <IsDataAvailable+0x7c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000862:	b29b      	uxth	r3, r3
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	b29b      	uxth	r3, r3
 8000868:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800086c:	b29b      	uxth	r3, r3
 800086e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000872:	e001      	b.n	8000878 <IsDataAvailable+0x64>
	return -1;
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	20000858 	.word	0x20000858
 8000888:	20000848 	.word	0x20000848
 800088c:	20000898 	.word	0x20000898
 8000890:	20000850 	.word	0x20000850

08000894 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	460b      	mov	r3, r1
 80008a2:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 80008a4:	bf00      	nop
 80008a6:	6839      	ldr	r1, [r7, #0]
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f000 f839 	bl	8000920 <Wait_for>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d1f8      	bne.n	80008a6 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e012      	b.n	80008e0 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 80008ba:	bf00      	nop
 80008bc:	6838      	ldr	r0, [r7, #0]
 80008be:	f7ff ffa9 	bl	8000814 <IsDataAvailable>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 80008c8:	6838      	ldr	r0, [r7, #0]
 80008ca:	f7ff fed7 	bl	800067c <Uart_read>
 80008ce:	4601      	mov	r1, r0
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbe8      	blt.n	80008ba <Get_after+0x26>
	}
	return 1;
 80008e8:	2301      	movs	r3, #1
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 80008fc:	e007      	b.n	800090e <Uart_sendstring+0x1c>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff17 	bl	800073c <Uart_write>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f3      	bne.n	80008fe <Uart_sendstring+0xc>
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Wait_for>:

}


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fc68 	bl	8000204 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8000938:	bf00      	nop
 800093a:	6838      	ldr	r0, [r7, #0]
 800093c:	f7ff ff6a 	bl	8000814 <IsDataAvailable>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f9      	beq.n	800093a <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff fe52 	bl	80005f0 <Uart_peek>
 800094c:	4601      	mov	r1, r0
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4299      	cmp	r1, r3
 8000958:	d01e      	beq.n	8000998 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <Wait_for+0xb4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <Wait_for+0xb4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800096c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8000970:	e7e2      	b.n	8000938 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8000978:	6838      	ldr	r0, [r7, #0]
 800097a:	f7ff fe7f 	bl	800067c <Uart_read>
		if (so_far == len) return 1;
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	429a      	cmp	r2, r3
 8000984:	d101      	bne.n	800098a <Wait_for+0x6a>
 8000986:	2301      	movs	r3, #1
 8000988:	e01f      	b.n	80009ca <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 800098a:	bf00      	nop
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f7ff ff41 	bl	8000814 <IsDataAvailable>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f9      	beq.n	800098c <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f7ff fe29 	bl	80005f0 <Uart_peek>
 800099e:	4601      	mov	r1, r0
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4299      	cmp	r1, r3
 80009aa:	d0e2      	beq.n	8000972 <Wait_for+0x52>
	}

	if (so_far != len)
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d002      	beq.n	80009ba <Wait_for+0x9a>
	{
		so_far = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
		goto again_device;
 80009b8:	e7be      	b.n	8000938 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d101      	bne.n	80009c6 <Wait_for+0xa6>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e001      	b.n	80009ca <Wait_for+0xaa>
	else return -1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000848 	.word	0x20000848

080009d8 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d023      	beq.n	8000a42 <Uart_isr+0x6a>
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	f003 0320 	and.w	r3, r3, #32
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d01e      	beq.n	8000a42 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a3f      	ldr	r2, [pc, #252]	; (8000b14 <Uart_isr+0x13c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d107      	bne.n	8000a2a <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <Uart_isr+0x140>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fdc0 	bl	80005a8 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8000a28:	e06d      	b.n	8000b06 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a3b      	ldr	r2, [pc, #236]	; (8000b1c <Uart_isr+0x144>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d169      	bne.n	8000b06 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <Uart_isr+0x148>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fdb4 	bl	80005a8 <store_char>
        return;
 8000a40:	e061      	b.n	8000b06 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d05f      	beq.n	8000b0c <Uart_isr+0x134>
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d05a      	beq.n	8000b0c <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <Uart_isr+0x13c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d127      	bne.n	8000aae <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <Uart_isr+0x14c>)
 8000a60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <Uart_isr+0x14c>)
 8000a66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d108      	bne.n	8000a80 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a7c:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8000a7e:	e044      	b.n	8000b0a <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <Uart_isr+0x14c>)
 8000a82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a86:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <Uart_isr+0x14c>)
 8000a88:	5cd3      	ldrb	r3, [r2, r3]
 8000a8a:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <Uart_isr+0x14c>)
 8000a8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a92:	3301      	adds	r3, #1
 8000a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <Uart_isr+0x14c>)
 8000a9a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	7b7a      	ldrb	r2, [r7, #13]
 8000aaa:	605a      	str	r2, [r3, #4]
    	return;
 8000aac:	e02d      	b.n	8000b0a <Uart_isr+0x132>
    	else if (huart == pc_uart){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <Uart_isr+0x144>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d129      	bne.n	8000b0a <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <Uart_isr+0x150>)
 8000ab8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <Uart_isr+0x150>)
 8000abe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d108      	bne.n	8000ad8 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ad4:	60da      	str	r2, [r3, #12]
    	return;
 8000ad6:	e018      	b.n	8000b0a <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <Uart_isr+0x150>)
 8000ada:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <Uart_isr+0x150>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <Uart_isr+0x150>)
 8000ae6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000aea:	3301      	adds	r3, #1
 8000aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <Uart_isr+0x150>)
 8000af2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	7bba      	ldrb	r2, [r7, #14]
 8000b02:	605a      	str	r2, [r3, #4]
    	return;
 8000b04:	e001      	b.n	8000b0a <Uart_isr+0x132>
        return;
 8000b06:	bf00      	nop
 8000b08:	e000      	b.n	8000b0c <Uart_isr+0x134>
    	return;
 8000b0a:	bf00      	nop
    }
}
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000858 	.word	0x20000858
 8000b18:	20000848 	.word	0x20000848
 8000b1c:	20000898 	.word	0x20000898
 8000b20:	20000850 	.word	0x20000850
 8000b24:	20000230 	.word	0x20000230
 8000b28:	20000640 	.word	0x20000640

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f000 fa87 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f839 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f000 f8fd 	bl	8000d38 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b3e:	f000 f8a7 	bl	8000c90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b42:	f000 f8cf 	bl	8000ce4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init();
 8000b46:	f7ff fce7 	bl	8000518 <Ringbuf_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IsDataAvailable(pc_uart))
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <main+0x6c>)
 8000b4c:	f7ff fe62 	bl	8000814 <IsDataAvailable>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d007      	beq.n	8000b66 <main+0x3a>
	  {
		  int data = Uart_read(pc_uart);
 8000b56:	4810      	ldr	r0, [pc, #64]	; (8000b98 <main+0x6c>)
 8000b58:	f7ff fd90 	bl	800067c <Uart_read>
 8000b5c:	6078      	str	r0, [r7, #4]
		  Uart_write(data, wifi_uart);
 8000b5e:	490f      	ldr	r1, [pc, #60]	; (8000b9c <main+0x70>)
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fdeb 	bl	800073c <Uart_write>
	  }

	  if (IsDataAvailable(wifi_uart))
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <main+0x70>)
 8000b68:	f7ff fe54 	bl	8000814 <IsDataAvailable>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0eb      	beq.n	8000b4a <main+0x1e>
	  {
		  if (Get_after("AT version:", 8, buffer, wifi_uart))
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <main+0x70>)
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <main+0x74>)
 8000b76:	2108      	movs	r1, #8
 8000b78:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <main+0x78>)
 8000b7a:	f7ff fe8b 	bl	8000894 <Get_after>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0e2      	beq.n	8000b4a <main+0x1e>
		  {
			  Uart_sendstring("AT VERSION=", pc_uart);
 8000b84:	4904      	ldr	r1, [pc, #16]	; (8000b98 <main+0x6c>)
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <main+0x7c>)
 8000b88:	f7ff feb3 	bl	80008f2 <Uart_sendstring>
			  Uart_sendstring(buffer, pc_uart);
 8000b8c:	4902      	ldr	r1, [pc, #8]	; (8000b98 <main+0x6c>)
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <main+0x74>)
 8000b90:	f7ff feaf 	bl	80008f2 <Uart_sendstring>
	  if (IsDataAvailable(pc_uart))
 8000b94:	e7d9      	b.n	8000b4a <main+0x1e>
 8000b96:	bf00      	nop
 8000b98:	20000898 	.word	0x20000898
 8000b9c:	20000858 	.word	0x20000858
 8000ba0:	200008d8 	.word	0x200008d8
 8000ba4:	08002774 	.word	0x08002774
 8000ba8:	08002780 	.word	0x08002780

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2234      	movs	r2, #52	; 0x34
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fdc6 	bl	800274c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <SystemClock_Config+0xdc>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a2b      	ldr	r2, [pc, #172]	; (8000c88 <SystemClock_Config+0xdc>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <SystemClock_Config+0xdc>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <SystemClock_Config+0xe0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a25      	ldr	r2, [pc, #148]	; (8000c8c <SystemClock_Config+0xe0>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <SystemClock_Config+0xe0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c20:	23b4      	movs	r3, #180	; 0xb4
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 f8b3 	bl	8001da0 <HAL_RCC_OscConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c40:	f000 f8a2 	bl	8000d88 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c44:	f000 fd16 	bl	8001674 <HAL_PWREx_EnableOverDrive>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c4e:	f000 f89b 	bl	8000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	230f      	movs	r3, #15
 8000c54:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2302      	movs	r3, #2
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	2105      	movs	r1, #5
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fd4f 	bl	8001714 <HAL_RCC_ClockConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c7c:	f000 f884 	bl	8000d88 <Error_Handler>
  }
}
 8000c80:	bf00      	nop
 8000c82:	3750      	adds	r7, #80	; 0x50
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART1_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cc8:	f001 fac4 	bl	8002254 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f000 f859 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000858 	.word	0x20000858
 8000ce0:	40011000 	.word	0x40011000

08000ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_USART2_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f001 fa9a 	bl	8002254 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f82f 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000898 	.word	0x20000898
 8000d34:	40004400 	.word	0x40004400

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_GPIO_Init+0x4c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <MX_GPIO_Init+0x4c>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_GPIO_Init+0x4c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_GPIO_Init+0x4c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <MX_GPIO_Init+0x4c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_GPIO_Init+0x4c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a3a      	ldr	r2, [pc, #232]	; (8000ef0 <HAL_UART_MspInit+0x108>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d135      	bne.n	8000e76 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a38      	ldr	r2, [pc, #224]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a31      	ldr	r2, [pc, #196]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e54:	2307      	movs	r3, #7
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <HAL_UART_MspInit+0x110>)
 8000e60:	f000 fa74 	bl	800134c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2025      	movs	r0, #37	; 0x25
 8000e6a:	f000 fa38 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e6e:	2025      	movs	r0, #37	; 0x25
 8000e70:	f000 fa51 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e74:	e038      	b.n	8000ee8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a20      	ldr	r2, [pc, #128]	; (8000efc <HAL_UART_MspInit+0x114>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d133      	bne.n	8000ee8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0x10c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <HAL_UART_MspInit+0x110>)
 8000ed4:	f000 fa3a 	bl	800134c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2026      	movs	r0, #38	; 0x26
 8000ede:	f000 f9fe 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee2:	2026      	movs	r0, #38	; 0x26
 8000ee4:	f000 fa17 	bl	8001316 <HAL_NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	; 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40011000 	.word	0x40011000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40004400 	.word	0x40004400

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f8c8 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr (&huart1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <USART1_IRQHandler+0x10>)
 8000f62:	f7ff fd39 	bl	80009d8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000858 	.word	0x20000858

08000f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	Uart_isr (&huart2);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <USART2_IRQHandler+0x10>)
 8000f76:	f7ff fd2f 	bl	80009d8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000898 	.word	0x20000898

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <SystemInit+0x60>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <SystemInit+0x60>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <SystemInit+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <SystemInit+0x64>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <SystemInit+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <SystemInit+0x64>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <SystemInit+0x64>)
 8000fb0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <SystemInit+0x64>)
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <SystemInit+0x68>)
 8000fbe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <SystemInit+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <SystemInit+0x64>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SystemInit+0x60>)
 8000fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd8:	609a      	str	r2, [r3, #8]
#endif
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	24003010 	.word	0x24003010

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ff6:	e003      	b.n	8001000 <LoopCopyDataInit>

08000ff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ffe:	3104      	adds	r1, #4

08001000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001008:	d3f6      	bcc.n	8000ff8 <CopyDataInit>
  ldr  r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800100c:	e002      	b.n	8001014 <LoopFillZerobss>

0800100e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800100e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001010:	f842 3b04 	str.w	r3, [r2], #4

08001014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001018:	d3f9      	bcc.n	800100e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800101a:	f7ff ffb3 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f001 fb71 	bl	8002704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fd83 	bl	8000b2c <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800102c:	080027b4 	.word	0x080027b4
  ldr  r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001034:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001038:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800103c:	200008e8 	.word	0x200008e8

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f92b 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fe8e 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f943 	bl	8001332 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f90b 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200008e4 	.word	0x200008e4

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200008e4 	.word	0x200008e4

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff29 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff3e 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff31 	bl	800118c <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa2 	bl	8001284 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e165      	b.n	8001634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8154 	bne.w	800162e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x4a>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b12      	cmp	r3, #18
 8001394:	d123      	bne.n	80013de <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3208      	adds	r2, #8
 800139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	69b9      	ldr	r1, [r7, #24]
 80013da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0203 	and.w	r2, r3, #3
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d00b      	beq.n	8001432 <HAL_GPIO_Init+0xe6>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001426:	2b11      	cmp	r3, #17
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b12      	cmp	r3, #18
 8001430:	d130      	bne.n	8001494 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 0201 	and.w	r2, r3, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80ae 	beq.w	800162e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b5d      	ldr	r3, [pc, #372]	; (800164c <HAL_GPIO_Init+0x300>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a5c      	ldr	r2, [pc, #368]	; (800164c <HAL_GPIO_Init+0x300>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b5a      	ldr	r3, [pc, #360]	; (800164c <HAL_GPIO_Init+0x300>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ee:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_GPIO_Init+0x304>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_GPIO_Init+0x308>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d025      	beq.n	8001566 <HAL_GPIO_Init+0x21a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4e      	ldr	r2, [pc, #312]	; (8001658 <HAL_GPIO_Init+0x30c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01f      	beq.n	8001562 <HAL_GPIO_Init+0x216>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4d      	ldr	r2, [pc, #308]	; (800165c <HAL_GPIO_Init+0x310>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x212>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_GPIO_Init+0x314>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x20e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4b      	ldr	r2, [pc, #300]	; (8001664 <HAL_GPIO_Init+0x318>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x20a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_GPIO_Init+0x31c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x206>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a49      	ldr	r2, [pc, #292]	; (800166c <HAL_GPIO_Init+0x320>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x202>
 800154a:	2306      	movs	r3, #6
 800154c:	e00c      	b.n	8001568 <HAL_GPIO_Init+0x21c>
 800154e:	2307      	movs	r3, #7
 8001550:	e00a      	b.n	8001568 <HAL_GPIO_Init+0x21c>
 8001552:	2305      	movs	r3, #5
 8001554:	e008      	b.n	8001568 <HAL_GPIO_Init+0x21c>
 8001556:	2304      	movs	r3, #4
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x21c>
 800155a:	2303      	movs	r3, #3
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x21c>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x21c>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x21c>
 8001566:	2300      	movs	r3, #0
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	f002 0203 	and.w	r2, r2, #3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4093      	lsls	r3, r2
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001578:	4935      	ldr	r1, [pc, #212]	; (8001650 <HAL_GPIO_Init+0x304>)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_GPIO_Init+0x324>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015aa:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_GPIO_Init+0x324>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_GPIO_Init+0x324>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d4:	4a26      	ldr	r2, [pc, #152]	; (8001670 <HAL_GPIO_Init+0x324>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_GPIO_Init+0x324>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_GPIO_Init+0x324>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_GPIO_Init+0x324>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a11      	ldr	r2, [pc, #68]	; (8001670 <HAL_GPIO_Init+0x324>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	f67f ae96 	bls.w	8001368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40021400 	.word	0x40021400
 800166c:	40021800 	.word	0x40021800
 8001670:	40013c00 	.word	0x40013c00

08001674 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_PWREx_EnableOverDrive+0x90>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_PWREx_EnableOverDrive+0x90>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_PWREx_EnableOverDrive+0x90>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_PWREx_EnableOverDrive+0x94>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff fd36 	bl	8001110 <HAL_GetTick>
 80016a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016a6:	e009      	b.n	80016bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016a8:	f7ff fd32 	bl	8001110 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016b6:	d901      	bls.n	80016bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e01f      	b.n	80016fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_PWREx_EnableOverDrive+0x98>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d1ee      	bne.n	80016a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d0:	f7ff fd1e 	bl	8001110 <HAL_GetTick>
 80016d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016d6:	e009      	b.n	80016ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016d8:	f7ff fd1a 	bl	8001110 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e6:	d901      	bls.n	80016ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e007      	b.n	80016fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_PWREx_EnableOverDrive+0x98>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016f8:	d1ee      	bne.n	80016d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	420e0040 	.word	0x420e0040
 800170c:	40007000 	.word	0x40007000
 8001710:	420e0044 	.word	0x420e0044

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0ca      	b.n	80018be <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d90c      	bls.n	8001750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b6      	b.n	80018be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800176e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b52      	ldr	r3, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494c      	ldr	r1, [pc, #304]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d044      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07d      	b.n	80018be <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06d      	b.n	80018be <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e065      	b.n	80018be <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4933      	ldr	r1, [pc, #204]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff fc84 	bl	8001110 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff fc80 	bl	8001110 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e04d      	b.n	80018be <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20c      	bcs.n	800185c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e030      	b.n	80018be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4915      	ldr	r1, [pc, #84]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490d      	ldr	r1, [pc, #52]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f851 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	4909      	ldr	r1, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fbe6 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	0800278c 	.word	0x0800278c
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_RCC_GetHCLKFreq+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000000 	.word	0x20000000

080018f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f4:	f7ff fff0 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0a9b      	lsrs	r3, r3, #10
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	4903      	ldr	r1, [pc, #12]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001906:	5ccb      	ldrb	r3, [r1, r3]
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	0800279c 	.word	0x0800279c

08001918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800191c:	f7ff ffdc 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 8001920:	4602      	mov	r2, r0
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	0b5b      	lsrs	r3, r3, #13
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	4903      	ldr	r1, [pc, #12]	; (800193c <HAL_RCC_GetPCLK2Freq+0x24>)
 800192e:	5ccb      	ldrb	r3, [r1, r3]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	0800279c 	.word	0x0800279c

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b0ae      	sub	sp, #184	; 0xb8
 8001946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001966:	4bcb      	ldr	r3, [pc, #812]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b0c      	cmp	r3, #12
 8001970:	f200 8206 	bhi.w	8001d80 <HAL_RCC_GetSysClockFreq+0x440>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	080019b1 	.word	0x080019b1
 8001980:	08001d81 	.word	0x08001d81
 8001984:	08001d81 	.word	0x08001d81
 8001988:	08001d81 	.word	0x08001d81
 800198c:	080019b9 	.word	0x080019b9
 8001990:	08001d81 	.word	0x08001d81
 8001994:	08001d81 	.word	0x08001d81
 8001998:	08001d81 	.word	0x08001d81
 800199c:	080019c1 	.word	0x080019c1
 80019a0:	08001d81 	.word	0x08001d81
 80019a4:	08001d81 	.word	0x08001d81
 80019a8:	08001d81 	.word	0x08001d81
 80019ac:	08001bb1 	.word	0x08001bb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4bb9      	ldr	r3, [pc, #740]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x358>)
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019b6:	e1e7      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b8:	4bb8      	ldr	r3, [pc, #736]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x35c>)
 80019ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019be:	e1e3      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4bb4      	ldr	r3, [pc, #720]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019cc:	4bb1      	ldr	r3, [pc, #708]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d071      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d8:	4bae      	ldr	r3, [pc, #696]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	2200      	movs	r2, #0
 80019e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4621      	mov	r1, r4
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	6439      	str	r1, [r7, #64]	; 0x40
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a30:	4649      	mov	r1, r9
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	4641      	mov	r1, r8
 8001a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3a:	4641      	mov	r1, r8
 8001a3c:	018a      	lsls	r2, r1, #6
 8001a3e:	4641      	mov	r1, r8
 8001a40:	1a51      	subs	r1, r2, r1
 8001a42:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a44:	4649      	mov	r1, r9
 8001a46:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a58:	4649      	mov	r1, r9
 8001a5a:	00cb      	lsls	r3, r1, #3
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a62:	4641      	mov	r1, r8
 8001a64:	00ca      	lsls	r2, r1, #3
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	189b      	adds	r3, r3, r2
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
 8001a72:	462b      	mov	r3, r5
 8001a74:	460a      	mov	r2, r1
 8001a76:	eb42 0303 	adc.w	r3, r2, r3
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a88:	4629      	mov	r1, r5
 8001a8a:	024b      	lsls	r3, r1, #9
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a92:	4621      	mov	r1, r4
 8001a94:	024a      	lsls	r2, r1, #9
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001aa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001aa8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001aac:	f7fe fbb2 	bl	8000214 <__aeabi_uldivmod>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001aba:	e067      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abc:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ac8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ada:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ade:	4622      	mov	r2, r4
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0159      	lsls	r1, r3, #5
 8001aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af0:	0150      	lsls	r0, r2, #5
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4621      	mov	r1, r4
 8001af8:	1a51      	subs	r1, r2, r1
 8001afa:	62b9      	str	r1, [r7, #40]	; 0x28
 8001afc:	4629      	mov	r1, r5
 8001afe:	eb63 0301 	sbc.w	r3, r3, r1
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b10:	4649      	mov	r1, r9
 8001b12:	018b      	lsls	r3, r1, #6
 8001b14:	4641      	mov	r1, r8
 8001b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1a:	4641      	mov	r1, r8
 8001b1c:	018a      	lsls	r2, r1, #6
 8001b1e:	4641      	mov	r1, r8
 8001b20:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b24:	4649      	mov	r1, r9
 8001b26:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b3e:	4692      	mov	sl, r2
 8001b40:	469b      	mov	fp, r3
 8001b42:	4623      	mov	r3, r4
 8001b44:	eb1a 0303 	adds.w	r3, sl, r3
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	028b      	lsls	r3, r1, #10
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b68:	4621      	mov	r1, r4
 8001b6a:	028a      	lsls	r2, r1, #10
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b74:	2200      	movs	r2, #0
 8001b76:	673b      	str	r3, [r7, #112]	; 0x70
 8001b78:	677a      	str	r2, [r7, #116]	; 0x74
 8001b7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b7e:	f7fe fb49 	bl	8000214 <__aeabi_uldivmod>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4613      	mov	r3, r2
 8001b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bae:	e0eb      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d06b      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	2200      	movs	r2, #0
 8001bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bda:	663b      	str	r3, [r7, #96]	; 0x60
 8001bdc:	2300      	movs	r3, #0
 8001bde:	667b      	str	r3, [r7, #100]	; 0x64
 8001be0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001be4:	4622      	mov	r2, r4
 8001be6:	462b      	mov	r3, r5
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	0159      	lsls	r1, r3, #5
 8001bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf6:	0150      	lsls	r0, r2, #5
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	1a51      	subs	r1, r2, r1
 8001c00:	61b9      	str	r1, [r7, #24]
 8001c02:	4629      	mov	r1, r5
 8001c04:	eb63 0301 	sbc.w	r3, r3, r1
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c16:	4659      	mov	r1, fp
 8001c18:	018b      	lsls	r3, r1, #6
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c20:	4651      	mov	r1, sl
 8001c22:	018a      	lsls	r2, r1, #6
 8001c24:	4651      	mov	r1, sl
 8001c26:	ebb2 0801 	subs.w	r8, r2, r1
 8001c2a:	4659      	mov	r1, fp
 8001c2c:	eb63 0901 	sbc.w	r9, r3, r1
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c44:	4690      	mov	r8, r2
 8001c46:	4699      	mov	r9, r3
 8001c48:	4623      	mov	r3, r4
 8001c4a:	eb18 0303 	adds.w	r3, r8, r3
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	462b      	mov	r3, r5
 8001c52:	eb49 0303 	adc.w	r3, r9, r3
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c64:	4629      	mov	r1, r5
 8001c66:	024b      	lsls	r3, r1, #9
 8001c68:	4621      	mov	r1, r4
 8001c6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c6e:	4621      	mov	r1, r4
 8001c70:	024a      	lsls	r2, r1, #9
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c84:	f7fe fac6 	bl	8000214 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c92:	e065      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x420>
 8001c94:	40023800 	.word	0x40023800
 8001c98:	00f42400 	.word	0x00f42400
 8001c9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	4611      	mov	r1, r2
 8001cac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cb0:	653b      	str	r3, [r7, #80]	; 0x50
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8001cb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cba:	4642      	mov	r2, r8
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0159      	lsls	r1, r3, #5
 8001cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ccc:	0150      	lsls	r0, r2, #5
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4641      	mov	r1, r8
 8001cd4:	1a51      	subs	r1, r2, r1
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	4649      	mov	r1, r9
 8001cda:	eb63 0301 	sbc.w	r3, r3, r1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001cec:	4659      	mov	r1, fp
 8001cee:	018b      	lsls	r3, r1, #6
 8001cf0:	4651      	mov	r1, sl
 8001cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cf6:	4651      	mov	r1, sl
 8001cf8:	018a      	lsls	r2, r1, #6
 8001cfa:	4651      	mov	r1, sl
 8001cfc:	1a54      	subs	r4, r2, r1
 8001cfe:	4659      	mov	r1, fp
 8001d00:	eb63 0501 	sbc.w	r5, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	00eb      	lsls	r3, r5, #3
 8001d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d12:	00e2      	lsls	r2, r4, #3
 8001d14:	4614      	mov	r4, r2
 8001d16:	461d      	mov	r5, r3
 8001d18:	4643      	mov	r3, r8
 8001d1a:	18e3      	adds	r3, r4, r3
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	464b      	mov	r3, r9
 8001d20:	eb45 0303 	adc.w	r3, r5, r3
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d32:	4629      	mov	r1, r5
 8001d34:	028b      	lsls	r3, r1, #10
 8001d36:	4621      	mov	r1, r4
 8001d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	028a      	lsls	r2, r1, #10
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d48:	2200      	movs	r2, #0
 8001d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d52:	f7fe fa5f 	bl	8000214 <__aeabi_uldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0f1b      	lsrs	r3, r3, #28
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d7e:	e003      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	37b8      	adds	r7, #184	; 0xb8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	00f42400 	.word	0x00f42400

08001da0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8083 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dba:	4b95      	ldr	r3, [pc, #596]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d019      	beq.n	8001dfa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dc6:	4b92      	ldr	r3, [pc, #584]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dd2:	4b8f      	ldr	r3, [pc, #572]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dde:	d00c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de0:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de8:	2b0c      	cmp	r3, #12
 8001dea:	d112      	bne.n	8001e12 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dec:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b85      	ldr	r3, [pc, #532]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d05b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x11e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d157      	bne.n	8001ebe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e216      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x8a>
 8001e1c:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a7b      	ldr	r2, [pc, #492]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e01d      	b.n	8001e66 <HAL_RCC_OscConfig+0xc6>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0xae>
 8001e34:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a75      	ldr	r2, [pc, #468]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a72      	ldr	r2, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e00b      	b.n	8001e66 <HAL_RCC_OscConfig+0xc6>
 8001e4e:	4b70      	ldr	r3, [pc, #448]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6f      	ldr	r2, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6c      	ldr	r2, [pc, #432]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d013      	beq.n	8001e96 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f94f 	bl	8001110 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e76:	f7ff f94b 	bl	8001110 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1db      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e88:	4b61      	ldr	r3, [pc, #388]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0xd6>
 8001e94:	e014      	b.n	8001ec0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f93b 	bl	8001110 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9e:	f7ff f937 	bl	8001110 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b64      	cmp	r3, #100	; 0x64
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1c7      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0xfe>
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d06f      	beq.n	8001fac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d017      	beq.n	8001f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ee4:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d11c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efc:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d116      	bne.n	8001f36 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_OscConfig+0x180>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e18f      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4938      	ldr	r1, [pc, #224]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f34:	e03a      	b.n	8001fac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d020      	beq.n	8001f80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_RCC_OscConfig+0x274>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f8e4 	bl	8001110 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7ff f8e0 	bl	8001110 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e170      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4925      	ldr	r1, [pc, #148]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
 8001f7e:	e015      	b.n	8001fac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x274>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff f8c3 	bl	8001110 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff f8bf 	bl	8001110 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e14f      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d037      	beq.n	8002028 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d016      	beq.n	8001fee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_RCC_OscConfig+0x278>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f8a3 	bl	8001110 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff f89f 	bl	8001110 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e12f      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x22e>
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_OscConfig+0x278>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f88c 	bl	8001110 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffa:	e00f      	b.n	800201c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f888 	bl	8001110 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d908      	bls.n	800201c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e118      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	42470000 	.word	0x42470000
 8002018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	4b8a      	ldr	r3, [pc, #552]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800201e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e9      	bne.n	8001ffc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8097 	beq.w	8002164 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b83      	ldr	r3, [pc, #524]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a7e      	ldr	r2, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b79      	ldr	r3, [pc, #484]	; (800224c <HAL_RCC_OscConfig+0x4ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x4ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a75      	ldr	r2, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x4ac>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7ff f847 	bl	8001110 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7ff f843 	bl	8001110 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0d3      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x4ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x31a>
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x354>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x33c>
 80020c2:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a60      	ldr	r2, [pc, #384]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
 80020ce:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6713      	str	r3, [r2, #112]	; 0x70
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x354>
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a59      	ldr	r2, [pc, #356]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	4b57      	ldr	r3, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	4a56      	ldr	r2, [pc, #344]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7ff f808 	bl	8001110 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7ff f804 	bl	8001110 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e092      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ee      	beq.n	8002104 <HAL_RCC_OscConfig+0x364>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe fff2 	bl	8001110 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe ffee 	bl	8001110 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e07c      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ee      	bne.n	8002130 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d068      	beq.n	800223e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d060      	beq.n	800223a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d145      	bne.n	800220c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCC_OscConfig+0x4b0>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe ffc3 	bl	8001110 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe ffbf 	bl	8001110 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e04f      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	019b      	lsls	r3, r3, #6
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	061b      	lsls	r3, r3, #24
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	071b      	lsls	r3, r3, #28
 80021d8:	491b      	ldr	r1, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_RCC_OscConfig+0x4b0>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff94 	bl	8001110 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe ff90 	bl	8001110 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e020      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x44c>
 800220a:	e018      	b.n	800223e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x4b0>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe ff7d 	bl	8001110 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe ff79 	bl	8001110 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e009      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_OscConfig+0x4a8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x47a>
 8002238:	e001      	b.n	800223e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000
 8002250:	42470060 	.word	0x42470060

08002254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e03f      	b.n	80022e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fdb4 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2224      	movs	r2, #36	; 0x24
 8002284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f829 	bl	80022f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002330:	f023 030c 	bic.w	r3, r3, #12
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	430b      	orrs	r3, r1
 800233c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235c:	f040 80e4 	bne.w	8002528 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4aab      	ldr	r2, [pc, #684]	; (8002614 <UART_SetConfig+0x324>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <UART_SetConfig+0x84>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4aaa      	ldr	r2, [pc, #680]	; (8002618 <UART_SetConfig+0x328>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d16c      	bne.n	800244e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002374:	f7ff fad0 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 8002378:	4602      	mov	r2, r0
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	009a      	lsls	r2, r3, #2
 8002382:	441a      	add	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4aa3      	ldr	r2, [pc, #652]	; (800261c <UART_SetConfig+0x32c>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	011c      	lsls	r4, r3, #4
 8002398:	f7ff fabe 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 800239c:	4602      	mov	r2, r0
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	009a      	lsls	r2, r3, #2
 80023a6:	441a      	add	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80023b2:	f7ff fab1 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009a      	lsls	r2, r3, #2
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	4a93      	ldr	r2, [pc, #588]	; (800261c <UART_SetConfig+0x32c>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2264      	movs	r2, #100	; 0x64
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	1aeb      	subs	r3, r5, r3
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	3332      	adds	r3, #50	; 0x32
 80023e0:	4a8e      	ldr	r2, [pc, #568]	; (800261c <UART_SetConfig+0x32c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023ee:	441c      	add	r4, r3
 80023f0:	f7ff fa92 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009a      	lsls	r2, r3, #2
 80023fe:	441a      	add	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fbb2 f5f3 	udiv	r5, r2, r3
 800240a:	f7ff fa85 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 800240e:	4602      	mov	r2, r0
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	4a7d      	ldr	r2, [pc, #500]	; (800261c <UART_SetConfig+0x32c>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2264      	movs	r2, #100	; 0x64
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	1aeb      	subs	r3, r5, r3
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	3332      	adds	r3, #50	; 0x32
 8002438:	4a78      	ldr	r2, [pc, #480]	; (800261c <UART_SetConfig+0x32c>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	f003 0207 	and.w	r2, r3, #7
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4422      	add	r2, r4
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	e154      	b.n	80026f8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800244e:	f7ff fa4f 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002452:	4602      	mov	r2, r0
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	4a6c      	ldr	r2, [pc, #432]	; (800261c <UART_SetConfig+0x32c>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	011c      	lsls	r4, r3, #4
 8002472:	f7ff fa3d 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002476:	4602      	mov	r2, r0
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fbb2 f5f3 	udiv	r5, r2, r3
 800248c:	f7ff fa30 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002490:	4602      	mov	r2, r0
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009a      	lsls	r2, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a5d      	ldr	r2, [pc, #372]	; (800261c <UART_SetConfig+0x32c>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	2264      	movs	r2, #100	; 0x64
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	1aeb      	subs	r3, r5, r3
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	3332      	adds	r3, #50	; 0x32
 80024ba:	4a58      	ldr	r2, [pc, #352]	; (800261c <UART_SetConfig+0x32c>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024c8:	441c      	add	r4, r3
 80024ca:	f7ff fa11 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009a      	lsls	r2, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80024e4:	f7ff fa04 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009a      	lsls	r2, r3, #2
 80024f2:	441a      	add	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4a47      	ldr	r2, [pc, #284]	; (800261c <UART_SetConfig+0x32c>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	2264      	movs	r2, #100	; 0x64
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	1aeb      	subs	r3, r5, r3
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	3332      	adds	r3, #50	; 0x32
 8002512:	4a42      	ldr	r2, [pc, #264]	; (800261c <UART_SetConfig+0x32c>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	f003 0207 	and.w	r2, r3, #7
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4422      	add	r2, r4
 8002524:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002526:	e0e7      	b.n	80026f8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a39      	ldr	r2, [pc, #228]	; (8002614 <UART_SetConfig+0x324>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <UART_SetConfig+0x24c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a38      	ldr	r2, [pc, #224]	; (8002618 <UART_SetConfig+0x328>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d171      	bne.n	8002620 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800253c:	f7ff f9ec 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 8002540:	4602      	mov	r2, r0
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	009a      	lsls	r2, r3, #2
 800254a:	441a      	add	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4a31      	ldr	r2, [pc, #196]	; (800261c <UART_SetConfig+0x32c>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	011c      	lsls	r4, r3, #4
 8002560:	f7ff f9da 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 8002564:	4602      	mov	r2, r0
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	009a      	lsls	r2, r3, #2
 800256e:	441a      	add	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	fbb2 f5f3 	udiv	r5, r2, r3
 800257a:	f7ff f9cd 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 800257e:	4602      	mov	r2, r0
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	4a21      	ldr	r2, [pc, #132]	; (800261c <UART_SetConfig+0x32c>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2264      	movs	r2, #100	; 0x64
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	1aeb      	subs	r3, r5, r3
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	3332      	adds	r3, #50	; 0x32
 80025a8:	4a1c      	ldr	r2, [pc, #112]	; (800261c <UART_SetConfig+0x32c>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b4:	441c      	add	r4, r3
 80025b6:	f7ff f9af 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	009a      	lsls	r2, r3, #2
 80025c4:	441a      	add	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80025d0:	f7ff f9a2 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	009a      	lsls	r2, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ea:	4a0c      	ldr	r2, [pc, #48]	; (800261c <UART_SetConfig+0x32c>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	2264      	movs	r2, #100	; 0x64
 80025f4:	fb02 f303 	mul.w	r3, r2, r3
 80025f8:	1aeb      	subs	r3, r5, r3
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	3332      	adds	r3, #50	; 0x32
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <UART_SetConfig+0x32c>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	f003 020f 	and.w	r2, r3, #15
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4422      	add	r2, r4
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	e071      	b.n	80026f8 <UART_SetConfig+0x408>
 8002614:	40011000 	.word	0x40011000
 8002618:	40011400 	.word	0x40011400
 800261c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002620:	f7ff f966 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002624:	4602      	mov	r2, r0
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	441a      	add	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4a31      	ldr	r2, [pc, #196]	; (8002700 <UART_SetConfig+0x410>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	011c      	lsls	r4, r3, #4
 8002644:	f7ff f954 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002648:	4602      	mov	r2, r0
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009a      	lsls	r2, r3, #2
 8002652:	441a      	add	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	fbb2 f5f3 	udiv	r5, r2, r3
 800265e:	f7ff f947 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 8002662:	4602      	mov	r2, r0
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	4a21      	ldr	r2, [pc, #132]	; (8002700 <UART_SetConfig+0x410>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2264      	movs	r2, #100	; 0x64
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	1aeb      	subs	r3, r5, r3
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	3332      	adds	r3, #50	; 0x32
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <UART_SetConfig+0x410>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002698:	441c      	add	r4, r3
 800269a:	f7ff f929 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009a      	lsls	r2, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80026b4:	f7ff f91c 	bl	80018f0 <HAL_RCC_GetPCLK1Freq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <UART_SetConfig+0x410>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	2264      	movs	r2, #100	; 0x64
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	1aeb      	subs	r3, r5, r3
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	3332      	adds	r3, #50	; 0x32
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <UART_SetConfig+0x410>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4422      	add	r2, r4
 80026f4:	609a      	str	r2, [r3, #8]
}
 80026f6:	e7ff      	b.n	80026f8 <UART_SetConfig+0x408>
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002700:	51eb851f 	.word	0x51eb851f

08002704 <__libc_init_array>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	4d0d      	ldr	r5, [pc, #52]	; (800273c <__libc_init_array+0x38>)
 8002708:	4c0d      	ldr	r4, [pc, #52]	; (8002740 <__libc_init_array+0x3c>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	2600      	movs	r6, #0
 8002710:	42a6      	cmp	r6, r4
 8002712:	d109      	bne.n	8002728 <__libc_init_array+0x24>
 8002714:	4d0b      	ldr	r5, [pc, #44]	; (8002744 <__libc_init_array+0x40>)
 8002716:	4c0c      	ldr	r4, [pc, #48]	; (8002748 <__libc_init_array+0x44>)
 8002718:	f000 f820 	bl	800275c <_init>
 800271c:	1b64      	subs	r4, r4, r5
 800271e:	10a4      	asrs	r4, r4, #2
 8002720:	2600      	movs	r6, #0
 8002722:	42a6      	cmp	r6, r4
 8002724:	d105      	bne.n	8002732 <__libc_init_array+0x2e>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	f855 3b04 	ldr.w	r3, [r5], #4
 800272c:	4798      	blx	r3
 800272e:	3601      	adds	r6, #1
 8002730:	e7ee      	b.n	8002710 <__libc_init_array+0xc>
 8002732:	f855 3b04 	ldr.w	r3, [r5], #4
 8002736:	4798      	blx	r3
 8002738:	3601      	adds	r6, #1
 800273a:	e7f2      	b.n	8002722 <__libc_init_array+0x1e>
 800273c:	080027ac 	.word	0x080027ac
 8002740:	080027ac 	.word	0x080027ac
 8002744:	080027ac 	.word	0x080027ac
 8002748:	080027b0 	.word	0x080027b0

0800274c <memset>:
 800274c:	4402      	add	r2, r0
 800274e:	4603      	mov	r3, r0
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	f803 1b01 	strb.w	r1, [r3], #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <_init>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	bf00      	nop
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr

08002768 <_fini>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	bf00      	nop
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr
