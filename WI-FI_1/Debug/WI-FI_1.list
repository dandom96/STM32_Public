
WI-FI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800498c  0800498c  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004994  08004994  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000148  08004ae4  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015e4  08004ae4  000215e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cca  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002279  00000000  00000000  00031e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00034e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e7b  00000000  00000000  00035aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff54  00000000  00000000  00058923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d251d  00000000  00000000  00068877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ad94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e58  00000000  00000000  0013ade8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000148 	.word	0x20000148
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080048d0 	.word	0x080048d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000014c 	.word	0x2000014c
 8000200:	080048d0 	.word	0x080048d0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Function for printf
int _write(int file, char *ptr, int len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 1000);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	b29a      	uxth	r2, r3
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	68b9      	ldr	r1, [r7, #8]
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <_write+0x28>)
 8000524:	f002 fd1f 	bl	8002f66 <HAL_UART_Transmit>
	return len;
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20001588 	.word	0x20001588

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08c      	sub	sp, #48	; 0x30
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fed7 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 fb57 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 fc65 	bl	8000e14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054a:	f000 fc39 	bl	8000dc0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800054e:	f000 fbbf 	bl	8000cd0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000552:	f000 fc0b 	bl	8000d6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000556:	489d      	ldr	r0, [pc, #628]	; (80007cc <main+0x294>)
 8000558:	f002 f886 	bl	8002668 <HAL_TIM_Base_Start_IT>
  length = sizeof(Message1);
 800055c:	4b9c      	ldr	r3, [pc, #624]	; (80007d0 <main+0x298>)
 800055e:	2213      	movs	r2, #19
 8000560:	701a      	strb	r2, [r3, #0]
  length1 = strlen(Message1);
 8000562:	489c      	ldr	r0, [pc, #624]	; (80007d4 <main+0x29c>)
 8000564:	f7ff fe4e 	bl	8000204 <strlen>
 8000568:	4603      	mov	r3, r0
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b9a      	ldr	r3, [pc, #616]	; (80007d8 <main+0x2a0>)
 800056e:	701a      	strb	r2, [r3, #0]
  //GET AT OK
  printf("\r\nTransmit Message\r\n");
 8000570:	489a      	ldr	r0, [pc, #616]	; (80007dc <main+0x2a4>)
 8000572:	f003 fd55 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, AT, sizeof(AT), 100);
 8000576:	2364      	movs	r3, #100	; 0x64
 8000578:	2205      	movs	r2, #5
 800057a:	4999      	ldr	r1, [pc, #612]	; (80007e0 <main+0x2a8>)
 800057c:	4899      	ldr	r0, [pc, #612]	; (80007e4 <main+0x2ac>)
 800057e:	f002 fcf2 	bl	8002f66 <HAL_UART_Transmit>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b98      	ldr	r3, [pc, #608]	; (80007e8 <main+0x2b0>)
 8000588:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 11, 100);
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	220b      	movs	r2, #11
 800058e:	4997      	ldr	r1, [pc, #604]	; (80007ec <main+0x2b4>)
 8000590:	4894      	ldr	r0, [pc, #592]	; (80007e4 <main+0x2ac>)
 8000592:	f002 fd7a 	bl	800308a <HAL_UART_Receive>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	4b93      	ldr	r3, [pc, #588]	; (80007e8 <main+0x2b0>)
 800059c:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, AT, sizeof(AT), 100);
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	2205      	movs	r2, #5
 80005a2:	498f      	ldr	r1, [pc, #572]	; (80007e0 <main+0x2a8>)
 80005a4:	4892      	ldr	r0, [pc, #584]	; (80007f0 <main+0x2b8>)
 80005a6:	f002 fcde 	bl	8002f66 <HAL_UART_Transmit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b8e      	ldr	r3, [pc, #568]	; (80007e8 <main+0x2b0>)
 80005b0:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 80005b2:	4890      	ldr	r0, [pc, #576]	; (80007f4 <main+0x2bc>)
 80005b4:	f003 fd34 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 11, 100);
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	220b      	movs	r2, #11
 80005bc:	498b      	ldr	r1, [pc, #556]	; (80007ec <main+0x2b4>)
 80005be:	488c      	ldr	r0, [pc, #560]	; (80007f0 <main+0x2b8>)
 80005c0:	f002 fcd1 	bl	8002f66 <HAL_UART_Transmit>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b87      	ldr	r3, [pc, #540]	; (80007e8 <main+0x2b0>)
 80005ca:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d0:	e007      	b.n	80005e2 <main+0xaa>
  {
	  buf_WIFI[i] = 0;
 80005d2:	4a86      	ldr	r2, [pc, #536]	; (80007ec <main+0x2b4>)
 80005d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d6:	4413      	add	r3, r2
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 80005dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005de:	3301      	adds	r3, #1
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e4:	f241 3287 	movw	r2, #4999	; 0x1387
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d9f2      	bls.n	80005d2 <main+0x9a>
  }

  //GET Current Wifi MODE
  printf("\r\nTransmit Message\r\n");
 80005ec:	487b      	ldr	r0, [pc, #492]	; (80007dc <main+0x2a4>)
 80005ee:	f003 fd17 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, CWMODE, sizeof(CWMODE), 100);
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	2212      	movs	r2, #18
 80005f6:	4980      	ldr	r1, [pc, #512]	; (80007f8 <main+0x2c0>)
 80005f8:	487a      	ldr	r0, [pc, #488]	; (80007e4 <main+0x2ac>)
 80005fa:	f002 fcb4 	bl	8002f66 <HAL_UART_Transmit>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b79      	ldr	r3, [pc, #484]	; (80007e8 <main+0x2b0>)
 8000604:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 200, 100);       //41
 8000606:	2364      	movs	r3, #100	; 0x64
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	4978      	ldr	r1, [pc, #480]	; (80007ec <main+0x2b4>)
 800060c:	4875      	ldr	r0, [pc, #468]	; (80007e4 <main+0x2ac>)
 800060e:	f002 fd3c 	bl	800308a <HAL_UART_Receive>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b74      	ldr	r3, [pc, #464]	; (80007e8 <main+0x2b0>)
 8000618:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, CWMODE, sizeof(CWMODE), 100);
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	2212      	movs	r2, #18
 800061e:	4976      	ldr	r1, [pc, #472]	; (80007f8 <main+0x2c0>)
 8000620:	4873      	ldr	r0, [pc, #460]	; (80007f0 <main+0x2b8>)
 8000622:	f002 fca0 	bl	8002f66 <HAL_UART_Transmit>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b6f      	ldr	r3, [pc, #444]	; (80007e8 <main+0x2b0>)
 800062c:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 800062e:	4871      	ldr	r0, [pc, #452]	; (80007f4 <main+0x2bc>)
 8000630:	f003 fcf6 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 200, 100);
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	22c8      	movs	r2, #200	; 0xc8
 8000638:	496c      	ldr	r1, [pc, #432]	; (80007ec <main+0x2b4>)
 800063a:	486d      	ldr	r0, [pc, #436]	; (80007f0 <main+0x2b8>)
 800063c:	f002 fc93 	bl	8002f66 <HAL_UART_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b68      	ldr	r3, [pc, #416]	; (80007e8 <main+0x2b0>)
 8000646:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
 800064c:	e007      	b.n	800065e <main+0x126>
  {
	  buf_WIFI[i] = 0;
 800064e:	4a67      	ldr	r2, [pc, #412]	; (80007ec <main+0x2b4>)
 8000650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000652:	4413      	add	r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065a:	3301      	adds	r3, #1
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
 800065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000660:	f241 3287 	movw	r2, #4999	; 0x1387
 8000664:	4293      	cmp	r3, r2
 8000666:	d9f2      	bls.n	800064e <main+0x116>
  }

  //To station mode
  printf("\r\nTransmit Message\r\n");
 8000668:	485c      	ldr	r0, [pc, #368]	; (80007dc <main+0x2a4>)
 800066a:	f003 fcd9 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, CWMODE1, sizeof(CWMODE1), 100);
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	220e      	movs	r2, #14
 8000672:	4962      	ldr	r1, [pc, #392]	; (80007fc <main+0x2c4>)
 8000674:	485b      	ldr	r0, [pc, #364]	; (80007e4 <main+0x2ac>)
 8000676:	f002 fc76 	bl	8002f66 <HAL_UART_Transmit>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <main+0x2b0>)
 8000680:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 200, 100);      //22
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	22c8      	movs	r2, #200	; 0xc8
 8000686:	4959      	ldr	r1, [pc, #356]	; (80007ec <main+0x2b4>)
 8000688:	4856      	ldr	r0, [pc, #344]	; (80007e4 <main+0x2ac>)
 800068a:	f002 fcfe 	bl	800308a <HAL_UART_Receive>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <main+0x2b0>)
 8000694:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, CWMODE1, sizeof(CWMODE1), 100);
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	220e      	movs	r2, #14
 800069a:	4958      	ldr	r1, [pc, #352]	; (80007fc <main+0x2c4>)
 800069c:	4854      	ldr	r0, [pc, #336]	; (80007f0 <main+0x2b8>)
 800069e:	f002 fc62 	bl	8002f66 <HAL_UART_Transmit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <main+0x2b0>)
 80006a8:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 80006aa:	4852      	ldr	r0, [pc, #328]	; (80007f4 <main+0x2bc>)
 80006ac:	f003 fcb8 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 200, 100);
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	22c8      	movs	r2, #200	; 0xc8
 80006b4:	494d      	ldr	r1, [pc, #308]	; (80007ec <main+0x2b4>)
 80006b6:	484e      	ldr	r0, [pc, #312]	; (80007f0 <main+0x2b8>)
 80006b8:	f002 fc55 	bl	8002f66 <HAL_UART_Transmit>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <main+0x2b0>)
 80006c2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
 80006c8:	e007      	b.n	80006da <main+0x1a2>
  {
	  buf_WIFI[i] = 0;
 80006ca:	4a48      	ldr	r2, [pc, #288]	; (80007ec <main+0x2b4>)
 80006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ce:	4413      	add	r3, r2
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	3301      	adds	r3, #1
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d9f2      	bls.n	80006ca <main+0x192>
  }

  //Version
  printf("\r\nTransmit Message\r\n");
 80006e4:	483d      	ldr	r0, [pc, #244]	; (80007dc <main+0x2a4>)
 80006e6:	f003 fc9b 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, ATpGMR, sizeof(ATpGMR), 100);
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2209      	movs	r2, #9
 80006ee:	4944      	ldr	r1, [pc, #272]	; (8000800 <main+0x2c8>)
 80006f0:	483c      	ldr	r0, [pc, #240]	; (80007e4 <main+0x2ac>)
 80006f2:	f002 fc38 	bl	8002f66 <HAL_UART_Transmit>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <main+0x2b0>)
 80006fc:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 200, 100);     //138
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	22c8      	movs	r2, #200	; 0xc8
 8000702:	493a      	ldr	r1, [pc, #232]	; (80007ec <main+0x2b4>)
 8000704:	4837      	ldr	r0, [pc, #220]	; (80007e4 <main+0x2ac>)
 8000706:	f002 fcc0 	bl	800308a <HAL_UART_Receive>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <main+0x2b0>)
 8000710:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, ATpGMR, sizeof(ATpGMR), 100);
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	2209      	movs	r2, #9
 8000716:	493a      	ldr	r1, [pc, #232]	; (8000800 <main+0x2c8>)
 8000718:	4835      	ldr	r0, [pc, #212]	; (80007f0 <main+0x2b8>)
 800071a:	f002 fc24 	bl	8002f66 <HAL_UART_Transmit>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <main+0x2b0>)
 8000724:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <main+0x2bc>)
 8000728:	f003 fc7a 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 200, 100);
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	22c8      	movs	r2, #200	; 0xc8
 8000730:	492e      	ldr	r1, [pc, #184]	; (80007ec <main+0x2b4>)
 8000732:	482f      	ldr	r0, [pc, #188]	; (80007f0 <main+0x2b8>)
 8000734:	f002 fc17 	bl	8002f66 <HAL_UART_Transmit>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <main+0x2b0>)
 800073e:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
 8000744:	e007      	b.n	8000756 <main+0x21e>
  {
	  buf_WIFI[i] = 0;
 8000746:	4a29      	ldr	r2, [pc, #164]	; (80007ec <main+0x2b4>)
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	4413      	add	r3, r2
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	3301      	adds	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	f241 3287 	movw	r2, #4999	; 0x1387
 800075c:	4293      	cmp	r3, r2
 800075e:	d9f2      	bls.n	8000746 <main+0x20e>
  }
  //73 'I'73 'I'108 'l'
  //Available COnnections
  printf("\r\nTransmit Message\r\n");
 8000760:	481e      	ldr	r0, [pc, #120]	; (80007dc <main+0x2a4>)
 8000762:	f003 fc5d 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, CWLAP, sizeof(CWLAP), 100);
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	220b      	movs	r2, #11
 800076a:	4926      	ldr	r1, [pc, #152]	; (8000804 <main+0x2cc>)
 800076c:	481d      	ldr	r0, [pc, #116]	; (80007e4 <main+0x2ac>)
 800076e:	f002 fbfa 	bl	8002f66 <HAL_UART_Transmit>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0x2b0>)
 8000778:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 5000, 10000);     //138
 800077a:	f242 7310 	movw	r3, #10000	; 0x2710
 800077e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000782:	491a      	ldr	r1, [pc, #104]	; (80007ec <main+0x2b4>)
 8000784:	4817      	ldr	r0, [pc, #92]	; (80007e4 <main+0x2ac>)
 8000786:	f002 fc80 	bl	800308a <HAL_UART_Receive>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <main+0x2b0>)
 8000790:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, CWLAP, sizeof(CWLAP), 100);
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	220b      	movs	r2, #11
 8000796:	491b      	ldr	r1, [pc, #108]	; (8000804 <main+0x2cc>)
 8000798:	4815      	ldr	r0, [pc, #84]	; (80007f0 <main+0x2b8>)
 800079a:	f002 fbe4 	bl	8002f66 <HAL_UART_Transmit>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <main+0x2b0>)
 80007a4:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 80007a6:	4813      	ldr	r0, [pc, #76]	; (80007f4 <main+0x2bc>)
 80007a8:	f003 fc3a 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 5000, 10000);
 80007ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80007b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80007b4:	490d      	ldr	r1, [pc, #52]	; (80007ec <main+0x2b4>)
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <main+0x2b8>)
 80007b8:	f002 fbd5 	bl	8002f66 <HAL_UART_Transmit>
 80007bc:	4603      	mov	r3, r0
 80007be:	461a      	mov	r2, r3
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <main+0x2b0>)
 80007c2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
 80007c8:	e026      	b.n	8000818 <main+0x2e0>
 80007ca:	bf00      	nop
 80007cc:	20001540 	.word	0x20001540
 80007d0:	200014f8 	.word	0x200014f8
 80007d4:	200000b4 	.word	0x200000b4
 80007d8:	200015cc 	.word	0x200015cc
 80007dc:	080048e8 	.word	0x080048e8
 80007e0:	20000000 	.word	0x20000000
 80007e4:	200014fc 	.word	0x200014fc
 80007e8:	200015cd 	.word	0x200015cd
 80007ec:	20000164 	.word	0x20000164
 80007f0:	20001588 	.word	0x20001588
 80007f4:	080048fc 	.word	0x080048fc
 80007f8:	20000014 	.word	0x20000014
 80007fc:	20000028 	.word	0x20000028
 8000800:	20000008 	.word	0x20000008
 8000804:	20000038 	.word	0x20000038
  {
	  buf_WIFI[i] = 0;
 8000808:	4aa0      	ldr	r2, [pc, #640]	; (8000a8c <main+0x554>)
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	4413      	add	r3, r2
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3301      	adds	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f241 3287 	movw	r2, #4999	; 0x1387
 800081e:	4293      	cmp	r3, r2
 8000820:	d9f2      	bls.n	8000808 <main+0x2d0>
  }

  //WIFI connection
  printf("\r\nTransmit Message\r\n");
 8000822:	489b      	ldr	r0, [pc, #620]	; (8000a90 <main+0x558>)
 8000824:	f003 fbfc 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, CWJAP, sizeof(CWJAP), 10000);
 8000828:	f242 7310 	movw	r3, #10000	; 0x2710
 800082c:	2229      	movs	r2, #41	; 0x29
 800082e:	4999      	ldr	r1, [pc, #612]	; (8000a94 <main+0x55c>)
 8000830:	4899      	ldr	r0, [pc, #612]	; (8000a98 <main+0x560>)
 8000832:	f002 fb98 	bl	8002f66 <HAL_UART_Transmit>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b98      	ldr	r3, [pc, #608]	; (8000a9c <main+0x564>)
 800083c:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 100, 10000);     //138
 800083e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000842:	2264      	movs	r2, #100	; 0x64
 8000844:	4991      	ldr	r1, [pc, #580]	; (8000a8c <main+0x554>)
 8000846:	4894      	ldr	r0, [pc, #592]	; (8000a98 <main+0x560>)
 8000848:	f002 fc1f 	bl	800308a <HAL_UART_Receive>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4b92      	ldr	r3, [pc, #584]	; (8000a9c <main+0x564>)
 8000852:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, CWJAP, sizeof(CWJAP), 1000);
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	2229      	movs	r2, #41	; 0x29
 800085a:	498e      	ldr	r1, [pc, #568]	; (8000a94 <main+0x55c>)
 800085c:	4890      	ldr	r0, [pc, #576]	; (8000aa0 <main+0x568>)
 800085e:	f002 fb82 	bl	8002f66 <HAL_UART_Transmit>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b8d      	ldr	r3, [pc, #564]	; (8000a9c <main+0x564>)
 8000868:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 800086a:	488e      	ldr	r0, [pc, #568]	; (8000aa4 <main+0x56c>)
 800086c:	f003 fbd8 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 100, 1000);
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	2264      	movs	r2, #100	; 0x64
 8000876:	4985      	ldr	r1, [pc, #532]	; (8000a8c <main+0x554>)
 8000878:	4889      	ldr	r0, [pc, #548]	; (8000aa0 <main+0x568>)
 800087a:	f002 fb74 	bl	8002f66 <HAL_UART_Transmit>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b86      	ldr	r3, [pc, #536]	; (8000a9c <main+0x564>)
 8000884:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	e007      	b.n	800089c <main+0x364>
  {
	  buf_WIFI[i] = 0;
 800088c:	4a7f      	ldr	r2, [pc, #508]	; (8000a8c <main+0x554>)
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	4413      	add	r3, r2
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	3301      	adds	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	f241 3287 	movw	r2, #4999	; 0x1387
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d9f2      	bls.n	800088c <main+0x354>
  }

  //Get IP address
  printf("\r\nTransmit Message\r\n");
 80008a6:	487a      	ldr	r0, [pc, #488]	; (8000a90 <main+0x558>)
 80008a8:	f003 fbba 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, CIFSR, sizeof(CIFSR), 100);
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	220b      	movs	r2, #11
 80008b0:	497d      	ldr	r1, [pc, #500]	; (8000aa8 <main+0x570>)
 80008b2:	4879      	ldr	r0, [pc, #484]	; (8000a98 <main+0x560>)
 80008b4:	f002 fb57 	bl	8002f66 <HAL_UART_Transmit>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b77      	ldr	r3, [pc, #476]	; (8000a9c <main+0x564>)
 80008be:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 300, 100);     //138
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008c6:	4971      	ldr	r1, [pc, #452]	; (8000a8c <main+0x554>)
 80008c8:	4873      	ldr	r0, [pc, #460]	; (8000a98 <main+0x560>)
 80008ca:	f002 fbde 	bl	800308a <HAL_UART_Receive>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b72      	ldr	r3, [pc, #456]	; (8000a9c <main+0x564>)
 80008d4:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, CIFSR, sizeof(CIFSR), 100);
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	220b      	movs	r2, #11
 80008da:	4973      	ldr	r1, [pc, #460]	; (8000aa8 <main+0x570>)
 80008dc:	4870      	ldr	r0, [pc, #448]	; (8000aa0 <main+0x568>)
 80008de:	f002 fb42 	bl	8002f66 <HAL_UART_Transmit>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b6d      	ldr	r3, [pc, #436]	; (8000a9c <main+0x564>)
 80008e8:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 80008ea:	486e      	ldr	r0, [pc, #440]	; (8000aa4 <main+0x56c>)
 80008ec:	f003 fb98 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 300, 100);
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008f6:	4965      	ldr	r1, [pc, #404]	; (8000a8c <main+0x554>)
 80008f8:	4869      	ldr	r0, [pc, #420]	; (8000aa0 <main+0x568>)
 80008fa:	f002 fb34 	bl	8002f66 <HAL_UART_Transmit>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <main+0x564>)
 8000904:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e007      	b.n	800091c <main+0x3e4>
  {
	  buf_WIFI[i] = 0;
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <main+0x554>)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000922:	4293      	cmp	r3, r2
 8000924:	d9f2      	bls.n	800090c <main+0x3d4>
  }

  //Enable Multiple Connections
  printf("\r\nTransmit Message\r\n");
 8000926:	485a      	ldr	r0, [pc, #360]	; (8000a90 <main+0x558>)
 8000928:	f003 fb7a 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, CIPMUX, sizeof(CIPMUX), 100);
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	220e      	movs	r2, #14
 8000930:	495e      	ldr	r1, [pc, #376]	; (8000aac <main+0x574>)
 8000932:	4859      	ldr	r0, [pc, #356]	; (8000a98 <main+0x560>)
 8000934:	f002 fb17 	bl	8002f66 <HAL_UART_Transmit>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <main+0x564>)
 800093e:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 100, 100);     //138
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	2264      	movs	r2, #100	; 0x64
 8000944:	4951      	ldr	r1, [pc, #324]	; (8000a8c <main+0x554>)
 8000946:	4854      	ldr	r0, [pc, #336]	; (8000a98 <main+0x560>)
 8000948:	f002 fb9f 	bl	800308a <HAL_UART_Receive>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	4b52      	ldr	r3, [pc, #328]	; (8000a9c <main+0x564>)
 8000952:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, CIPMUX, sizeof(CIPMUX), 100);
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	220e      	movs	r2, #14
 8000958:	4954      	ldr	r1, [pc, #336]	; (8000aac <main+0x574>)
 800095a:	4851      	ldr	r0, [pc, #324]	; (8000aa0 <main+0x568>)
 800095c:	f002 fb03 	bl	8002f66 <HAL_UART_Transmit>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <main+0x564>)
 8000966:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 8000968:	484e      	ldr	r0, [pc, #312]	; (8000aa4 <main+0x56c>)
 800096a:	f003 fb59 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 100, 100);
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	2264      	movs	r2, #100	; 0x64
 8000972:	4946      	ldr	r1, [pc, #280]	; (8000a8c <main+0x554>)
 8000974:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <main+0x568>)
 8000976:	f002 faf6 	bl	8002f66 <HAL_UART_Transmit>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <main+0x564>)
 8000980:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	e007      	b.n	8000998 <main+0x460>
  {
	  buf_WIFI[i] = 0;
 8000988:	4a40      	ldr	r2, [pc, #256]	; (8000a8c <main+0x554>)
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	4413      	add	r3, r2
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	3301      	adds	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	f241 3287 	movw	r2, #4999	; 0x1387
 800099e:	4293      	cmp	r3, r2
 80009a0:	d9f2      	bls.n	8000988 <main+0x450>
  }

  //CReate Server
  printf("\r\nTransmit Message\r\n");
 80009a2:	483b      	ldr	r0, [pc, #236]	; (8000a90 <main+0x558>)
 80009a4:	f003 fb3c 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart1, CIPSERVER, sizeof(CIPSERVER), 100);
 80009a8:	2364      	movs	r3, #100	; 0x64
 80009aa:	2214      	movs	r2, #20
 80009ac:	4940      	ldr	r1, [pc, #256]	; (8000ab0 <main+0x578>)
 80009ae:	483a      	ldr	r0, [pc, #232]	; (8000a98 <main+0x560>)
 80009b0:	f002 fad9 	bl	8002f66 <HAL_UART_Transmit>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <main+0x564>)
 80009ba:	701a      	strb	r2, [r3, #0]
  ret = HAL_UART_Receive(&huart1, buf_WIFI, 100, 100);     //138
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	2264      	movs	r2, #100	; 0x64
 80009c0:	4932      	ldr	r1, [pc, #200]	; (8000a8c <main+0x554>)
 80009c2:	4835      	ldr	r0, [pc, #212]	; (8000a98 <main+0x560>)
 80009c4:	f002 fb61 	bl	800308a <HAL_UART_Receive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <main+0x564>)
 80009ce:	701a      	strb	r2, [r3, #0]

  ret = HAL_UART_Transmit(&huart2, CIPSERVER, sizeof(CIPSERVER), 100);
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	2214      	movs	r2, #20
 80009d4:	4936      	ldr	r1, [pc, #216]	; (8000ab0 <main+0x578>)
 80009d6:	4832      	ldr	r0, [pc, #200]	; (8000aa0 <main+0x568>)
 80009d8:	f002 fac5 	bl	8002f66 <HAL_UART_Transmit>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <main+0x564>)
 80009e2:	701a      	strb	r2, [r3, #0]
  printf("\r\nReceived Message\r\n");
 80009e4:	482f      	ldr	r0, [pc, #188]	; (8000aa4 <main+0x56c>)
 80009e6:	f003 fb1b 	bl	8004020 <puts>
  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 100, 100);
 80009ea:	2364      	movs	r3, #100	; 0x64
 80009ec:	2264      	movs	r2, #100	; 0x64
 80009ee:	4927      	ldr	r1, [pc, #156]	; (8000a8c <main+0x554>)
 80009f0:	482b      	ldr	r0, [pc, #172]	; (8000aa0 <main+0x568>)
 80009f2:	f002 fab8 	bl	8002f66 <HAL_UART_Transmit>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <main+0x564>)
 80009fc:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e007      	b.n	8000a14 <main+0x4dc>
  {
	  buf_WIFI[i] = 0;
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <main+0x554>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4413      	add	r3, r2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d9f2      	bls.n	8000a04 <main+0x4cc>
  }
  HAL_Delay(1000);
 8000a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a22:	f000 fcd7 	bl	80013d4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //sizeof(test_cmd)
  while (1)
  {
	  printf("\r\nTransmit Message\r\n");
 8000a26:	481a      	ldr	r0, [pc, #104]	; (8000a90 <main+0x558>)
 8000a28:	f003 fafa 	bl	8004020 <puts>
	  ret = HAL_UART_Transmit(&huart1, CIPSEND, sizeof(CIPSEND), 1000);
 8000a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a30:	2212      	movs	r2, #18
 8000a32:	4920      	ldr	r1, [pc, #128]	; (8000ab4 <main+0x57c>)
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <main+0x560>)
 8000a36:	f002 fa96 	bl	8002f66 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <main+0x564>)
 8000a40:	701a      	strb	r2, [r3, #0]
	  ret = HAL_UART_Receive(&huart1, buf_WIFI, 100, 1000);     //138
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	2264      	movs	r2, #100	; 0x64
 8000a48:	4910      	ldr	r1, [pc, #64]	; (8000a8c <main+0x554>)
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <main+0x560>)
 8000a4c:	f002 fb1d 	bl	800308a <HAL_UART_Receive>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <main+0x564>)
 8000a56:	701a      	strb	r2, [r3, #0]

	  ret = HAL_UART_Transmit(&huart2, CIPSEND, sizeof(CIPSEND), 100);
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	2212      	movs	r2, #18
 8000a5c:	4915      	ldr	r1, [pc, #84]	; (8000ab4 <main+0x57c>)
 8000a5e:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <main+0x568>)
 8000a60:	f002 fa81 	bl	8002f66 <HAL_UART_Transmit>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <main+0x564>)
 8000a6a:	701a      	strb	r2, [r3, #0]
	  printf("\r\nReceived Message\r\n");
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <main+0x56c>)
 8000a6e:	f003 fad7 	bl	8004020 <puts>
	  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 100, 100);
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	2264      	movs	r2, #100	; 0x64
 8000a76:	4905      	ldr	r1, [pc, #20]	; (8000a8c <main+0x554>)
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <main+0x568>)
 8000a7a:	f002 fa74 	bl	8002f66 <HAL_UART_Transmit>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <main+0x564>)
 8000a84:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	e01d      	b.n	8000ac8 <main+0x590>
 8000a8c:	20000164 	.word	0x20000164
 8000a90:	080048e8 	.word	0x080048e8
 8000a94:	20000044 	.word	0x20000044
 8000a98:	200014fc 	.word	0x200014fc
 8000a9c:	200015cd 	.word	0x200015cd
 8000aa0:	20001588 	.word	0x20001588
 8000aa4:	080048fc 	.word	0x080048fc
 8000aa8:	20000070 	.word	0x20000070
 8000aac:	2000007c 	.word	0x2000007c
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	200000a0 	.word	0x200000a0
	  {
		  buf_WIFI[i] = 0;
 8000ab8:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <main+0x69c>)
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	4413      	add	r3, r2
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d9f2      	bls.n	8000ab8 <main+0x580>
	  }

	  //Transmit Message
	  printf("\r\nTransmit Message\r\n");
 8000ad2:	4841      	ldr	r0, [pc, #260]	; (8000bd8 <main+0x6a0>)
 8000ad4:	f003 faa4 	bl	8004020 <puts>
	  ret = HAL_UART_Transmit(&huart1, Message1, sizeof(Message1), 1000);
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	2213      	movs	r2, #19
 8000ade:	493f      	ldr	r1, [pc, #252]	; (8000bdc <main+0x6a4>)
 8000ae0:	483f      	ldr	r0, [pc, #252]	; (8000be0 <main+0x6a8>)
 8000ae2:	f002 fa40 	bl	8002f66 <HAL_UART_Transmit>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <main+0x6ac>)
 8000aec:	701a      	strb	r2, [r3, #0]
	  ret = HAL_UART_Receive(&huart1, buf_WIFI, 100, 1000);     //138
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	2264      	movs	r2, #100	; 0x64
 8000af4:	4937      	ldr	r1, [pc, #220]	; (8000bd4 <main+0x69c>)
 8000af6:	483a      	ldr	r0, [pc, #232]	; (8000be0 <main+0x6a8>)
 8000af8:	f002 fac7 	bl	800308a <HAL_UART_Receive>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <main+0x6ac>)
 8000b02:	701a      	strb	r2, [r3, #0]

	  ret = HAL_UART_Transmit(&huart2, Message1, sizeof(Message1), 100);
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	2213      	movs	r2, #19
 8000b08:	4934      	ldr	r1, [pc, #208]	; (8000bdc <main+0x6a4>)
 8000b0a:	4837      	ldr	r0, [pc, #220]	; (8000be8 <main+0x6b0>)
 8000b0c:	f002 fa2b 	bl	8002f66 <HAL_UART_Transmit>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <main+0x6ac>)
 8000b16:	701a      	strb	r2, [r3, #0]
	  printf("\r\nReceived Message\r\n");
 8000b18:	4834      	ldr	r0, [pc, #208]	; (8000bec <main+0x6b4>)
 8000b1a:	f003 fa81 	bl	8004020 <puts>
	  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 100, 100);
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	2264      	movs	r2, #100	; 0x64
 8000b22:	492c      	ldr	r1, [pc, #176]	; (8000bd4 <main+0x69c>)
 8000b24:	4830      	ldr	r0, [pc, #192]	; (8000be8 <main+0x6b0>)
 8000b26:	f002 fa1e 	bl	8002f66 <HAL_UART_Transmit>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <main+0x6ac>)
 8000b30:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	e007      	b.n	8000b48 <main+0x610>
	  {
		  buf_WIFI[i] = 0;
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <main+0x69c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d9f2      	bls.n	8000b38 <main+0x600>
	  }

	  //CLose channel
	  printf("\r\nTransmit Message\r\n");
 8000b52:	4821      	ldr	r0, [pc, #132]	; (8000bd8 <main+0x6a0>)
 8000b54:	f003 fa64 	bl	8004020 <puts>
	  ret = HAL_UART_Transmit(&huart1, CIPCLOSE, sizeof(CIPCLOSE), 1000);
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	4924      	ldr	r1, [pc, #144]	; (8000bf0 <main+0x6b8>)
 8000b60:	481f      	ldr	r0, [pc, #124]	; (8000be0 <main+0x6a8>)
 8000b62:	f002 fa00 	bl	8002f66 <HAL_UART_Transmit>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <main+0x6ac>)
 8000b6c:	701a      	strb	r2, [r3, #0]
	  ret = HAL_UART_Receive(&huart1, buf_WIFI, 100, 1000);     //138
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	2264      	movs	r2, #100	; 0x64
 8000b74:	4917      	ldr	r1, [pc, #92]	; (8000bd4 <main+0x69c>)
 8000b76:	481a      	ldr	r0, [pc, #104]	; (8000be0 <main+0x6a8>)
 8000b78:	f002 fa87 	bl	800308a <HAL_UART_Receive>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <main+0x6ac>)
 8000b82:	701a      	strb	r2, [r3, #0]

	  ret = HAL_UART_Transmit(&huart2, CIPCLOSE, sizeof(CIPCLOSE), 100);
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	2210      	movs	r2, #16
 8000b88:	4919      	ldr	r1, [pc, #100]	; (8000bf0 <main+0x6b8>)
 8000b8a:	4817      	ldr	r0, [pc, #92]	; (8000be8 <main+0x6b0>)
 8000b8c:	f002 f9eb 	bl	8002f66 <HAL_UART_Transmit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <main+0x6ac>)
 8000b96:	701a      	strb	r2, [r3, #0]
	  printf("\r\nReceived Message\r\n");
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <main+0x6b4>)
 8000b9a:	f003 fa41 	bl	8004020 <puts>
	  ret = HAL_UART_Transmit(&huart2, buf_WIFI, 100, 100);
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	2264      	movs	r2, #100	; 0x64
 8000ba2:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <main+0x69c>)
 8000ba4:	4810      	ldr	r0, [pc, #64]	; (8000be8 <main+0x6b0>)
 8000ba6:	f002 f9de 	bl	8002f66 <HAL_UART_Transmit>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <main+0x6ac>)
 8000bb0:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	e007      	b.n	8000bc8 <main+0x690>
	  {
		  buf_WIFI[i] = 0;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <main+0x69c>)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<sizeof(buf_WIFI); i++)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d9f2      	bls.n	8000bb8 <main+0x680>
	  printf("\r\nTransmit Message\r\n");
 8000bd2:	e728      	b.n	8000a26 <main+0x4ee>
 8000bd4:	20000164 	.word	0x20000164
 8000bd8:	080048e8 	.word	0x080048e8
 8000bdc:	200000b4 	.word	0x200000b4
 8000be0:	200014fc 	.word	0x200014fc
 8000be4:	200015cd 	.word	0x200015cd
 8000be8:	20001588 	.word	0x20001588
 8000bec:	080048fc 	.word	0x080048fc
 8000bf0:	200000c8 	.word	0x200000c8

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2234      	movs	r2, #52	; 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 f996 	bl	8003f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <SystemClock_Config+0xd4>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <SystemClock_Config+0xd4>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <SystemClock_Config+0xd4>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <SystemClock_Config+0xd8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c40:	4a22      	ldr	r2, [pc, #136]	; (8000ccc <SystemClock_Config+0xd8>)
 8000c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <SystemClock_Config+0xd8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	2302      	movs	r3, #2
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c72:	2304      	movs	r3, #4
 8000c74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fa02 	bl	800208c <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c8e:	f000 f943 	bl	8000f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2302      	movs	r3, #2
 8000c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2102      	movs	r1, #2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ff20 	bl	8001af4 <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cba:	f000 f92d 	bl	8000f18 <Error_Handler>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3750      	adds	r7, #80	; 0x50
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cf6:	2254      	movs	r2, #84	; 0x54
 8000cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249999;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d02:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <MX_TIM2_Init+0x98>)
 8000d04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d14:	f001 fc58 	bl	80025c8 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f000 f8fb 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d30:	f001 fe12 	bl	8002958 <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 f8ed 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d4c:	f002 f82e 	bl	8002dac <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000d56:	f000 f8df 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20001540 	.word	0x20001540
 8000d68:	0003d08f 	.word	0x0003d08f

08000d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <MX_USART1_UART_Init+0x50>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USART1_UART_Init+0x4c>)
 8000da4:	f002 f892 	bl	8002ecc <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dae:	f000 f8b3 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200014fc 	.word	0x200014fc
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000df8:	f002 f868 	bl	8002ecc <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e02:	f000 f889 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20001588 	.word	0x20001588
 8000e10:	40004400 	.word	0x40004400

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a2c      	ldr	r2, [pc, #176]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <MX_GPIO_Init+0xd4>)
 8000ea0:	f000 fdf4 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eaa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_GPIO_Init+0xd8>)
 8000ebc:	f000 fc52 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_GPIO_Init+0xd4>)
 8000ed8:	f000 fc44 	bl	8001764 <HAL_GPIO_Init>

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020800 	.word	0x40020800

08000ef0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) //If the source is TIM2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d103      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f02:	2120      	movs	r1, #32
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f06:	f000 fdda 	bl	8001abe <HAL_GPIO_TogglePin>
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020000 	.word	0x40020000

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f62:	2007      	movs	r0, #7
 8000f64:	f000 fb2a 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f84:	d115      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 fb13 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fac:	201c      	movs	r0, #28
 8000fae:	f000 fb2c 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a3a      	ldr	r2, [pc, #232]	; (80010c8 <HAL_UART_MspInit+0x108>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d135      	bne.n	800104e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a38      	ldr	r2, [pc, #224]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a31      	ldr	r2, [pc, #196]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800101a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800102c:	2307      	movs	r3, #7
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <HAL_UART_MspInit+0x110>)
 8001038:	f000 fb94 	bl	8001764 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2025      	movs	r0, #37	; 0x25
 8001042:	f000 fac6 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001046:	2025      	movs	r0, #37	; 0x25
 8001048:	f000 fadf 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800104c:	e038      	b.n	80010c0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <HAL_UART_MspInit+0x114>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d133      	bne.n	80010c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_UART_MspInit+0x10c>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a1a      	ldr	r2, [pc, #104]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8001062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_UART_MspInit+0x10c>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_UART_MspInit+0x10c>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <HAL_UART_MspInit+0x10c>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0x10c>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001090:	230c      	movs	r3, #12
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a0:	2307      	movs	r3, #7
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4809      	ldr	r0, [pc, #36]	; (80010d0 <HAL_UART_MspInit+0x110>)
 80010ac:	f000 fb5a 	bl	8001764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2026      	movs	r0, #38	; 0x26
 80010b6:	f000 fa8c 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ba:	2026      	movs	r0, #38	; 0x26
 80010bc:	f000 faa5 	bl	800160a <HAL_NVIC_EnableIRQ>
}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40011000 	.word	0x40011000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40004400 	.word	0x40004400

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f936 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM2_IRQHandler+0x10>)
 8001132:	f001 fb09 	bl	8002748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20001540 	.word	0x20001540

08001140 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <USART1_IRQHandler+0x10>)
 8001146:	f002 f843 	bl	80031d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200014fc 	.word	0x200014fc

08001154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <USART2_IRQHandler+0x10>)
 800115a:	f002 f839 	bl	80031d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20001588 	.word	0x20001588

08001168 <_read>:
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e00a      	b.n	8001190 <_read+0x28>
 800117a:	f3af 8000 	nop.w
 800117e:	4601      	mov	r1, r0
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	60ba      	str	r2, [r7, #8]
 8001186:	b2ca      	uxtb	r2, r1
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	429a      	cmp	r2, r3
 8001196:	dbf0      	blt.n	800117a <_read+0x12>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_close>:
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_fstat>:
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	2300      	movs	r3, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_isatty>:
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	2301      	movs	r3, #1
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_lseek>:
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	2300      	movs	r3, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <_sbrk>:
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
 800123c:	f002 fe50 	bl	8003ee0 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_sbrk+0x64>)
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20020000 	.word	0x20020000
 800126c:	00000400 	.word	0x00000400
 8001270:	200014ec 	.word	0x200014ec
 8001274:	200015e8 	.word	0x200015e8

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0x12>
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <LoopFillZerobss+0x1a>)
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <LoopFillZerobss+0x1e>)
 80012a6:	2300      	movs	r3, #0
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:
 80012aa:	58d4      	ldr	r4, [r2, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:
 80012b0:	18c4      	adds	r4, r0, r3
 80012b2:	428c      	cmp	r4, r1
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopFillZerobss+0x22>)
 80012b8:	4c0b      	ldr	r4, [pc, #44]	; (80012e8 <LoopFillZerobss+0x26>)
 80012ba:	2300      	movs	r3, #0
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:
 80012c2:	42a2      	cmp	r2, r4
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>
 80012c6:	f7ff ffd7 	bl	8001278 <SystemInit>
 80012ca:	f002 fe0f 	bl	8003eec <__libc_init_array>
 80012ce:	f7ff f933 	bl	8000538 <main>
 80012d2:	4770      	bx	lr
 80012d4:	20020000 	.word	0x20020000
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000148 	.word	0x20000148
 80012e0:	0800499c 	.word	0x0800499c
 80012e4:	20000148 	.word	0x20000148
 80012e8:	200015e4 	.word	0x200015e4

080012ec <ADC_IRQHandler>:
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_Init+0x40>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_Init+0x40>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x40>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f94f 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fdfe 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f967 	bl	8001626 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f92f 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000d8 	.word	0x200000d8
 800138c:	200000e0 	.word	0x200000e0
 8001390:	200000dc 	.word	0x200000dc

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200000e0 	.word	0x200000e0
 80013b8:	200015d0 	.word	0x200015d0

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200015d0 	.word	0x200015d0

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000e0 	.word	0x200000e0

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff3e 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff31 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff feb6 	bl	80013bc <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d008      	beq.n	8001670 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e052      	b.n	8001716 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0216 	bic.w	r2, r2, #22
 800167e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800168e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <HAL_DMA_Abort+0x62>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0208 	bic.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c0:	e013      	b.n	80016ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c2:	f7ff fe7b 	bl	80013bc <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d90c      	bls.n	80016ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2220      	movs	r2, #32
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e015      	b.n	8001716 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e4      	bne.n	80016c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	223f      	movs	r2, #63	; 0x3f
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d004      	beq.n	800173c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e00c      	b.n	8001756 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2205      	movs	r2, #5
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e165      	b.n	8001a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8154 	bne.w	8001a46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80ae 	beq.w	8001a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a5c      	ldr	r2, [pc, #368]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001906:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_GPIO_Init+0x308>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x21a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4e      	ldr	r2, [pc, #312]	; (8001a70 <HAL_GPIO_Init+0x30c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x216>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4d      	ldr	r2, [pc, #308]	; (8001a74 <HAL_GPIO_Init+0x310>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x212>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4c      	ldr	r2, [pc, #304]	; (8001a78 <HAL_GPIO_Init+0x314>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x20e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_GPIO_Init+0x318>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x20a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_GPIO_Init+0x31c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x206>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x320>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x202>
 8001962:	2306      	movs	r3, #6
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001966:	2307      	movs	r3, #7
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ec:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_GPIO_Init+0x324>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x324>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_GPIO_Init+0x324>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae96 	bls.w	8001780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ad0:	887a      	ldrh	r2, [r7, #2]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	041a      	lsls	r2, r3, #16
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	400b      	ands	r3, r1
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cc      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d90c      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b65      	ldr	r3, [pc, #404]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0b8      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	494d      	ldr	r1, [pc, #308]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d044      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e067      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4934      	ldr	r1, [pc, #208]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7ff fbea 	bl	80013bc <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff fbe6 	bl	80013bc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e04f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d20c      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e032      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4916      	ldr	r1, [pc, #88]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7a:	f000 f855 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	490a      	ldr	r1, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fb4a 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08004910 	.word	0x08004910
 8001cb8:	200000d8 	.word	0x200000d8
 8001cbc:	200000dc 	.word	0x200000dc

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200000d8 	.word	0x200000d8

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08004920 	.word	0x08004920

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d04:	f7ff ffdc 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0b5b      	lsrs	r3, r3, #13
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	08004920 	.word	0x08004920

08001d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d2c:	b088      	sub	sp, #32
 8001d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d44:	4bce      	ldr	r3, [pc, #824]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	f200 818d 	bhi.w	800206c <HAL_RCC_GetSysClockFreq+0x344>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <HAL_RCC_GetSysClockFreq+0x30>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001d8d 	.word	0x08001d8d
 8001d5c:	0800206d 	.word	0x0800206d
 8001d60:	0800206d 	.word	0x0800206d
 8001d64:	0800206d 	.word	0x0800206d
 8001d68:	08001d93 	.word	0x08001d93
 8001d6c:	0800206d 	.word	0x0800206d
 8001d70:	0800206d 	.word	0x0800206d
 8001d74:	0800206d 	.word	0x0800206d
 8001d78:	08001d99 	.word	0x08001d99
 8001d7c:	0800206d 	.word	0x0800206d
 8001d80:	0800206d 	.word	0x0800206d
 8001d84:	0800206d 	.word	0x0800206d
 8001d88:	08001f0d 	.word	0x08001f0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4bbd      	ldr	r3, [pc, #756]	; (8002084 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d8e:	61bb      	str	r3, [r7, #24]
       break;
 8001d90:	e16f      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d92:	4bbd      	ldr	r3, [pc, #756]	; (8002088 <HAL_RCC_GetSysClockFreq+0x360>)
 8001d94:	61bb      	str	r3, [r7, #24]
      break;
 8001d96:	e16c      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d98:	4bb9      	ldr	r3, [pc, #740]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da2:	4bb7      	ldr	r3, [pc, #732]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d053      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dae:	4bb4      	ldr	r3, [pc, #720]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	461a      	mov	r2, r3
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dbe:	f04f 0100 	mov.w	r1, #0
 8001dc2:	ea02 0400 	and.w	r4, r2, r0
 8001dc6:	603c      	str	r4, [r7, #0]
 8001dc8:	400b      	ands	r3, r1
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	014b      	lsls	r3, r1, #5
 8001dde:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001de2:	0142      	lsls	r2, r0, #5
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	4623      	mov	r3, r4
 8001dea:	1ac0      	subs	r0, r0, r3
 8001dec:	462b      	mov	r3, r5
 8001dee:	eb61 0103 	sbc.w	r1, r1, r3
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	018b      	lsls	r3, r1, #6
 8001dfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e00:	0182      	lsls	r2, r0, #6
 8001e02:	1a12      	subs	r2, r2, r0
 8001e04:	eb63 0301 	sbc.w	r3, r3, r1
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	00d9      	lsls	r1, r3, #3
 8001e12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e16:	00d0      	lsls	r0, r2, #3
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	1852      	adds	r2, r2, r1
 8001e20:	4629      	mov	r1, r5
 8001e22:	eb43 0101 	adc.w	r1, r3, r1
 8001e26:	460b      	mov	r3, r1
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	0259      	lsls	r1, r3, #9
 8001e32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e36:	0250      	lsls	r0, r2, #9
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	f7fe f9e4 	bl	8000214 <__aeabi_uldivmod>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4613      	mov	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	e04c      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e56:	4b8a      	ldr	r3, [pc, #552]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	ea02 0a00 	and.w	sl, r2, r0
 8001e6e:	ea03 0b01 	and.w	fp, r3, r1
 8001e72:	4650      	mov	r0, sl
 8001e74:	4659      	mov	r1, fp
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	014b      	lsls	r3, r1, #5
 8001e80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e84:	0142      	lsls	r2, r0, #5
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	ebb0 000a 	subs.w	r0, r0, sl
 8001e8e:	eb61 010b 	sbc.w	r1, r1, fp
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	018b      	lsls	r3, r1, #6
 8001e9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ea0:	0182      	lsls	r2, r0, #6
 8001ea2:	1a12      	subs	r2, r2, r0
 8001ea4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ea8:	f04f 0000 	mov.w	r0, #0
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	00d9      	lsls	r1, r3, #3
 8001eb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eb6:	00d0      	lsls	r0, r2, #3
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	eb12 020a 	adds.w	r2, r2, sl
 8001ec0:	eb43 030b 	adc.w	r3, r3, fp
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	0299      	lsls	r1, r3, #10
 8001ece:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ed2:	0290      	lsls	r0, r2, #10
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	f7fe f996 	bl	8000214 <__aeabi_uldivmod>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4613      	mov	r3, r2
 8001eee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef0:	4b63      	ldr	r3, [pc, #396]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	3301      	adds	r3, #1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	61bb      	str	r3, [r7, #24]
      break;
 8001f0a:	e0b2      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f14:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f16:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d04d      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	099b      	lsrs	r3, r3, #6
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	ea02 0800 	and.w	r8, r2, r0
 8001f3a:	ea03 0901 	and.w	r9, r3, r1
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4649      	mov	r1, r9
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	014b      	lsls	r3, r1, #5
 8001f4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f50:	0142      	lsls	r2, r0, #5
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	ebb0 0008 	subs.w	r0, r0, r8
 8001f5a:	eb61 0109 	sbc.w	r1, r1, r9
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	018b      	lsls	r3, r1, #6
 8001f68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f6c:	0182      	lsls	r2, r0, #6
 8001f6e:	1a12      	subs	r2, r2, r0
 8001f70:	eb63 0301 	sbc.w	r3, r3, r1
 8001f74:	f04f 0000 	mov.w	r0, #0
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	00d9      	lsls	r1, r3, #3
 8001f7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f82:	00d0      	lsls	r0, r2, #3
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	eb12 0208 	adds.w	r2, r2, r8
 8001f8c:	eb43 0309 	adc.w	r3, r3, r9
 8001f90:	f04f 0000 	mov.w	r0, #0
 8001f94:	f04f 0100 	mov.w	r1, #0
 8001f98:	0259      	lsls	r1, r3, #9
 8001f9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f9e:	0250      	lsls	r0, r2, #9
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	f7fe f930 	bl	8000214 <__aeabi_uldivmod>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	e04a      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fce:	f04f 0100 	mov.w	r1, #0
 8001fd2:	ea02 0400 	and.w	r4, r2, r0
 8001fd6:	ea03 0501 	and.w	r5, r3, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	014b      	lsls	r3, r1, #5
 8001fe8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fec:	0142      	lsls	r2, r0, #5
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	1b00      	subs	r0, r0, r4
 8001ff4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	018b      	lsls	r3, r1, #6
 8002002:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002006:	0182      	lsls	r2, r0, #6
 8002008:	1a12      	subs	r2, r2, r0
 800200a:	eb63 0301 	sbc.w	r3, r3, r1
 800200e:	f04f 0000 	mov.w	r0, #0
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	00d9      	lsls	r1, r3, #3
 8002018:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800201c:	00d0      	lsls	r0, r2, #3
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	1912      	adds	r2, r2, r4
 8002024:	eb45 0303 	adc.w	r3, r5, r3
 8002028:	f04f 0000 	mov.w	r0, #0
 800202c:	f04f 0100 	mov.w	r1, #0
 8002030:	0299      	lsls	r1, r3, #10
 8002032:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002036:	0290      	lsls	r0, r2, #10
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	461a      	mov	r2, r3
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	f7fe f8e4 	bl	8000214 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_GetSysClockFreq+0x358>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	0f1b      	lsrs	r3, r3, #28
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	61bb      	str	r3, [r7, #24]
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetSysClockFreq+0x35c>)
 800206e:	61bb      	str	r3, [r7, #24]
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	69bb      	ldr	r3, [r7, #24]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	00f42400 	.word	0x00f42400
 8002088:	007a1200 	.word	0x007a1200

0800208c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e28d      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8083 	beq.w	80021b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020ac:	4b94      	ldr	r3, [pc, #592]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d019      	beq.n	80020ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020b8:	4b91      	ldr	r3, [pc, #580]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020c4:	4b8e      	ldr	r3, [pc, #568]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d0:	d00c      	beq.n	80020ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d2:	4b8b      	ldr	r3, [pc, #556]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d112      	bne.n	8002104 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020de:	4b88      	ldr	r3, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ea:	d10b      	bne.n	8002104 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	4b84      	ldr	r3, [pc, #528]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d05b      	beq.n	80021b0 <HAL_RCC_OscConfig+0x124>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d157      	bne.n	80021b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e25a      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210c:	d106      	bne.n	800211c <HAL_RCC_OscConfig+0x90>
 800210e:	4b7c      	ldr	r3, [pc, #496]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7b      	ldr	r2, [pc, #492]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e01d      	b.n	8002158 <HAL_RCC_OscConfig+0xcc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0xb4>
 8002126:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a75      	ldr	r2, [pc, #468]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 800212c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b73      	ldr	r3, [pc, #460]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a72      	ldr	r2, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0xcc>
 8002140:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6e      	ldr	r2, [pc, #440]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6b      	ldr	r2, [pc, #428]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff f92c 	bl	80013bc <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f928 	bl	80013bc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e21f      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b61      	ldr	r3, [pc, #388]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0xdc>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f918 	bl	80013bc <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f914 	bl	80013bc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e20b      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x104>
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06f      	beq.n	800229e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021be:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d017      	beq.n	80021fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ca:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d105      	bne.n	80021e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021d6:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d11c      	bne.n	8002228 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ee:	4b44      	ldr	r3, [pc, #272]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d116      	bne.n	8002228 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_RCC_OscConfig+0x186>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1d3      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4937      	ldr	r1, [pc, #220]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	e03a      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_RCC_OscConfig+0x278>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7ff f8c1 	bl	80013bc <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223e:	f7ff f8bd 	bl	80013bc <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1b4      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4925      	ldr	r1, [pc, #148]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_OscConfig+0x278>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f8a0 	bl	80013bc <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002280:	f7ff f89c 	bl	80013bc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e193      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d036      	beq.n	8002318 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7ff f880 	bl	80013bc <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c0:	f7ff f87c 	bl	80013bc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e173      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x234>
 80022de:	e01b      	b.n	8002318 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7ff f869 	bl	80013bc <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ec:	e00e      	b.n	800230c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ee:	f7ff f865 	bl	80013bc <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d907      	bls.n	800230c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e15c      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
 8002300:	40023800 	.word	0x40023800
 8002304:	42470000 	.word	0x42470000
 8002308:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	4b8a      	ldr	r3, [pc, #552]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 800230e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ea      	bne.n	80022ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8097 	beq.w	8002454 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b83      	ldr	r3, [pc, #524]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a7e      	ldr	r2, [pc, #504]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b7c      	ldr	r3, [pc, #496]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b79      	ldr	r3, [pc, #484]	; (800253c <HAL_RCC_OscConfig+0x4b0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x4b0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a75      	ldr	r2, [pc, #468]	; (800253c <HAL_RCC_OscConfig+0x4b0>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7ff f825 	bl	80013bc <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7ff f821 	bl	80013bc <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e118      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	4b6c      	ldr	r3, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x4b0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x31e>
 800239c:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x358>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x340>
 80023b2:	4b61      	ldr	r3, [pc, #388]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a60      	ldr	r2, [pc, #384]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	4b5e      	ldr	r3, [pc, #376]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0x358>
 80023cc:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a59      	ldr	r2, [pc, #356]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a56      	ldr	r2, [pc, #344]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7fe ffe6 	bl	80013bc <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7fe ffe2 	bl	80013bc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0d7      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	4b4b      	ldr	r3, [pc, #300]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ee      	beq.n	80023f4 <HAL_RCC_OscConfig+0x368>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe ffd0 	bl	80013bc <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe ffcc 	bl	80013bc <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0c1      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002436:	4b40      	ldr	r3, [pc, #256]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ee      	bne.n	8002420 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002448:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 800244e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80ad 	beq.w	80025b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800245e:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b08      	cmp	r3, #8
 8002468:	d060      	beq.n	800252c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d145      	bne.n	80024fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_RCC_OscConfig+0x4b4>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe ffa0 	bl	80013bc <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe ff9c 	bl	80013bc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e093      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	4b29      	ldr	r3, [pc, #164]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	3b01      	subs	r3, #1
 80024b8:	041b      	lsls	r3, r3, #16
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	071b      	lsls	r3, r3, #28
 80024ca:	491b      	ldr	r1, [pc, #108]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x4b4>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff71 	bl	80013bc <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe ff6d 	bl	80013bc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e064      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x452>
 80024fc:	e05c      	b.n	80025b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_RCC_OscConfig+0x4b4>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe ff5a 	bl	80013bc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe ff56 	bl	80013bc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e04d      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x480>
 800252a:	e045      	b.n	80025b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e040      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
 8002538:	40023800 	.word	0x40023800
 800253c:	40007000 	.word	0x40007000
 8002540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_RCC_OscConfig+0x538>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d030      	beq.n	80025b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d129      	bne.n	80025b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d122      	bne.n	80025b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800257a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800257c:	4293      	cmp	r3, r2
 800257e:	d119      	bne.n	80025b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d10f      	bne.n	80025b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e041      	b.n	800265e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fcc0 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 fa96 	bl	8002b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d001      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04e      	b.n	800271e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_TIM_Base_Start_IT+0xc4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x80>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d01d      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x80>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <HAL_TIM_Base_Start_IT+0xc8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x80>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <HAL_TIM_Base_Start_IT+0xcc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x80>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_TIM_Base_Start_IT+0xd0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x80>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_TIM_Base_Start_IT+0xd4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x80>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_TIM_Base_Start_IT+0xd8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x80>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_TIM_Base_Start_IT+0xdc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d111      	bne.n	800270c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d010      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270a:	e007      	b.n	800271c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40010000 	.word	0x40010000
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800
 8002738:	40000c00 	.word	0x40000c00
 800273c:	40010400 	.word	0x40010400
 8002740:	40014000 	.word	0x40014000
 8002744:	40001800 	.word	0x40001800

08002748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d122      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b02      	cmp	r3, #2
 800276a:	d11b      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0202 	mvn.w	r2, #2
 8002774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f9b5 	bl	8002afa <HAL_TIM_IC_CaptureCallback>
 8002790:	e005      	b.n	800279e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9a7 	bl	8002ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f9b8 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d122      	bne.n	80027f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d11b      	bne.n	80027f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0204 	mvn.w	r2, #4
 80027c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f98b 	bl	8002afa <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f97d 	bl	8002ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f98e 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b08      	cmp	r3, #8
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b08      	cmp	r3, #8
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0208 	mvn.w	r2, #8
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2204      	movs	r2, #4
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f961 	bl	8002afa <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f953 	bl	8002ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f964 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b10      	cmp	r3, #16
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b10      	cmp	r3, #16
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0210 	mvn.w	r2, #16
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2208      	movs	r2, #8
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f937 	bl	8002afa <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f929 	bl	8002ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f93a 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0201 	mvn.w	r2, #1
 80028c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fb12 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fae0 	bl	8002eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d107      	bne.n	8002924 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8ff 	bl	8002b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b20      	cmp	r3, #32
 8002930:	d10e      	bne.n	8002950 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b20      	cmp	r3, #32
 800293e:	d107      	bne.n	8002950 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0220 	mvn.w	r2, #32
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 faaa 	bl	8002ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_TIM_ConfigClockSource+0x1c>
 8002970:	2302      	movs	r3, #2
 8002972:	e0b4      	b.n	8002ade <HAL_TIM_ConfigClockSource+0x186>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800299a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d03e      	beq.n	8002a2c <HAL_TIM_ConfigClockSource+0xd4>
 80029ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b2:	f200 8087 	bhi.w	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ba:	f000 8086 	beq.w	8002aca <HAL_TIM_ConfigClockSource+0x172>
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d87f      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029c4:	2b70      	cmp	r3, #112	; 0x70
 80029c6:	d01a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0xa6>
 80029c8:	2b70      	cmp	r3, #112	; 0x70
 80029ca:	d87b      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029cc:	2b60      	cmp	r3, #96	; 0x60
 80029ce:	d050      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x11a>
 80029d0:	2b60      	cmp	r3, #96	; 0x60
 80029d2:	d877      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b50      	cmp	r3, #80	; 0x50
 80029d6:	d03c      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0xfa>
 80029d8:	2b50      	cmp	r3, #80	; 0x50
 80029da:	d873      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	d058      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x13a>
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d86f      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b30      	cmp	r3, #48	; 0x30
 80029e6:	d064      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80029e8:	2b30      	cmp	r3, #48	; 0x30
 80029ea:	d86b      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d060      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d867      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05c      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d05a      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80029fc:	e062      	b.n	8002ac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6899      	ldr	r1, [r3, #8]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f000 f9ad 	bl	8002d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	609a      	str	r2, [r3, #8]
      break;
 8002a2a:	e04f      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f000 f996 	bl	8002d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a4e:	609a      	str	r2, [r3, #8]
      break;
 8002a50:	e03c      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f000 f90a 	bl	8002c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2150      	movs	r1, #80	; 0x50
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f963 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002a70:	e02c      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f000 f929 	bl	8002cd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2160      	movs	r1, #96	; 0x60
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f953 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002a90:	e01c      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f000 f8ea 	bl	8002c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2140      	movs	r1, #64	; 0x40
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f943 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002ab0:	e00c      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f000 f93a 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002ac2:	e003      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e000      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a40      	ldr	r2, [pc, #256]	; (8002c4c <TIM_Base_SetConfig+0x114>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d013      	beq.n	8002b78 <TIM_Base_SetConfig+0x40>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b56:	d00f      	beq.n	8002b78 <TIM_Base_SetConfig+0x40>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <TIM_Base_SetConfig+0x118>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00b      	beq.n	8002b78 <TIM_Base_SetConfig+0x40>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a3c      	ldr	r2, [pc, #240]	; (8002c54 <TIM_Base_SetConfig+0x11c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d007      	beq.n	8002b78 <TIM_Base_SetConfig+0x40>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a3b      	ldr	r2, [pc, #236]	; (8002c58 <TIM_Base_SetConfig+0x120>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <TIM_Base_SetConfig+0x124>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d108      	bne.n	8002b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <TIM_Base_SetConfig+0x114>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02b      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d027      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a2c      	ldr	r2, [pc, #176]	; (8002c50 <TIM_Base_SetConfig+0x118>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d023      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <TIM_Base_SetConfig+0x11c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a2a      	ldr	r2, [pc, #168]	; (8002c58 <TIM_Base_SetConfig+0x120>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01b      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <TIM_Base_SetConfig+0x124>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d017      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <TIM_Base_SetConfig+0x128>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <TIM_Base_SetConfig+0x12c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <TIM_Base_SetConfig+0x130>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <TIM_Base_SetConfig+0x134>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <TIM_Base_SetConfig+0x138>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <TIM_Base_SetConfig+0x13c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <TIM_Base_SetConfig+0x114>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_Base_SetConfig+0xf8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <TIM_Base_SetConfig+0x124>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	615a      	str	r2, [r3, #20]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40014400 	.word	0x40014400
 8002c68:	40014800 	.word	0x40014800
 8002c6c:	40001800 	.word	0x40001800
 8002c70:	40001c00 	.word	0x40001c00
 8002c74:	40002000 	.word	0x40002000

08002c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0201 	bic.w	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f023 030a 	bic.w	r3, r3, #10
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b087      	sub	sp, #28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f043 0307 	orr.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	021a      	lsls	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e05a      	b.n	8002e7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d022      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d01d      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d018      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10c      	bne.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800
 8002e94:	40000c00 	.word	0x40000c00
 8002e98:	40010400 	.word	0x40010400
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40001800 	.word	0x40001800

08002ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e03f      	b.n	8002f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe f864 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fe1d 	bl	8003b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b08a      	sub	sp, #40	; 0x28
 8002f6a:	af02      	add	r7, sp, #8
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d17c      	bne.n	8003080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_UART_Transmit+0x2c>
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e075      	b.n	8003082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Transmit+0x3e>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e06e      	b.n	8003082 <HAL_UART_Transmit+0x11c>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	; 0x21
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fba:	f7fe f9ff 	bl	80013bc <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_UART_Transmit+0x82>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e003      	b.n	8002ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ff8:	e02a      	b.n	8003050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fb9b 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e036      	b.n	8003082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3302      	adds	r3, #2
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	e007      	b.n	8003042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cf      	bne.n	8002ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fb6b 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e006      	b.n	8003082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b08a      	sub	sp, #40	; 0x28
 800308e:	af02      	add	r7, sp, #8
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	f040 808c 	bne.w	80031c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_UART_Receive+0x2e>
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e084      	b.n	80031c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Receive+0x40>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e07d      	b.n	80031c6 <HAL_UART_Receive+0x13c>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2222      	movs	r2, #34	; 0x22
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fe f969 	bl	80013bc <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Receive+0x8a>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003124:	e043      	b.n	80031ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2120      	movs	r1, #32
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fb05 	bl	8003740 <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e042      	b.n	80031c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10c      	bne.n	8003160 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	b29b      	uxth	r3, r3
 800314e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003152:	b29a      	uxth	r2, r3
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3302      	adds	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e01f      	b.n	80031a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003168:	d007      	beq.n	800317a <HAL_UART_Receive+0xf0>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_UART_Receive+0xfe>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e008      	b.n	800319a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003194:	b2da      	uxtb	r2, r3
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1b6      	bne.n	8003126 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b0ba      	sub	sp, #232	; 0xe8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800320e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_UART_IRQHandler+0x66>
 8003222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fbd3 	bl	80039da <UART_Receive_IT>
      return;
 8003234:	e256      	b.n	80036e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80de 	beq.w	80033fc <HAL_UART_IRQHandler+0x22c>
 8003240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d106      	bne.n	800325a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80d1 	beq.w	80033fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_UART_IRQHandler+0xae>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_UART_IRQHandler+0xd2>
 800328a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_UART_IRQHandler+0xf6>
 80032ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0204 	orr.w	r2, r3, #4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d011      	beq.n	80032f6 <HAL_UART_IRQHandler+0x126>
 80032d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0208 	orr.w	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 81ed 	beq.w	80036da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x14e>
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fb5e 	bl	80039da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_UART_IRQHandler+0x17a>
 8003342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04f      	beq.n	80033ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa66 	bl	800381c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d141      	bne.n	80033e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3314      	adds	r3, #20
 8003364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800338a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800338e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1d9      	bne.n	800335e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d013      	beq.n	80033da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	4a7d      	ldr	r2, [pc, #500]	; (80035ac <HAL_UART_IRQHandler+0x3dc>)
 80033b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe f9ad 	bl	800171e <HAL_DMA_Abort_IT>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e00e      	b.n	80033f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f99a 	bl	8003714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	e00a      	b.n	80033f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f996 	bl	8003714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	e006      	b.n	80033f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f992 	bl	8003714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033f6:	e170      	b.n	80036da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	bf00      	nop
    return;
 80033fa:	e16e      	b.n	80036da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	2b01      	cmp	r3, #1
 8003402:	f040 814a 	bne.w	800369a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8143 	beq.w	800369a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 813c 	beq.w	800369a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	f040 80b4 	bne.w	80035b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8140 	beq.w	80036de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003466:	429a      	cmp	r2, r3
 8003468:	f080 8139 	bcs.w	80036de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347e:	f000 8088 	beq.w	8003592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800349c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	330c      	adds	r3, #12
 80034aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1d9      	bne.n	8003482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3314      	adds	r3, #20
 80034d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e1      	bne.n	80034ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3314      	adds	r3, #20
 8003510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800351a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800351c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3314      	adds	r3, #20
 800352a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800352e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800353c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e3      	bne.n	800350a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003562:	f023 0310 	bic.w	r3, r3, #16
 8003566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003574:	65ba      	str	r2, [r7, #88]	; 0x58
 8003576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800357a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e3      	bne.n	8003550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe f856 	bl	800163e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359a:	b29b      	uxth	r3, r3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8c0 	bl	8003728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035a8:	e099      	b.n	80036de <HAL_UART_IRQHandler+0x50e>
 80035aa:	bf00      	nop
 80035ac:	080038e3 	.word	0x080038e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 808b 	beq.w	80036e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8086 	beq.w	80036e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035fa:	647a      	str	r2, [r7, #68]	; 0x44
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e3      	bne.n	80035d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3314      	adds	r3, #20
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	623b      	str	r3, [r7, #32]
   return(result);
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003632:	633a      	str	r2, [r7, #48]	; 0x30
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e3      	bne.n	800360e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	60fb      	str	r3, [r7, #12]
   return(result);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0310 	bic.w	r3, r3, #16
 800366a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003678:	61fa      	str	r2, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	617b      	str	r3, [r7, #20]
   return(result);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e3      	bne.n	8003654 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800368c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f848 	bl	8003728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003698:	e023      	b.n	80036e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_UART_IRQHandler+0x4ea>
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f929 	bl	800390a <UART_Transmit_IT>
    return;
 80036b8:	e014      	b.n	80036e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00e      	beq.n	80036e4 <HAL_UART_IRQHandler+0x514>
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f969 	bl	80039aa <UART_EndTransmit_IT>
    return;
 80036d8:	e004      	b.n	80036e4 <HAL_UART_IRQHandler+0x514>
    return;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <HAL_UART_IRQHandler+0x514>
      return;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_UART_IRQHandler+0x514>
      return;
 80036e2:	bf00      	nop
  }
}
 80036e4:	37e8      	adds	r7, #232	; 0xe8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop

080036ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b090      	sub	sp, #64	; 0x40
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	e050      	b.n	80037f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d04c      	beq.n	80037f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800375a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <UART_WaitOnFlagUntilTimeout+0x30>
 8003760:	f7fd fe2c 	bl	80013bc <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800376c:	429a      	cmp	r2, r3
 800376e:	d241      	bcs.n	80037f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003790:	637a      	str	r2, [r7, #52]	; 0x34
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	613b      	str	r3, [r7, #16]
   return(result);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c4:	623a      	str	r2, [r7, #32]
 80037c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	69f9      	ldr	r1, [r7, #28]
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e00f      	b.n	8003814 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	429a      	cmp	r2, r3
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	429a      	cmp	r2, r3
 8003810:	d09f      	beq.n	8003752 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3740      	adds	r7, #64	; 0x40
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b095      	sub	sp, #84	; 0x54
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003844:	643a      	str	r2, [r7, #64]	; 0x40
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800384a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	61fb      	str	r3, [r7, #28]
   return(result);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2b01      	cmp	r3, #1
 8003892:	d119      	bne.n	80038c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f023 0310 	bic.w	r3, r3, #16
 80038aa:	647b      	str	r3, [r7, #68]	; 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b4:	61ba      	str	r2, [r7, #24]
 80038b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6979      	ldr	r1, [r7, #20]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	613b      	str	r3, [r7, #16]
   return(result);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038d6:	bf00      	nop
 80038d8:	3754      	adds	r7, #84	; 0x54
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7ff ff09 	bl	8003714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b21      	cmp	r3, #33	; 0x21
 800391c:	d13e      	bne.n	800399c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003926:	d114      	bne.n	8003952 <UART_Transmit_IT+0x48>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d110      	bne.n	8003952 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003944:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	1c9a      	adds	r2, r3, #2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]
 8003950:	e008      	b.n	8003964 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	1c59      	adds	r1, r3, #1
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6211      	str	r1, [r2, #32]
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29b      	uxth	r3, r3
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4619      	mov	r1, r3
 8003972:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10f      	bne.n	8003998 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003986:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003996:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fe8e 	bl	80036ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08c      	sub	sp, #48	; 0x30
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b22      	cmp	r3, #34	; 0x22
 80039ec:	f040 80ab 	bne.w	8003b46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d117      	bne.n	8003a2a <UART_Receive_IT+0x50>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	1c9a      	adds	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
 8003a28:	e026      	b.n	8003a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d007      	beq.n	8003a4e <UART_Receive_IT+0x74>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <UART_Receive_IT+0x82>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e008      	b.n	8003a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4619      	mov	r1, r3
 8003a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d15a      	bne.n	8003b42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0220 	bic.w	r2, r2, #32
 8003a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d135      	bne.n	8003b38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f023 0310 	bic.w	r3, r3, #16
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	623a      	str	r2, [r7, #32]
 8003af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	69f9      	ldr	r1, [r7, #28]
 8003af8:	6a3a      	ldr	r2, [r7, #32]
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e5      	bne.n	8003ad2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d10a      	bne.n	8003b2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff fdf9 	bl	8003728 <HAL_UARTEx_RxEventCallback>
 8003b36:	e002      	b.n	8003b3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fde1 	bl	8003700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e002      	b.n	8003b48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3730      	adds	r7, #48	; 0x30
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	b09f      	sub	sp, #124	; 0x7c
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b66:	68d9      	ldr	r1, [r3, #12]
 8003b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	ea40 0301 	orr.w	r3, r0, r1
 8003b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b94:	f021 010c 	bic.w	r1, r1, #12
 8003b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bae:	6999      	ldr	r1, [r3, #24]
 8003bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	ea40 0301 	orr.w	r3, r0, r1
 8003bb8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4bc5      	ldr	r3, [pc, #788]	; (8003ed4 <UART_SetConfig+0x384>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d004      	beq.n	8003bce <UART_SetConfig+0x7e>
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4bc3      	ldr	r3, [pc, #780]	; (8003ed8 <UART_SetConfig+0x388>)
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d103      	bne.n	8003bd6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bce:	f7fe f897 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 8003bd2:	6778      	str	r0, [r7, #116]	; 0x74
 8003bd4:	e002      	b.n	8003bdc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bd6:	f7fe f87f 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8003bda:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be4:	f040 80b6 	bne.w	8003d54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bea:	461c      	mov	r4, r3
 8003bec:	f04f 0500 	mov.w	r5, #0
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	1891      	adds	r1, r2, r2
 8003bf6:	6439      	str	r1, [r7, #64]	; 0x40
 8003bf8:	415b      	adcs	r3, r3
 8003bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c00:	1912      	adds	r2, r2, r4
 8003c02:	eb45 0303 	adc.w	r3, r5, r3
 8003c06:	f04f 0000 	mov.w	r0, #0
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	00d9      	lsls	r1, r3, #3
 8003c10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c14:	00d0      	lsls	r0, r2, #3
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	1911      	adds	r1, r2, r4
 8003c1c:	6639      	str	r1, [r7, #96]	; 0x60
 8003c1e:	416b      	adcs	r3, r5
 8003c20:	667b      	str	r3, [r7, #100]	; 0x64
 8003c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	461a      	mov	r2, r3
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	1891      	adds	r1, r2, r2
 8003c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c30:	415b      	adcs	r3, r3
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c3c:	f7fc faea 	bl	8000214 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4ba5      	ldr	r3, [pc, #660]	; (8003edc <UART_SetConfig+0x38c>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011e      	lsls	r6, r3, #4
 8003c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c50:	461c      	mov	r4, r3
 8003c52:	f04f 0500 	mov.w	r5, #0
 8003c56:	4622      	mov	r2, r4
 8003c58:	462b      	mov	r3, r5
 8003c5a:	1891      	adds	r1, r2, r2
 8003c5c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c5e:	415b      	adcs	r3, r3
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
 8003c62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c66:	1912      	adds	r2, r2, r4
 8003c68:	eb45 0303 	adc.w	r3, r5, r3
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	00d9      	lsls	r1, r3, #3
 8003c76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c7a:	00d0      	lsls	r0, r2, #3
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	1911      	adds	r1, r2, r4
 8003c82:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c84:	416b      	adcs	r3, r5
 8003c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	1891      	adds	r1, r2, r2
 8003c94:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c96:	415b      	adcs	r3, r3
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ca2:	f7fc fab7 	bl	8000214 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4b8c      	ldr	r3, [pc, #560]	; (8003edc <UART_SetConfig+0x38c>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	3332      	adds	r3, #50	; 0x32
 8003cbe:	4a87      	ldr	r2, [pc, #540]	; (8003edc <UART_SetConfig+0x38c>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ccc:	441e      	add	r6, r3
 8003cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	1894      	adds	r4, r2, r2
 8003cdc:	623c      	str	r4, [r7, #32]
 8003cde:	415b      	adcs	r3, r3
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ce6:	1812      	adds	r2, r2, r0
 8003ce8:	eb41 0303 	adc.w	r3, r1, r3
 8003cec:	f04f 0400 	mov.w	r4, #0
 8003cf0:	f04f 0500 	mov.w	r5, #0
 8003cf4:	00dd      	lsls	r5, r3, #3
 8003cf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cfa:	00d4      	lsls	r4, r2, #3
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	462b      	mov	r3, r5
 8003d00:	1814      	adds	r4, r2, r0
 8003d02:	653c      	str	r4, [r7, #80]	; 0x50
 8003d04:	414b      	adcs	r3, r1
 8003d06:	657b      	str	r3, [r7, #84]	; 0x54
 8003d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	61b9      	str	r1, [r7, #24]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d22:	f7fc fa77 	bl	8000214 <__aeabi_uldivmod>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4b6c      	ldr	r3, [pc, #432]	; (8003edc <UART_SetConfig+0x38c>)
 8003d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	2164      	movs	r1, #100	; 0x64
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	3332      	adds	r3, #50	; 0x32
 8003d3e:	4a67      	ldr	r2, [pc, #412]	; (8003edc <UART_SetConfig+0x38c>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	f003 0207 	and.w	r2, r3, #7
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4432      	add	r2, r6
 8003d50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d52:	e0b9      	b.n	8003ec8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d56:	461c      	mov	r4, r3
 8003d58:	f04f 0500 	mov.w	r5, #0
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	462b      	mov	r3, r5
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	6139      	str	r1, [r7, #16]
 8003d64:	415b      	adcs	r3, r3
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d6c:	1912      	adds	r2, r2, r4
 8003d6e:	eb45 0303 	adc.w	r3, r5, r3
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	00d9      	lsls	r1, r3, #3
 8003d7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d80:	00d0      	lsls	r0, r2, #3
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	eb12 0804 	adds.w	r8, r2, r4
 8003d8a:	eb43 0905 	adc.w	r9, r3, r5
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	008b      	lsls	r3, r1, #2
 8003da2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003da6:	0082      	lsls	r2, r0, #2
 8003da8:	4640      	mov	r0, r8
 8003daa:	4649      	mov	r1, r9
 8003dac:	f7fc fa32 	bl	8000214 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4b49      	ldr	r3, [pc, #292]	; (8003edc <UART_SetConfig+0x38c>)
 8003db6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	011e      	lsls	r6, r3, #4
 8003dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	1894      	adds	r4, r2, r2
 8003dcc:	60bc      	str	r4, [r7, #8]
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd6:	1812      	adds	r2, r2, r0
 8003dd8:	eb41 0303 	adc.w	r3, r1, r3
 8003ddc:	f04f 0400 	mov.w	r4, #0
 8003de0:	f04f 0500 	mov.w	r5, #0
 8003de4:	00dd      	lsls	r5, r3, #3
 8003de6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dea:	00d4      	lsls	r4, r2, #3
 8003dec:	4622      	mov	r2, r4
 8003dee:	462b      	mov	r3, r5
 8003df0:	1814      	adds	r4, r2, r0
 8003df2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003df4:	414b      	adcs	r3, r1
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e10:	0082      	lsls	r2, r0, #2
 8003e12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e16:	f7fc f9fd 	bl	8000214 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <UART_SetConfig+0x38c>)
 8003e20:	fba3 1302 	umull	r1, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	2164      	movs	r1, #100	; 0x64
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	3332      	adds	r3, #50	; 0x32
 8003e32:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <UART_SetConfig+0x38c>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3e:	441e      	add	r6, r3
 8003e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e42:	4618      	mov	r0, r3
 8003e44:	f04f 0100 	mov.w	r1, #0
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	1894      	adds	r4, r2, r2
 8003e4e:	603c      	str	r4, [r7, #0]
 8003e50:	415b      	adcs	r3, r3
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e58:	1812      	adds	r2, r2, r0
 8003e5a:	eb41 0303 	adc.w	r3, r1, r3
 8003e5e:	f04f 0400 	mov.w	r4, #0
 8003e62:	f04f 0500 	mov.w	r5, #0
 8003e66:	00dd      	lsls	r5, r3, #3
 8003e68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e6c:	00d4      	lsls	r4, r2, #3
 8003e6e:	4622      	mov	r2, r4
 8003e70:	462b      	mov	r3, r5
 8003e72:	eb12 0a00 	adds.w	sl, r2, r0
 8003e76:	eb43 0b01 	adc.w	fp, r3, r1
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	008b      	lsls	r3, r1, #2
 8003e8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e92:	0082      	lsls	r2, r0, #2
 8003e94:	4650      	mov	r0, sl
 8003e96:	4659      	mov	r1, fp
 8003e98:	f7fc f9bc 	bl	8000214 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <UART_SetConfig+0x38c>)
 8003ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2164      	movs	r1, #100	; 0x64
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	; 0x32
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <UART_SetConfig+0x38c>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4432      	add	r2, r6
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	377c      	adds	r7, #124	; 0x7c
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40011000 	.word	0x40011000
 8003ed8:	40011400 	.word	0x40011400
 8003edc:	51eb851f 	.word	0x51eb851f

08003ee0 <__errno>:
 8003ee0:	4b01      	ldr	r3, [pc, #4]	; (8003ee8 <__errno+0x8>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	200000e4 	.word	0x200000e4

08003eec <__libc_init_array>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4d0d      	ldr	r5, [pc, #52]	; (8003f24 <__libc_init_array+0x38>)
 8003ef0:	4c0d      	ldr	r4, [pc, #52]	; (8003f28 <__libc_init_array+0x3c>)
 8003ef2:	1b64      	subs	r4, r4, r5
 8003ef4:	10a4      	asrs	r4, r4, #2
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	42a6      	cmp	r6, r4
 8003efa:	d109      	bne.n	8003f10 <__libc_init_array+0x24>
 8003efc:	4d0b      	ldr	r5, [pc, #44]	; (8003f2c <__libc_init_array+0x40>)
 8003efe:	4c0c      	ldr	r4, [pc, #48]	; (8003f30 <__libc_init_array+0x44>)
 8003f00:	f000 fce6 	bl	80048d0 <_init>
 8003f04:	1b64      	subs	r4, r4, r5
 8003f06:	10a4      	asrs	r4, r4, #2
 8003f08:	2600      	movs	r6, #0
 8003f0a:	42a6      	cmp	r6, r4
 8003f0c:	d105      	bne.n	8003f1a <__libc_init_array+0x2e>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f14:	4798      	blx	r3
 8003f16:	3601      	adds	r6, #1
 8003f18:	e7ee      	b.n	8003ef8 <__libc_init_array+0xc>
 8003f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1e:	4798      	blx	r3
 8003f20:	3601      	adds	r6, #1
 8003f22:	e7f2      	b.n	8003f0a <__libc_init_array+0x1e>
 8003f24:	08004994 	.word	0x08004994
 8003f28:	08004994 	.word	0x08004994
 8003f2c:	08004994 	.word	0x08004994
 8003f30:	08004998 	.word	0x08004998

08003f34 <memset>:
 8003f34:	4402      	add	r2, r0
 8003f36:	4603      	mov	r3, r0
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <memset+0xa>
 8003f3c:	4770      	bx	lr
 8003f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f42:	e7f9      	b.n	8003f38 <memset+0x4>

08003f44 <_puts_r>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	460e      	mov	r6, r1
 8003f48:	4605      	mov	r5, r0
 8003f4a:	b118      	cbz	r0, 8003f54 <_puts_r+0x10>
 8003f4c:	6983      	ldr	r3, [r0, #24]
 8003f4e:	b90b      	cbnz	r3, 8003f54 <_puts_r+0x10>
 8003f50:	f000 fa48 	bl	80043e4 <__sinit>
 8003f54:	69ab      	ldr	r3, [r5, #24]
 8003f56:	68ac      	ldr	r4, [r5, #8]
 8003f58:	b913      	cbnz	r3, 8003f60 <_puts_r+0x1c>
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 fa42 	bl	80043e4 <__sinit>
 8003f60:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <_puts_r+0xd0>)
 8003f62:	429c      	cmp	r4, r3
 8003f64:	d120      	bne.n	8003fa8 <_puts_r+0x64>
 8003f66:	686c      	ldr	r4, [r5, #4]
 8003f68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f6a:	07db      	lsls	r3, r3, #31
 8003f6c:	d405      	bmi.n	8003f7a <_puts_r+0x36>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	0598      	lsls	r0, r3, #22
 8003f72:	d402      	bmi.n	8003f7a <_puts_r+0x36>
 8003f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f76:	f000 fad3 	bl	8004520 <__retarget_lock_acquire_recursive>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	0719      	lsls	r1, r3, #28
 8003f7e:	d51d      	bpl.n	8003fbc <_puts_r+0x78>
 8003f80:	6923      	ldr	r3, [r4, #16]
 8003f82:	b1db      	cbz	r3, 8003fbc <_puts_r+0x78>
 8003f84:	3e01      	subs	r6, #1
 8003f86:	68a3      	ldr	r3, [r4, #8]
 8003f88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	60a3      	str	r3, [r4, #8]
 8003f90:	bb39      	cbnz	r1, 8003fe2 <_puts_r+0x9e>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da38      	bge.n	8004008 <_puts_r+0xc4>
 8003f96:	4622      	mov	r2, r4
 8003f98:	210a      	movs	r1, #10
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 f848 	bl	8004030 <__swbuf_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d011      	beq.n	8003fc8 <_puts_r+0x84>
 8003fa4:	250a      	movs	r5, #10
 8003fa6:	e011      	b.n	8003fcc <_puts_r+0x88>
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <_puts_r+0xd4>)
 8003faa:	429c      	cmp	r4, r3
 8003fac:	d101      	bne.n	8003fb2 <_puts_r+0x6e>
 8003fae:	68ac      	ldr	r4, [r5, #8]
 8003fb0:	e7da      	b.n	8003f68 <_puts_r+0x24>
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <_puts_r+0xd8>)
 8003fb4:	429c      	cmp	r4, r3
 8003fb6:	bf08      	it	eq
 8003fb8:	68ec      	ldreq	r4, [r5, #12]
 8003fba:	e7d5      	b.n	8003f68 <_puts_r+0x24>
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f888 	bl	80040d4 <__swsetup_r>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d0dd      	beq.n	8003f84 <_puts_r+0x40>
 8003fc8:	f04f 35ff 	mov.w	r5, #4294967295
 8003fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fce:	07da      	lsls	r2, r3, #31
 8003fd0:	d405      	bmi.n	8003fde <_puts_r+0x9a>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	059b      	lsls	r3, r3, #22
 8003fd6:	d402      	bmi.n	8003fde <_puts_r+0x9a>
 8003fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fda:	f000 faa2 	bl	8004522 <__retarget_lock_release_recursive>
 8003fde:	4628      	mov	r0, r5
 8003fe0:	bd70      	pop	{r4, r5, r6, pc}
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da04      	bge.n	8003ff0 <_puts_r+0xac>
 8003fe6:	69a2      	ldr	r2, [r4, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	dc06      	bgt.n	8003ffa <_puts_r+0xb6>
 8003fec:	290a      	cmp	r1, #10
 8003fee:	d004      	beq.n	8003ffa <_puts_r+0xb6>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	6022      	str	r2, [r4, #0]
 8003ff6:	7019      	strb	r1, [r3, #0]
 8003ff8:	e7c5      	b.n	8003f86 <_puts_r+0x42>
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f000 f817 	bl	8004030 <__swbuf_r>
 8004002:	3001      	adds	r0, #1
 8004004:	d1bf      	bne.n	8003f86 <_puts_r+0x42>
 8004006:	e7df      	b.n	8003fc8 <_puts_r+0x84>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	250a      	movs	r5, #10
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	701d      	strb	r5, [r3, #0]
 8004012:	e7db      	b.n	8003fcc <_puts_r+0x88>
 8004014:	0800494c 	.word	0x0800494c
 8004018:	0800496c 	.word	0x0800496c
 800401c:	0800492c 	.word	0x0800492c

08004020 <puts>:
 8004020:	4b02      	ldr	r3, [pc, #8]	; (800402c <puts+0xc>)
 8004022:	4601      	mov	r1, r0
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	f7ff bf8d 	b.w	8003f44 <_puts_r>
 800402a:	bf00      	nop
 800402c:	200000e4 	.word	0x200000e4

08004030 <__swbuf_r>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	460e      	mov	r6, r1
 8004034:	4614      	mov	r4, r2
 8004036:	4605      	mov	r5, r0
 8004038:	b118      	cbz	r0, 8004042 <__swbuf_r+0x12>
 800403a:	6983      	ldr	r3, [r0, #24]
 800403c:	b90b      	cbnz	r3, 8004042 <__swbuf_r+0x12>
 800403e:	f000 f9d1 	bl	80043e4 <__sinit>
 8004042:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <__swbuf_r+0x98>)
 8004044:	429c      	cmp	r4, r3
 8004046:	d12b      	bne.n	80040a0 <__swbuf_r+0x70>
 8004048:	686c      	ldr	r4, [r5, #4]
 800404a:	69a3      	ldr	r3, [r4, #24]
 800404c:	60a3      	str	r3, [r4, #8]
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	071a      	lsls	r2, r3, #28
 8004052:	d52f      	bpl.n	80040b4 <__swbuf_r+0x84>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	b36b      	cbz	r3, 80040b4 <__swbuf_r+0x84>
 8004058:	6923      	ldr	r3, [r4, #16]
 800405a:	6820      	ldr	r0, [r4, #0]
 800405c:	1ac0      	subs	r0, r0, r3
 800405e:	6963      	ldr	r3, [r4, #20]
 8004060:	b2f6      	uxtb	r6, r6
 8004062:	4283      	cmp	r3, r0
 8004064:	4637      	mov	r7, r6
 8004066:	dc04      	bgt.n	8004072 <__swbuf_r+0x42>
 8004068:	4621      	mov	r1, r4
 800406a:	4628      	mov	r0, r5
 800406c:	f000 f926 	bl	80042bc <_fflush_r>
 8004070:	bb30      	cbnz	r0, 80040c0 <__swbuf_r+0x90>
 8004072:	68a3      	ldr	r3, [r4, #8]
 8004074:	3b01      	subs	r3, #1
 8004076:	60a3      	str	r3, [r4, #8]
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	6022      	str	r2, [r4, #0]
 800407e:	701e      	strb	r6, [r3, #0]
 8004080:	6963      	ldr	r3, [r4, #20]
 8004082:	3001      	adds	r0, #1
 8004084:	4283      	cmp	r3, r0
 8004086:	d004      	beq.n	8004092 <__swbuf_r+0x62>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	07db      	lsls	r3, r3, #31
 800408c:	d506      	bpl.n	800409c <__swbuf_r+0x6c>
 800408e:	2e0a      	cmp	r6, #10
 8004090:	d104      	bne.n	800409c <__swbuf_r+0x6c>
 8004092:	4621      	mov	r1, r4
 8004094:	4628      	mov	r0, r5
 8004096:	f000 f911 	bl	80042bc <_fflush_r>
 800409a:	b988      	cbnz	r0, 80040c0 <__swbuf_r+0x90>
 800409c:	4638      	mov	r0, r7
 800409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <__swbuf_r+0x9c>)
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d101      	bne.n	80040aa <__swbuf_r+0x7a>
 80040a6:	68ac      	ldr	r4, [r5, #8]
 80040a8:	e7cf      	b.n	800404a <__swbuf_r+0x1a>
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <__swbuf_r+0xa0>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	bf08      	it	eq
 80040b0:	68ec      	ldreq	r4, [r5, #12]
 80040b2:	e7ca      	b.n	800404a <__swbuf_r+0x1a>
 80040b4:	4621      	mov	r1, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f80c 	bl	80040d4 <__swsetup_r>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d0cb      	beq.n	8004058 <__swbuf_r+0x28>
 80040c0:	f04f 37ff 	mov.w	r7, #4294967295
 80040c4:	e7ea      	b.n	800409c <__swbuf_r+0x6c>
 80040c6:	bf00      	nop
 80040c8:	0800494c 	.word	0x0800494c
 80040cc:	0800496c 	.word	0x0800496c
 80040d0:	0800492c 	.word	0x0800492c

080040d4 <__swsetup_r>:
 80040d4:	4b32      	ldr	r3, [pc, #200]	; (80041a0 <__swsetup_r+0xcc>)
 80040d6:	b570      	push	{r4, r5, r6, lr}
 80040d8:	681d      	ldr	r5, [r3, #0]
 80040da:	4606      	mov	r6, r0
 80040dc:	460c      	mov	r4, r1
 80040de:	b125      	cbz	r5, 80040ea <__swsetup_r+0x16>
 80040e0:	69ab      	ldr	r3, [r5, #24]
 80040e2:	b913      	cbnz	r3, 80040ea <__swsetup_r+0x16>
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f97d 	bl	80043e4 <__sinit>
 80040ea:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <__swsetup_r+0xd0>)
 80040ec:	429c      	cmp	r4, r3
 80040ee:	d10f      	bne.n	8004110 <__swsetup_r+0x3c>
 80040f0:	686c      	ldr	r4, [r5, #4]
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040f8:	0719      	lsls	r1, r3, #28
 80040fa:	d42c      	bmi.n	8004156 <__swsetup_r+0x82>
 80040fc:	06dd      	lsls	r5, r3, #27
 80040fe:	d411      	bmi.n	8004124 <__swsetup_r+0x50>
 8004100:	2309      	movs	r3, #9
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004108:	81a3      	strh	r3, [r4, #12]
 800410a:	f04f 30ff 	mov.w	r0, #4294967295
 800410e:	e03e      	b.n	800418e <__swsetup_r+0xba>
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <__swsetup_r+0xd4>)
 8004112:	429c      	cmp	r4, r3
 8004114:	d101      	bne.n	800411a <__swsetup_r+0x46>
 8004116:	68ac      	ldr	r4, [r5, #8]
 8004118:	e7eb      	b.n	80040f2 <__swsetup_r+0x1e>
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <__swsetup_r+0xd8>)
 800411c:	429c      	cmp	r4, r3
 800411e:	bf08      	it	eq
 8004120:	68ec      	ldreq	r4, [r5, #12]
 8004122:	e7e6      	b.n	80040f2 <__swsetup_r+0x1e>
 8004124:	0758      	lsls	r0, r3, #29
 8004126:	d512      	bpl.n	800414e <__swsetup_r+0x7a>
 8004128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800412a:	b141      	cbz	r1, 800413e <__swsetup_r+0x6a>
 800412c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004130:	4299      	cmp	r1, r3
 8004132:	d002      	beq.n	800413a <__swsetup_r+0x66>
 8004134:	4630      	mov	r0, r6
 8004136:	f000 fa59 	bl	80045ec <_free_r>
 800413a:	2300      	movs	r3, #0
 800413c:	6363      	str	r3, [r4, #52]	; 0x34
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004144:	81a3      	strh	r3, [r4, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	6063      	str	r3, [r4, #4]
 800414a:	6923      	ldr	r3, [r4, #16]
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	81a3      	strh	r3, [r4, #12]
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	b94b      	cbnz	r3, 800416e <__swsetup_r+0x9a>
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d003      	beq.n	800416e <__swsetup_r+0x9a>
 8004166:	4621      	mov	r1, r4
 8004168:	4630      	mov	r0, r6
 800416a:	f000 f9ff 	bl	800456c <__smakebuf_r>
 800416e:	89a0      	ldrh	r0, [r4, #12]
 8004170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004174:	f010 0301 	ands.w	r3, r0, #1
 8004178:	d00a      	beq.n	8004190 <__swsetup_r+0xbc>
 800417a:	2300      	movs	r3, #0
 800417c:	60a3      	str	r3, [r4, #8]
 800417e:	6963      	ldr	r3, [r4, #20]
 8004180:	425b      	negs	r3, r3
 8004182:	61a3      	str	r3, [r4, #24]
 8004184:	6923      	ldr	r3, [r4, #16]
 8004186:	b943      	cbnz	r3, 800419a <__swsetup_r+0xc6>
 8004188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800418c:	d1ba      	bne.n	8004104 <__swsetup_r+0x30>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	0781      	lsls	r1, r0, #30
 8004192:	bf58      	it	pl
 8004194:	6963      	ldrpl	r3, [r4, #20]
 8004196:	60a3      	str	r3, [r4, #8]
 8004198:	e7f4      	b.n	8004184 <__swsetup_r+0xb0>
 800419a:	2000      	movs	r0, #0
 800419c:	e7f7      	b.n	800418e <__swsetup_r+0xba>
 800419e:	bf00      	nop
 80041a0:	200000e4 	.word	0x200000e4
 80041a4:	0800494c 	.word	0x0800494c
 80041a8:	0800496c 	.word	0x0800496c
 80041ac:	0800492c 	.word	0x0800492c

080041b0 <__sflush_r>:
 80041b0:	898a      	ldrh	r2, [r1, #12]
 80041b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	4605      	mov	r5, r0
 80041b8:	0710      	lsls	r0, r2, #28
 80041ba:	460c      	mov	r4, r1
 80041bc:	d458      	bmi.n	8004270 <__sflush_r+0xc0>
 80041be:	684b      	ldr	r3, [r1, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dc05      	bgt.n	80041d0 <__sflush_r+0x20>
 80041c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	dc02      	bgt.n	80041d0 <__sflush_r+0x20>
 80041ca:	2000      	movs	r0, #0
 80041cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d0f9      	beq.n	80041ca <__sflush_r+0x1a>
 80041d6:	2300      	movs	r3, #0
 80041d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041dc:	682f      	ldr	r7, [r5, #0]
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	d032      	beq.n	8004248 <__sflush_r+0x98>
 80041e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	075a      	lsls	r2, r3, #29
 80041e8:	d505      	bpl.n	80041f6 <__sflush_r+0x46>
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	1ac0      	subs	r0, r0, r3
 80041ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041f0:	b10b      	cbz	r3, 80041f6 <__sflush_r+0x46>
 80041f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041f4:	1ac0      	subs	r0, r0, r3
 80041f6:	2300      	movs	r3, #0
 80041f8:	4602      	mov	r2, r0
 80041fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041fc:	6a21      	ldr	r1, [r4, #32]
 80041fe:	4628      	mov	r0, r5
 8004200:	47b0      	blx	r6
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	d106      	bne.n	8004216 <__sflush_r+0x66>
 8004208:	6829      	ldr	r1, [r5, #0]
 800420a:	291d      	cmp	r1, #29
 800420c:	d82c      	bhi.n	8004268 <__sflush_r+0xb8>
 800420e:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <__sflush_r+0x108>)
 8004210:	40ca      	lsrs	r2, r1
 8004212:	07d6      	lsls	r6, r2, #31
 8004214:	d528      	bpl.n	8004268 <__sflush_r+0xb8>
 8004216:	2200      	movs	r2, #0
 8004218:	6062      	str	r2, [r4, #4]
 800421a:	04d9      	lsls	r1, r3, #19
 800421c:	6922      	ldr	r2, [r4, #16]
 800421e:	6022      	str	r2, [r4, #0]
 8004220:	d504      	bpl.n	800422c <__sflush_r+0x7c>
 8004222:	1c42      	adds	r2, r0, #1
 8004224:	d101      	bne.n	800422a <__sflush_r+0x7a>
 8004226:	682b      	ldr	r3, [r5, #0]
 8004228:	b903      	cbnz	r3, 800422c <__sflush_r+0x7c>
 800422a:	6560      	str	r0, [r4, #84]	; 0x54
 800422c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800422e:	602f      	str	r7, [r5, #0]
 8004230:	2900      	cmp	r1, #0
 8004232:	d0ca      	beq.n	80041ca <__sflush_r+0x1a>
 8004234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004238:	4299      	cmp	r1, r3
 800423a:	d002      	beq.n	8004242 <__sflush_r+0x92>
 800423c:	4628      	mov	r0, r5
 800423e:	f000 f9d5 	bl	80045ec <_free_r>
 8004242:	2000      	movs	r0, #0
 8004244:	6360      	str	r0, [r4, #52]	; 0x34
 8004246:	e7c1      	b.n	80041cc <__sflush_r+0x1c>
 8004248:	6a21      	ldr	r1, [r4, #32]
 800424a:	2301      	movs	r3, #1
 800424c:	4628      	mov	r0, r5
 800424e:	47b0      	blx	r6
 8004250:	1c41      	adds	r1, r0, #1
 8004252:	d1c7      	bne.n	80041e4 <__sflush_r+0x34>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0c4      	beq.n	80041e4 <__sflush_r+0x34>
 800425a:	2b1d      	cmp	r3, #29
 800425c:	d001      	beq.n	8004262 <__sflush_r+0xb2>
 800425e:	2b16      	cmp	r3, #22
 8004260:	d101      	bne.n	8004266 <__sflush_r+0xb6>
 8004262:	602f      	str	r7, [r5, #0]
 8004264:	e7b1      	b.n	80041ca <__sflush_r+0x1a>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	e7ad      	b.n	80041cc <__sflush_r+0x1c>
 8004270:	690f      	ldr	r7, [r1, #16]
 8004272:	2f00      	cmp	r7, #0
 8004274:	d0a9      	beq.n	80041ca <__sflush_r+0x1a>
 8004276:	0793      	lsls	r3, r2, #30
 8004278:	680e      	ldr	r6, [r1, #0]
 800427a:	bf08      	it	eq
 800427c:	694b      	ldreq	r3, [r1, #20]
 800427e:	600f      	str	r7, [r1, #0]
 8004280:	bf18      	it	ne
 8004282:	2300      	movne	r3, #0
 8004284:	eba6 0807 	sub.w	r8, r6, r7
 8004288:	608b      	str	r3, [r1, #8]
 800428a:	f1b8 0f00 	cmp.w	r8, #0
 800428e:	dd9c      	ble.n	80041ca <__sflush_r+0x1a>
 8004290:	6a21      	ldr	r1, [r4, #32]
 8004292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004294:	4643      	mov	r3, r8
 8004296:	463a      	mov	r2, r7
 8004298:	4628      	mov	r0, r5
 800429a:	47b0      	blx	r6
 800429c:	2800      	cmp	r0, #0
 800429e:	dc06      	bgt.n	80042ae <__sflush_r+0xfe>
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	e78e      	b.n	80041cc <__sflush_r+0x1c>
 80042ae:	4407      	add	r7, r0
 80042b0:	eba8 0800 	sub.w	r8, r8, r0
 80042b4:	e7e9      	b.n	800428a <__sflush_r+0xda>
 80042b6:	bf00      	nop
 80042b8:	20400001 	.word	0x20400001

080042bc <_fflush_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	690b      	ldr	r3, [r1, #16]
 80042c0:	4605      	mov	r5, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	b913      	cbnz	r3, 80042cc <_fflush_r+0x10>
 80042c6:	2500      	movs	r5, #0
 80042c8:	4628      	mov	r0, r5
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	b118      	cbz	r0, 80042d6 <_fflush_r+0x1a>
 80042ce:	6983      	ldr	r3, [r0, #24]
 80042d0:	b90b      	cbnz	r3, 80042d6 <_fflush_r+0x1a>
 80042d2:	f000 f887 	bl	80043e4 <__sinit>
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <_fflush_r+0x6c>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d11b      	bne.n	8004314 <_fflush_r+0x58>
 80042dc:	686c      	ldr	r4, [r5, #4]
 80042de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ef      	beq.n	80042c6 <_fflush_r+0xa>
 80042e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042e8:	07d0      	lsls	r0, r2, #31
 80042ea:	d404      	bmi.n	80042f6 <_fflush_r+0x3a>
 80042ec:	0599      	lsls	r1, r3, #22
 80042ee:	d402      	bmi.n	80042f6 <_fflush_r+0x3a>
 80042f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f2:	f000 f915 	bl	8004520 <__retarget_lock_acquire_recursive>
 80042f6:	4628      	mov	r0, r5
 80042f8:	4621      	mov	r1, r4
 80042fa:	f7ff ff59 	bl	80041b0 <__sflush_r>
 80042fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004300:	07da      	lsls	r2, r3, #31
 8004302:	4605      	mov	r5, r0
 8004304:	d4e0      	bmi.n	80042c8 <_fflush_r+0xc>
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	059b      	lsls	r3, r3, #22
 800430a:	d4dd      	bmi.n	80042c8 <_fflush_r+0xc>
 800430c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800430e:	f000 f908 	bl	8004522 <__retarget_lock_release_recursive>
 8004312:	e7d9      	b.n	80042c8 <_fflush_r+0xc>
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <_fflush_r+0x70>)
 8004316:	429c      	cmp	r4, r3
 8004318:	d101      	bne.n	800431e <_fflush_r+0x62>
 800431a:	68ac      	ldr	r4, [r5, #8]
 800431c:	e7df      	b.n	80042de <_fflush_r+0x22>
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <_fflush_r+0x74>)
 8004320:	429c      	cmp	r4, r3
 8004322:	bf08      	it	eq
 8004324:	68ec      	ldreq	r4, [r5, #12]
 8004326:	e7da      	b.n	80042de <_fflush_r+0x22>
 8004328:	0800494c 	.word	0x0800494c
 800432c:	0800496c 	.word	0x0800496c
 8004330:	0800492c 	.word	0x0800492c

08004334 <std>:
 8004334:	2300      	movs	r3, #0
 8004336:	b510      	push	{r4, lr}
 8004338:	4604      	mov	r4, r0
 800433a:	e9c0 3300 	strd	r3, r3, [r0]
 800433e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004342:	6083      	str	r3, [r0, #8]
 8004344:	8181      	strh	r1, [r0, #12]
 8004346:	6643      	str	r3, [r0, #100]	; 0x64
 8004348:	81c2      	strh	r2, [r0, #14]
 800434a:	6183      	str	r3, [r0, #24]
 800434c:	4619      	mov	r1, r3
 800434e:	2208      	movs	r2, #8
 8004350:	305c      	adds	r0, #92	; 0x5c
 8004352:	f7ff fdef 	bl	8003f34 <memset>
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <std+0x38>)
 8004358:	6263      	str	r3, [r4, #36]	; 0x24
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <std+0x3c>)
 800435c:	62a3      	str	r3, [r4, #40]	; 0x28
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <std+0x40>)
 8004360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <std+0x44>)
 8004364:	6224      	str	r4, [r4, #32]
 8004366:	6323      	str	r3, [r4, #48]	; 0x30
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	08004761 	.word	0x08004761
 8004370:	08004783 	.word	0x08004783
 8004374:	080047bb 	.word	0x080047bb
 8004378:	080047df 	.word	0x080047df

0800437c <_cleanup_r>:
 800437c:	4901      	ldr	r1, [pc, #4]	; (8004384 <_cleanup_r+0x8>)
 800437e:	f000 b8af 	b.w	80044e0 <_fwalk_reent>
 8004382:	bf00      	nop
 8004384:	080042bd 	.word	0x080042bd

08004388 <__sfmoreglue>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	1e4a      	subs	r2, r1, #1
 800438c:	2568      	movs	r5, #104	; 0x68
 800438e:	4355      	muls	r5, r2
 8004390:	460e      	mov	r6, r1
 8004392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004396:	f000 f979 	bl	800468c <_malloc_r>
 800439a:	4604      	mov	r4, r0
 800439c:	b140      	cbz	r0, 80043b0 <__sfmoreglue+0x28>
 800439e:	2100      	movs	r1, #0
 80043a0:	e9c0 1600 	strd	r1, r6, [r0]
 80043a4:	300c      	adds	r0, #12
 80043a6:	60a0      	str	r0, [r4, #8]
 80043a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043ac:	f7ff fdc2 	bl	8003f34 <memset>
 80043b0:	4620      	mov	r0, r4
 80043b2:	bd70      	pop	{r4, r5, r6, pc}

080043b4 <__sfp_lock_acquire>:
 80043b4:	4801      	ldr	r0, [pc, #4]	; (80043bc <__sfp_lock_acquire+0x8>)
 80043b6:	f000 b8b3 	b.w	8004520 <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	200015dc 	.word	0x200015dc

080043c0 <__sfp_lock_release>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__sfp_lock_release+0x8>)
 80043c2:	f000 b8ae 	b.w	8004522 <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	200015dc 	.word	0x200015dc

080043cc <__sinit_lock_acquire>:
 80043cc:	4801      	ldr	r0, [pc, #4]	; (80043d4 <__sinit_lock_acquire+0x8>)
 80043ce:	f000 b8a7 	b.w	8004520 <__retarget_lock_acquire_recursive>
 80043d2:	bf00      	nop
 80043d4:	200015d7 	.word	0x200015d7

080043d8 <__sinit_lock_release>:
 80043d8:	4801      	ldr	r0, [pc, #4]	; (80043e0 <__sinit_lock_release+0x8>)
 80043da:	f000 b8a2 	b.w	8004522 <__retarget_lock_release_recursive>
 80043de:	bf00      	nop
 80043e0:	200015d7 	.word	0x200015d7

080043e4 <__sinit>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
 80043e8:	f7ff fff0 	bl	80043cc <__sinit_lock_acquire>
 80043ec:	69a3      	ldr	r3, [r4, #24]
 80043ee:	b11b      	cbz	r3, 80043f8 <__sinit+0x14>
 80043f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f4:	f7ff bff0 	b.w	80043d8 <__sinit_lock_release>
 80043f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043fc:	6523      	str	r3, [r4, #80]	; 0x50
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <__sinit+0x68>)
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <__sinit+0x6c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	62a2      	str	r2, [r4, #40]	; 0x28
 8004406:	42a3      	cmp	r3, r4
 8004408:	bf04      	itt	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	61a3      	streq	r3, [r4, #24]
 800440e:	4620      	mov	r0, r4
 8004410:	f000 f820 	bl	8004454 <__sfp>
 8004414:	6060      	str	r0, [r4, #4]
 8004416:	4620      	mov	r0, r4
 8004418:	f000 f81c 	bl	8004454 <__sfp>
 800441c:	60a0      	str	r0, [r4, #8]
 800441e:	4620      	mov	r0, r4
 8004420:	f000 f818 	bl	8004454 <__sfp>
 8004424:	2200      	movs	r2, #0
 8004426:	60e0      	str	r0, [r4, #12]
 8004428:	2104      	movs	r1, #4
 800442a:	6860      	ldr	r0, [r4, #4]
 800442c:	f7ff ff82 	bl	8004334 <std>
 8004430:	68a0      	ldr	r0, [r4, #8]
 8004432:	2201      	movs	r2, #1
 8004434:	2109      	movs	r1, #9
 8004436:	f7ff ff7d 	bl	8004334 <std>
 800443a:	68e0      	ldr	r0, [r4, #12]
 800443c:	2202      	movs	r2, #2
 800443e:	2112      	movs	r1, #18
 8004440:	f7ff ff78 	bl	8004334 <std>
 8004444:	2301      	movs	r3, #1
 8004446:	61a3      	str	r3, [r4, #24]
 8004448:	e7d2      	b.n	80043f0 <__sinit+0xc>
 800444a:	bf00      	nop
 800444c:	08004928 	.word	0x08004928
 8004450:	0800437d 	.word	0x0800437d

08004454 <__sfp>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	4607      	mov	r7, r0
 8004458:	f7ff ffac 	bl	80043b4 <__sfp_lock_acquire>
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <__sfp+0x84>)
 800445e:	681e      	ldr	r6, [r3, #0]
 8004460:	69b3      	ldr	r3, [r6, #24]
 8004462:	b913      	cbnz	r3, 800446a <__sfp+0x16>
 8004464:	4630      	mov	r0, r6
 8004466:	f7ff ffbd 	bl	80043e4 <__sinit>
 800446a:	3648      	adds	r6, #72	; 0x48
 800446c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004470:	3b01      	subs	r3, #1
 8004472:	d503      	bpl.n	800447c <__sfp+0x28>
 8004474:	6833      	ldr	r3, [r6, #0]
 8004476:	b30b      	cbz	r3, 80044bc <__sfp+0x68>
 8004478:	6836      	ldr	r6, [r6, #0]
 800447a:	e7f7      	b.n	800446c <__sfp+0x18>
 800447c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004480:	b9d5      	cbnz	r5, 80044b8 <__sfp+0x64>
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <__sfp+0x88>)
 8004484:	60e3      	str	r3, [r4, #12]
 8004486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800448a:	6665      	str	r5, [r4, #100]	; 0x64
 800448c:	f000 f847 	bl	800451e <__retarget_lock_init_recursive>
 8004490:	f7ff ff96 	bl	80043c0 <__sfp_lock_release>
 8004494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800449c:	6025      	str	r5, [r4, #0]
 800449e:	61a5      	str	r5, [r4, #24]
 80044a0:	2208      	movs	r2, #8
 80044a2:	4629      	mov	r1, r5
 80044a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044a8:	f7ff fd44 	bl	8003f34 <memset>
 80044ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044b4:	4620      	mov	r0, r4
 80044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b8:	3468      	adds	r4, #104	; 0x68
 80044ba:	e7d9      	b.n	8004470 <__sfp+0x1c>
 80044bc:	2104      	movs	r1, #4
 80044be:	4638      	mov	r0, r7
 80044c0:	f7ff ff62 	bl	8004388 <__sfmoreglue>
 80044c4:	4604      	mov	r4, r0
 80044c6:	6030      	str	r0, [r6, #0]
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d1d5      	bne.n	8004478 <__sfp+0x24>
 80044cc:	f7ff ff78 	bl	80043c0 <__sfp_lock_release>
 80044d0:	230c      	movs	r3, #12
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	e7ee      	b.n	80044b4 <__sfp+0x60>
 80044d6:	bf00      	nop
 80044d8:	08004928 	.word	0x08004928
 80044dc:	ffff0001 	.word	0xffff0001

080044e0 <_fwalk_reent>:
 80044e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e4:	4606      	mov	r6, r0
 80044e6:	4688      	mov	r8, r1
 80044e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044ec:	2700      	movs	r7, #0
 80044ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044f2:	f1b9 0901 	subs.w	r9, r9, #1
 80044f6:	d505      	bpl.n	8004504 <_fwalk_reent+0x24>
 80044f8:	6824      	ldr	r4, [r4, #0]
 80044fa:	2c00      	cmp	r4, #0
 80044fc:	d1f7      	bne.n	80044ee <_fwalk_reent+0xe>
 80044fe:	4638      	mov	r0, r7
 8004500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004504:	89ab      	ldrh	r3, [r5, #12]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d907      	bls.n	800451a <_fwalk_reent+0x3a>
 800450a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800450e:	3301      	adds	r3, #1
 8004510:	d003      	beq.n	800451a <_fwalk_reent+0x3a>
 8004512:	4629      	mov	r1, r5
 8004514:	4630      	mov	r0, r6
 8004516:	47c0      	blx	r8
 8004518:	4307      	orrs	r7, r0
 800451a:	3568      	adds	r5, #104	; 0x68
 800451c:	e7e9      	b.n	80044f2 <_fwalk_reent+0x12>

0800451e <__retarget_lock_init_recursive>:
 800451e:	4770      	bx	lr

08004520 <__retarget_lock_acquire_recursive>:
 8004520:	4770      	bx	lr

08004522 <__retarget_lock_release_recursive>:
 8004522:	4770      	bx	lr

08004524 <__swhatbuf_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	460e      	mov	r6, r1
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	2900      	cmp	r1, #0
 800452e:	b096      	sub	sp, #88	; 0x58
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
 8004534:	da07      	bge.n	8004546 <__swhatbuf_r+0x22>
 8004536:	2300      	movs	r3, #0
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	89b3      	ldrh	r3, [r6, #12]
 800453c:	061a      	lsls	r2, r3, #24
 800453e:	d410      	bmi.n	8004562 <__swhatbuf_r+0x3e>
 8004540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004544:	e00e      	b.n	8004564 <__swhatbuf_r+0x40>
 8004546:	466a      	mov	r2, sp
 8004548:	f000 f970 	bl	800482c <_fstat_r>
 800454c:	2800      	cmp	r0, #0
 800454e:	dbf2      	blt.n	8004536 <__swhatbuf_r+0x12>
 8004550:	9a01      	ldr	r2, [sp, #4]
 8004552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800455a:	425a      	negs	r2, r3
 800455c:	415a      	adcs	r2, r3
 800455e:	602a      	str	r2, [r5, #0]
 8004560:	e7ee      	b.n	8004540 <__swhatbuf_r+0x1c>
 8004562:	2340      	movs	r3, #64	; 0x40
 8004564:	2000      	movs	r0, #0
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	b016      	add	sp, #88	; 0x58
 800456a:	bd70      	pop	{r4, r5, r6, pc}

0800456c <__smakebuf_r>:
 800456c:	898b      	ldrh	r3, [r1, #12]
 800456e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004570:	079d      	lsls	r5, r3, #30
 8004572:	4606      	mov	r6, r0
 8004574:	460c      	mov	r4, r1
 8004576:	d507      	bpl.n	8004588 <__smakebuf_r+0x1c>
 8004578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	6123      	str	r3, [r4, #16]
 8004580:	2301      	movs	r3, #1
 8004582:	6163      	str	r3, [r4, #20]
 8004584:	b002      	add	sp, #8
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	ab01      	add	r3, sp, #4
 800458a:	466a      	mov	r2, sp
 800458c:	f7ff ffca 	bl	8004524 <__swhatbuf_r>
 8004590:	9900      	ldr	r1, [sp, #0]
 8004592:	4605      	mov	r5, r0
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f879 	bl	800468c <_malloc_r>
 800459a:	b948      	cbnz	r0, 80045b0 <__smakebuf_r+0x44>
 800459c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a0:	059a      	lsls	r2, r3, #22
 80045a2:	d4ef      	bmi.n	8004584 <__smakebuf_r+0x18>
 80045a4:	f023 0303 	bic.w	r3, r3, #3
 80045a8:	f043 0302 	orr.w	r3, r3, #2
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	e7e3      	b.n	8004578 <__smakebuf_r+0xc>
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <__smakebuf_r+0x7c>)
 80045b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	6020      	str	r0, [r4, #0]
 80045b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045bc:	81a3      	strh	r3, [r4, #12]
 80045be:	9b00      	ldr	r3, [sp, #0]
 80045c0:	6163      	str	r3, [r4, #20]
 80045c2:	9b01      	ldr	r3, [sp, #4]
 80045c4:	6120      	str	r0, [r4, #16]
 80045c6:	b15b      	cbz	r3, 80045e0 <__smakebuf_r+0x74>
 80045c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 f93f 	bl	8004850 <_isatty_r>
 80045d2:	b128      	cbz	r0, 80045e0 <__smakebuf_r+0x74>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	89a0      	ldrh	r0, [r4, #12]
 80045e2:	4305      	orrs	r5, r0
 80045e4:	81a5      	strh	r5, [r4, #12]
 80045e6:	e7cd      	b.n	8004584 <__smakebuf_r+0x18>
 80045e8:	0800437d 	.word	0x0800437d

080045ec <_free_r>:
 80045ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ee:	2900      	cmp	r1, #0
 80045f0:	d048      	beq.n	8004684 <_free_r+0x98>
 80045f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f6:	9001      	str	r0, [sp, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f1a1 0404 	sub.w	r4, r1, #4
 80045fe:	bfb8      	it	lt
 8004600:	18e4      	addlt	r4, r4, r3
 8004602:	f000 f947 	bl	8004894 <__malloc_lock>
 8004606:	4a20      	ldr	r2, [pc, #128]	; (8004688 <_free_r+0x9c>)
 8004608:	9801      	ldr	r0, [sp, #4]
 800460a:	6813      	ldr	r3, [r2, #0]
 800460c:	4615      	mov	r5, r2
 800460e:	b933      	cbnz	r3, 800461e <_free_r+0x32>
 8004610:	6063      	str	r3, [r4, #4]
 8004612:	6014      	str	r4, [r2, #0]
 8004614:	b003      	add	sp, #12
 8004616:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800461a:	f000 b941 	b.w	80048a0 <__malloc_unlock>
 800461e:	42a3      	cmp	r3, r4
 8004620:	d90b      	bls.n	800463a <_free_r+0x4e>
 8004622:	6821      	ldr	r1, [r4, #0]
 8004624:	1862      	adds	r2, r4, r1
 8004626:	4293      	cmp	r3, r2
 8004628:	bf04      	itt	eq
 800462a:	681a      	ldreq	r2, [r3, #0]
 800462c:	685b      	ldreq	r3, [r3, #4]
 800462e:	6063      	str	r3, [r4, #4]
 8004630:	bf04      	itt	eq
 8004632:	1852      	addeq	r2, r2, r1
 8004634:	6022      	streq	r2, [r4, #0]
 8004636:	602c      	str	r4, [r5, #0]
 8004638:	e7ec      	b.n	8004614 <_free_r+0x28>
 800463a:	461a      	mov	r2, r3
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	b10b      	cbz	r3, 8004644 <_free_r+0x58>
 8004640:	42a3      	cmp	r3, r4
 8004642:	d9fa      	bls.n	800463a <_free_r+0x4e>
 8004644:	6811      	ldr	r1, [r2, #0]
 8004646:	1855      	adds	r5, r2, r1
 8004648:	42a5      	cmp	r5, r4
 800464a:	d10b      	bne.n	8004664 <_free_r+0x78>
 800464c:	6824      	ldr	r4, [r4, #0]
 800464e:	4421      	add	r1, r4
 8004650:	1854      	adds	r4, r2, r1
 8004652:	42a3      	cmp	r3, r4
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	d1dd      	bne.n	8004614 <_free_r+0x28>
 8004658:	681c      	ldr	r4, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	6053      	str	r3, [r2, #4]
 800465e:	4421      	add	r1, r4
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	e7d7      	b.n	8004614 <_free_r+0x28>
 8004664:	d902      	bls.n	800466c <_free_r+0x80>
 8004666:	230c      	movs	r3, #12
 8004668:	6003      	str	r3, [r0, #0]
 800466a:	e7d3      	b.n	8004614 <_free_r+0x28>
 800466c:	6825      	ldr	r5, [r4, #0]
 800466e:	1961      	adds	r1, r4, r5
 8004670:	428b      	cmp	r3, r1
 8004672:	bf04      	itt	eq
 8004674:	6819      	ldreq	r1, [r3, #0]
 8004676:	685b      	ldreq	r3, [r3, #4]
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	bf04      	itt	eq
 800467c:	1949      	addeq	r1, r1, r5
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	6054      	str	r4, [r2, #4]
 8004682:	e7c7      	b.n	8004614 <_free_r+0x28>
 8004684:	b003      	add	sp, #12
 8004686:	bd30      	pop	{r4, r5, pc}
 8004688:	200014f0 	.word	0x200014f0

0800468c <_malloc_r>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	1ccd      	adds	r5, r1, #3
 8004690:	f025 0503 	bic.w	r5, r5, #3
 8004694:	3508      	adds	r5, #8
 8004696:	2d0c      	cmp	r5, #12
 8004698:	bf38      	it	cc
 800469a:	250c      	movcc	r5, #12
 800469c:	2d00      	cmp	r5, #0
 800469e:	4606      	mov	r6, r0
 80046a0:	db01      	blt.n	80046a6 <_malloc_r+0x1a>
 80046a2:	42a9      	cmp	r1, r5
 80046a4:	d903      	bls.n	80046ae <_malloc_r+0x22>
 80046a6:	230c      	movs	r3, #12
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	2000      	movs	r0, #0
 80046ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ae:	f000 f8f1 	bl	8004894 <__malloc_lock>
 80046b2:	4921      	ldr	r1, [pc, #132]	; (8004738 <_malloc_r+0xac>)
 80046b4:	680a      	ldr	r2, [r1, #0]
 80046b6:	4614      	mov	r4, r2
 80046b8:	b99c      	cbnz	r4, 80046e2 <_malloc_r+0x56>
 80046ba:	4f20      	ldr	r7, [pc, #128]	; (800473c <_malloc_r+0xb0>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b923      	cbnz	r3, 80046ca <_malloc_r+0x3e>
 80046c0:	4621      	mov	r1, r4
 80046c2:	4630      	mov	r0, r6
 80046c4:	f000 f83c 	bl	8004740 <_sbrk_r>
 80046c8:	6038      	str	r0, [r7, #0]
 80046ca:	4629      	mov	r1, r5
 80046cc:	4630      	mov	r0, r6
 80046ce:	f000 f837 	bl	8004740 <_sbrk_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d123      	bne.n	800471e <_malloc_r+0x92>
 80046d6:	230c      	movs	r3, #12
 80046d8:	6033      	str	r3, [r6, #0]
 80046da:	4630      	mov	r0, r6
 80046dc:	f000 f8e0 	bl	80048a0 <__malloc_unlock>
 80046e0:	e7e3      	b.n	80046aa <_malloc_r+0x1e>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	1b5b      	subs	r3, r3, r5
 80046e6:	d417      	bmi.n	8004718 <_malloc_r+0x8c>
 80046e8:	2b0b      	cmp	r3, #11
 80046ea:	d903      	bls.n	80046f4 <_malloc_r+0x68>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	441c      	add	r4, r3
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	e004      	b.n	80046fe <_malloc_r+0x72>
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	42a2      	cmp	r2, r4
 80046f8:	bf0c      	ite	eq
 80046fa:	600b      	streq	r3, [r1, #0]
 80046fc:	6053      	strne	r3, [r2, #4]
 80046fe:	4630      	mov	r0, r6
 8004700:	f000 f8ce 	bl	80048a0 <__malloc_unlock>
 8004704:	f104 000b 	add.w	r0, r4, #11
 8004708:	1d23      	adds	r3, r4, #4
 800470a:	f020 0007 	bic.w	r0, r0, #7
 800470e:	1ac2      	subs	r2, r0, r3
 8004710:	d0cc      	beq.n	80046ac <_malloc_r+0x20>
 8004712:	1a1b      	subs	r3, r3, r0
 8004714:	50a3      	str	r3, [r4, r2]
 8004716:	e7c9      	b.n	80046ac <_malloc_r+0x20>
 8004718:	4622      	mov	r2, r4
 800471a:	6864      	ldr	r4, [r4, #4]
 800471c:	e7cc      	b.n	80046b8 <_malloc_r+0x2c>
 800471e:	1cc4      	adds	r4, r0, #3
 8004720:	f024 0403 	bic.w	r4, r4, #3
 8004724:	42a0      	cmp	r0, r4
 8004726:	d0e3      	beq.n	80046f0 <_malloc_r+0x64>
 8004728:	1a21      	subs	r1, r4, r0
 800472a:	4630      	mov	r0, r6
 800472c:	f000 f808 	bl	8004740 <_sbrk_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d1dd      	bne.n	80046f0 <_malloc_r+0x64>
 8004734:	e7cf      	b.n	80046d6 <_malloc_r+0x4a>
 8004736:	bf00      	nop
 8004738:	200014f0 	.word	0x200014f0
 800473c:	200014f4 	.word	0x200014f4

08004740 <_sbrk_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d06      	ldr	r5, [pc, #24]	; (800475c <_sbrk_r+0x1c>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	f7fc fd5e 	bl	800120c <_sbrk>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_sbrk_r+0x1a>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_sbrk_r+0x1a>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	200015e0 	.word	0x200015e0

08004760 <__sread>:
 8004760:	b510      	push	{r4, lr}
 8004762:	460c      	mov	r4, r1
 8004764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004768:	f000 f8a0 	bl	80048ac <_read_r>
 800476c:	2800      	cmp	r0, #0
 800476e:	bfab      	itete	ge
 8004770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004772:	89a3      	ldrhlt	r3, [r4, #12]
 8004774:	181b      	addge	r3, r3, r0
 8004776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800477a:	bfac      	ite	ge
 800477c:	6563      	strge	r3, [r4, #84]	; 0x54
 800477e:	81a3      	strhlt	r3, [r4, #12]
 8004780:	bd10      	pop	{r4, pc}

08004782 <__swrite>:
 8004782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004786:	461f      	mov	r7, r3
 8004788:	898b      	ldrh	r3, [r1, #12]
 800478a:	05db      	lsls	r3, r3, #23
 800478c:	4605      	mov	r5, r0
 800478e:	460c      	mov	r4, r1
 8004790:	4616      	mov	r6, r2
 8004792:	d505      	bpl.n	80047a0 <__swrite+0x1e>
 8004794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004798:	2302      	movs	r3, #2
 800479a:	2200      	movs	r2, #0
 800479c:	f000 f868 	bl	8004870 <_lseek_r>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047aa:	81a3      	strh	r3, [r4, #12]
 80047ac:	4632      	mov	r2, r6
 80047ae:	463b      	mov	r3, r7
 80047b0:	4628      	mov	r0, r5
 80047b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	f000 b817 	b.w	80047e8 <_write_r>

080047ba <__sseek>:
 80047ba:	b510      	push	{r4, lr}
 80047bc:	460c      	mov	r4, r1
 80047be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c2:	f000 f855 	bl	8004870 <_lseek_r>
 80047c6:	1c43      	adds	r3, r0, #1
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	bf15      	itete	ne
 80047cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80047ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047d6:	81a3      	strheq	r3, [r4, #12]
 80047d8:	bf18      	it	ne
 80047da:	81a3      	strhne	r3, [r4, #12]
 80047dc:	bd10      	pop	{r4, pc}

080047de <__sclose>:
 80047de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e2:	f000 b813 	b.w	800480c <_close_r>
	...

080047e8 <_write_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	; (8004808 <_write_r+0x20>)
 80047ec:	4604      	mov	r4, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	602a      	str	r2, [r5, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fb fe88 	bl	800050c <_write>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_write_r+0x1e>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_write_r+0x1e>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	200015e0 	.word	0x200015e0

0800480c <_close_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d06      	ldr	r5, [pc, #24]	; (8004828 <_close_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	f7fc fcc3 	bl	80011a2 <_close>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_close_r+0x1a>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_close_r+0x1a>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	200015e0 	.word	0x200015e0

0800482c <_fstat_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d07      	ldr	r5, [pc, #28]	; (800484c <_fstat_r+0x20>)
 8004830:	2300      	movs	r3, #0
 8004832:	4604      	mov	r4, r0
 8004834:	4608      	mov	r0, r1
 8004836:	4611      	mov	r1, r2
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	f7fc fcbe 	bl	80011ba <_fstat>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	d102      	bne.n	8004848 <_fstat_r+0x1c>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	b103      	cbz	r3, 8004848 <_fstat_r+0x1c>
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	bd38      	pop	{r3, r4, r5, pc}
 800484a:	bf00      	nop
 800484c:	200015e0 	.word	0x200015e0

08004850 <_isatty_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d06      	ldr	r5, [pc, #24]	; (800486c <_isatty_r+0x1c>)
 8004854:	2300      	movs	r3, #0
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	f7fc fcbd 	bl	80011da <_isatty>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_isatty_r+0x1a>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_isatty_r+0x1a>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	200015e0 	.word	0x200015e0

08004870 <_lseek_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4d07      	ldr	r5, [pc, #28]	; (8004890 <_lseek_r+0x20>)
 8004874:	4604      	mov	r4, r0
 8004876:	4608      	mov	r0, r1
 8004878:	4611      	mov	r1, r2
 800487a:	2200      	movs	r2, #0
 800487c:	602a      	str	r2, [r5, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	f7fc fcb6 	bl	80011f0 <_lseek>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_lseek_r+0x1e>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_lseek_r+0x1e>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	200015e0 	.word	0x200015e0

08004894 <__malloc_lock>:
 8004894:	4801      	ldr	r0, [pc, #4]	; (800489c <__malloc_lock+0x8>)
 8004896:	f7ff be43 	b.w	8004520 <__retarget_lock_acquire_recursive>
 800489a:	bf00      	nop
 800489c:	200015d8 	.word	0x200015d8

080048a0 <__malloc_unlock>:
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <__malloc_unlock+0x8>)
 80048a2:	f7ff be3e 	b.w	8004522 <__retarget_lock_release_recursive>
 80048a6:	bf00      	nop
 80048a8:	200015d8 	.word	0x200015d8

080048ac <_read_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d07      	ldr	r5, [pc, #28]	; (80048cc <_read_r+0x20>)
 80048b0:	4604      	mov	r4, r0
 80048b2:	4608      	mov	r0, r1
 80048b4:	4611      	mov	r1, r2
 80048b6:	2200      	movs	r2, #0
 80048b8:	602a      	str	r2, [r5, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f7fc fc54 	bl	8001168 <_read>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_read_r+0x1e>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_read_r+0x1e>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	200015e0 	.word	0x200015e0

080048d0 <_init>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr

080048dc <_fini>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr
