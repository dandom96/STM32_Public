
RTC_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b9c  08005b9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba4  08005ba4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08005c1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08005c1c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011437  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b9  00000000  00000000  000314d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00033890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00034808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002372a  00000000  00000000  00035698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012263  00000000  00000000  00058dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7e85  00000000  00000000  0006b025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  00142efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005aac 	.word	0x08005aac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005aac 	.word	0x08005aac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <_write+0x24>)
 80005ca:	f003 fae8 	bl	8003b9e <HAL_UART_Transmit>
	return len;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000f4 	.word	0x200000f4

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fc1c 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f842 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9b4 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f988 	bl	8000900 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f0:	f000 f938 	bl	8000864 <MX_TIM2_Init>
  MX_RTC_Init();
 80005f4:	f000 f8aa 	bl	800074c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0x78>)
 80005fa:	f002 fe51 	bl	80032a0 <HAL_TIM_Base_Start_IT>

  //Backup register to store TIME and DATE
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80005fe:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000602:	2101      	movs	r1, #1
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <main+0x7c>)
 8000606:	f002 fdd7 	bl	80031b8 <HAL_RTCEx_BKUPWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 800060a:	2200      	movs	r2, #0
 800060c:	4913      	ldr	r1, [pc, #76]	; (800065c <main+0x80>)
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0x7c>)
 8000610:	f002 fa66 	bl	8002ae0 <HAL_RTC_GetTime>
	  //snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
      //HAL_UART_Transmit(&huart2, (uint8_t*)trans_str, strlen(trans_str), 1000);
	  printf("Time %d:%d:%d\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <main+0x80>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0x80>)
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	461a      	mov	r2, r3
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0x80>)
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <main+0x84>)
 8000626:	f004 fab3 	bl	8004b90 <iprintf>

	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 800062a:	2200      	movs	r2, #0
 800062c:	490d      	ldr	r1, [pc, #52]	; (8000664 <main+0x88>)
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0x7c>)
 8000630:	f002 fb5b 	bl	8002cea <HAL_RTC_GetDate>
	  //snprintf(trans_str, 63, "Date %d-%d-20%d\n", sDate.Date, sDate.Month, sDate.Year);
     //HAL_UART_Transmit(&huart2, (uint8_t*)trans_str, strlen(trans_str), 1000);
	  printf("Date %.6f-%d-20%d\n\n\r", sDate.Date, sDate.Month, sDate.Year);
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <main+0x88>)
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	4619      	mov	r1, r3
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <main+0x88>)
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	461a      	mov	r2, r3
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <main+0x88>)
 8000642:	78db      	ldrb	r3, [r3, #3]
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <main+0x8c>)
 8000646:	f004 faa3 	bl	8004b90 <iprintf>
      HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f000 fc57 	bl	8000f00 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000652:	e7da      	b.n	800060a <main+0x2e>
 8000654:	200000ac 	.word	0x200000ac
 8000658:	2000008c 	.word	0x2000008c
 800065c:	20000138 	.word	0x20000138
 8000660:	08005ac4 	.word	0x08005ac4
 8000664:	2000014c 	.word	0x2000014c
 8000668:	08005ad4 	.word	0x08005ad4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fa80 	bl	8004b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <SystemClock_Config+0xd8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <SystemClock_Config+0xd8>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xd8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xdc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	4a23      	ldr	r2, [pc, #140]	; (8000748 <SystemClock_Config+0xdc>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <SystemClock_Config+0xdc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006cc:	2306      	movs	r3, #6
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e4:	2310      	movs	r3, #16
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fe02 	bl	8002308 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800070a:	f000 f9a5 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff78 	bl	8001620 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000736:	f000 f98f 	bl	8000a58 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2228      	movs	r2, #40	; 0x28
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f004 fa07 	bl	8004b80 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_RTC_Init+0x110>)
 8000774:	4a3a      	ldr	r2, [pc, #232]	; (8000860 <MX_RTC_Init+0x114>)
 8000776:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <MX_RTC_Init+0x110>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <MX_RTC_Init+0x110>)
 8000780:	227f      	movs	r2, #127	; 0x7f
 8000782:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <MX_RTC_Init+0x110>)
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <MX_RTC_Init+0x110>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <MX_RTC_Init+0x110>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <MX_RTC_Init+0x110>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800079c:	482f      	ldr	r0, [pc, #188]	; (800085c <MX_RTC_Init+0x110>)
 800079e:	f002 f851 	bl	8002844 <HAL_RTC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007a8:	f000 f956 	bl	8000a58 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 80007ac:	230a      	movs	r3, #10
 80007ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 20;
 80007b2:	2314      	movs	r3, #20
 80007b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007be:	2300      	movs	r3, #0
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4823      	ldr	r0, [pc, #140]	; (800085c <MX_RTC_Init+0x110>)
 80007d0:	f002 f8c9 	bl	8002966 <HAL_RTC_SetTime>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80007da:	f000 f93d 	bl	8000a58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80007de:	2304      	movs	r3, #4
 80007e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 80007e4:	2311      	movs	r3, #17
 80007e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 11;
 80007ea:	230b      	movs	r3, #11
 80007ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 21;
 80007f0:	2315      	movs	r3, #21
 80007f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80007f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <MX_RTC_Init+0x110>)
 8000800:	f002 f9cc 	bl	8002b9c <HAL_RTC_SetDate>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800080a:	f000 f925 	bl	8000a58 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_RTC_Init+0x110>)
 8000846:	f002 fa9f 	bl	8002d88 <HAL_RTC_SetAlarm_IT>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000850:	f000 f902 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3740      	adds	r7, #64	; 0x40
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000008c 	.word	0x2000008c
 8000860:	40002800 	.word	0x40002800

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_TIM2_Init+0x94>)
 800088a:	2253      	movs	r2, #83	; 0x53
 800088c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249999;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_TIM2_Init+0x94>)
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <MX_TIM2_Init+0x98>)
 8000898:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_TIM2_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008a8:	f002 fcaa 	bl	8003200 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f8d1 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008c4:	f002 fe64 	bl	8003590 <HAL_TIM_ConfigClockSource>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 f8c3 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_TIM2_Init+0x94>)
 80008e0:	f003 f880 	bl	80039e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80008ea:	f000 f8b5 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000ac 	.word	0x200000ac
 80008fc:	0003d08f 	.word	0x0003d08f

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f003 f8e4 	bl	8003b04 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f889 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000f4 	.word	0x200000f4
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2c      	ldr	r2, [pc, #176]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009e0:	f000 fdea 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_GPIO_Init+0xd8>)
 80009fc:	f000 fc48 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000a18:	f000 fc3a 	bl	8001290 <HAL_GPIO_Init>

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020800 	.word	0x40020800

08000a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) //If the source is TIM2
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a40:	d103      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a42:	2120      	movs	r1, #32
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a46:	f000 fdd0 	bl	80015ea <HAL_GPIO_TogglePin>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020000 	.word	0x40020000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f000 fb20 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09a      	sub	sp, #104	; 0x68
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	225c      	movs	r2, #92	; 0x5c
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f004 f85b 	bl	8004b80 <memset>
  if(hrtc->Instance==RTC)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_RTC_MspInit+0x5c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d119      	bne.n	8000b08 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 feb6 	bl	8001854 <HAL_RCCEx_PeriphCLKConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000aee:	f7ff ffb3 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_RTC_MspInit+0x60>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2029      	movs	r0, #41	; 0x29
 8000afe:	f000 fafe 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b02:	2029      	movs	r0, #41	; 0x29
 8000b04:	f000 fb17 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3768      	adds	r7, #104	; 0x68
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40002800 	.word	0x40002800
 8000b14:	42470e3c 	.word	0x42470e3c

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d115      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201c      	movs	r0, #28
 8000b4c:	f000 fad7 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b50:	201c      	movs	r0, #28
 8000b52:	f000 faf0 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_UART_MspInit+0x94>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d133      	bne.n	8000bee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_UART_MspInit+0x98>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0x98>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_UART_MspInit+0x98>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_UART_MspInit+0x98>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_UART_MspInit+0x98>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_UART_MspInit+0x98>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_UART_MspInit+0x9c>)
 8000bda:	f000 fb59 	bl	8001290 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2026      	movs	r0, #38	; 0x26
 8000be4:	f000 fa8b 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000be8:	2026      	movs	r0, #38	; 0x26
 8000bea:	f000 faa4 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f936 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM2_IRQHandler+0x10>)
 8000c5e:	f002 fb8f 	bl	8003380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000ac 	.word	0x200000ac

08000c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <USART2_IRQHandler+0x10>)
 8000c72:	f003 f827 	bl	8003cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000f4 	.word	0x200000f4

08000c80 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <RTC_Alarm_IRQHandler+0x10>)
 8000c86:	f002 f9b7 	bl	8002ff8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000008c 	.word	0x2000008c

08000c94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e00a      	b.n	8000cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca6:	f3af 8000 	nop.w
 8000caa:	4601      	mov	r1, r0
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	b2ca      	uxtb	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf0      	blt.n	8000ca6 <_read+0x12>
	}

return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_isatty>:

int _isatty(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f003 fee0 	bl	8004b2c <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20020000 	.word	0x20020000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20000150 	.word	0x20000150
 8000da0:	20000168 	.word	0x20000168

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffd7 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f003 fe9f 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fbef 	bl	80005dc <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e0c:	08005bac 	.word	0x08005bac
  ldr r2, =_sbss
 8000e10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e14:	20000168 	.word	0x20000168

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f94f 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fe08 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f967 	bl	8001152 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000154 	.word	0x20000154

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000154 	.word	0x20000154

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff3e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff31 	bl	8000fac <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff feb6 	bl	8000ee8 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d008      	beq.n	800119c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e052      	b.n	8001242 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0216 	bic.w	r2, r2, #22
 80011aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <HAL_DMA_Abort+0x62>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0208 	bic.w	r2, r2, #8
 80011da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ec:	e013      	b.n	8001216 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ee:	f7ff fe7b 	bl	8000ee8 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d90c      	bls.n	8001216 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2220      	movs	r2, #32
 8001200:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e015      	b.n	8001242 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e4      	bne.n	80011ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001228:	223f      	movs	r2, #63	; 0x3f
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d004      	beq.n	8001268 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e00c      	b.n	8001282 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2205      	movs	r2, #5
 800126c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e165      	b.n	8001578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8154 	bne.w	8001572 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80ae 	beq.w	8001572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_GPIO_Init+0x300>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a5c      	ldr	r2, [pc, #368]	; (8001590 <HAL_GPIO_Init+0x300>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <HAL_GPIO_Init+0x300>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_GPIO_Init+0x304>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4f      	ldr	r2, [pc, #316]	; (8001598 <HAL_GPIO_Init+0x308>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d025      	beq.n	80014aa <HAL_GPIO_Init+0x21a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4e      	ldr	r2, [pc, #312]	; (800159c <HAL_GPIO_Init+0x30c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01f      	beq.n	80014a6 <HAL_GPIO_Init+0x216>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_GPIO_Init+0x310>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x212>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <HAL_GPIO_Init+0x314>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x20e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <HAL_GPIO_Init+0x318>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x20a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_GPIO_Init+0x31c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x206>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <HAL_GPIO_Init+0x320>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x202>
 800148e:	2306      	movs	r3, #6
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 8001492:	2307      	movs	r3, #7
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x21c>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <HAL_GPIO_Init+0x304>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_GPIO_Init+0x324>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_GPIO_Init+0x324>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_GPIO_Init+0x324>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_GPIO_Init+0x324>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <HAL_GPIO_Init+0x324>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae96 	bls.w	80012ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	041a      	lsls	r2, r3, #16
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43d9      	mvns	r1, r3
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	400b      	ands	r3, r1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0cc      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d90c      	bls.n	800165c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a58      	ldr	r2, [pc, #352]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800167e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d044      	beq.n	8001740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d119      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d003      	beq.n	80016de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e067      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f023 0203 	bic.w	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4934      	ldr	r1, [pc, #208]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	4313      	orrs	r3, r2
 800170e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff fbea 	bl	8000ee8 <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	e00a      	b.n	800172e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7ff fbe6 	bl	8000ee8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e04f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 020c 	and.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	429a      	cmp	r2, r3
 800173e:	d1eb      	bne.n	8001718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d20c      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 fb7f 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	490a      	ldr	r1, [pc, #40]	; (80017e0 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb4a 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00
 80017dc:	40023800 	.word	0x40023800
 80017e0:	08005aec 	.word	0x08005aec
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_GetHCLKFreq+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000

08001804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001808:	f7ff fff0 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 800180c:	4602      	mov	r2, r0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	0a9b      	lsrs	r3, r3, #10
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	4903      	ldr	r1, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800181a:	5ccb      	ldrb	r3, [r1, r3]
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	08005afc 	.word	0x08005afc

0800182c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001830:	f7ff ffdc 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	0b5b      	lsrs	r3, r3, #13
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4903      	ldr	r1, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	08005afc 	.word	0x08005afc

08001854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d010      	beq.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800188e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001892:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	496c      	ldr	r1, [pc, #432]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800189c:	4313      	orrs	r3, r2
 800189e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80018aa:	2301      	movs	r3, #1
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d010      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80018ba:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	4960      	ldr	r1, [pc, #384]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80018d8:	2301      	movs	r3, #1
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d017      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018e8:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4955      	ldr	r1, [pc, #340]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001906:	d101      	bne.n	800190c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001908:	2301      	movs	r3, #1
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d017      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001924:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800192a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	4946      	ldr	r1, [pc, #280]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001934:	4313      	orrs	r3, r2
 8001936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001942:	d101      	bne.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001950:	2301      	movs	r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 808a 	beq.w	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a33      	ldr	r2, [pc, #204]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800198a:	f7ff faad 	bl	8000ee8 <HAL_GetTick>
 800198e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff faa9 	bl	8000ee8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e278      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d02f      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d028      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d114      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fa77 	bl	8000ee8 <HAL_GetTick>
 80019fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff fa73 	bl	8000ee8 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e240      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a2c:	d114      	bne.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a42:	4902      	ldr	r1, [pc, #8]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
 8001a48:	e00c      	b.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000
 8001a54:	42470e40 	.word	0x42470e40
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a62:	6093      	str	r3, [r2, #8]
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	4944      	ldr	r1, [pc, #272]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001a8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00a      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4937      	ldr	r1, [pc, #220]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac8:	492e      	ldr	r1, [pc, #184]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d011      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	4926      	ldr	r1, [pc, #152]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001afa:	d101      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	491a      	ldr	r1, [pc, #104]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d011      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3c:	4911      	ldr	r1, [pc, #68]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b60:	f040 80ff 	bne.w	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b6a:	f7ff f9bd 	bl	8000ee8 <HAL_GetTick>
 8001b6e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b70:	e00e      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b72:	f7ff f9b9 	bl	8000ee8 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d907      	bls.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e188      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	424711e0 	.word	0x424711e0
 8001b8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b90:	4b7e      	ldr	r3, [pc, #504]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ea      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d028      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d124      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001bc4:	4b71      	ldr	r3, [pc, #452]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bdc:	0e1b      	lsrs	r3, r3, #24
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	019b      	lsls	r3, r3, #6
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	071b      	lsls	r3, r3, #28
 8001c06:	4961      	ldr	r1, [pc, #388]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c22:	d00a      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d035      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c38:	d130      	bne.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	3301      	adds	r3, #1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c52:	0f1b      	lsrs	r3, r3, #28
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	431a      	orrs	r2, r3
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	431a      	orrs	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	071b      	lsls	r3, r3, #28
 8001c7c:	4943      	ldr	r1, [pc, #268]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c84:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c8a:	f023 021f 	bic.w	r2, r3, #31
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	3b01      	subs	r3, #1
 8001c94:	493d      	ldr	r1, [pc, #244]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d029      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cb0:	d124      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cca:	0f1b      	lsrs	r3, r3, #28
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	019b      	lsls	r3, r3, #6
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	071b      	lsls	r3, r3, #28
 8001cf4:	4925      	ldr	r1, [pc, #148]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d016      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	019b      	lsls	r3, r3, #6
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	071b      	lsls	r3, r3, #28
 8001d2e:	4917      	ldr	r1, [pc, #92]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff f8d4 	bl	8000ee8 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d44:	f7ff f8d0 	bl	8000ee8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e09f      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	f040 8095 	bne.w	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d70:	f7ff f8ba 	bl	8000ee8 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d76:	e00f      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d78:	f7ff f8b6 	bl	8000ee8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d908      	bls.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e085      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	42470068 	.word	0x42470068
 8001d94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d98:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001da4:	d0e8      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d02b      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d127      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	431a      	orrs	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	061b      	lsls	r3, r3, #24
 8001dfc:	4928      	ldr	r1, [pc, #160]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	3b01      	subs	r3, #1
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	4922      	ldr	r1, [pc, #136]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01d      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e32:	d118      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	0e1b      	lsrs	r3, r3, #24
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4910      	ldr	r1, [pc, #64]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff f83c 	bl	8000ee8 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e74:	f7ff f838 	bl	8000ee8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e007      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e92:	d1ef      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3730      	adds	r7, #48	; 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470070 	.word	0x42470070

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eac:	b0ae      	sub	sp, #184	; 0xb8
 8001eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ece:	4bcb      	ldr	r3, [pc, #812]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	f200 8206 	bhi.w	80022e8 <HAL_RCC_GetSysClockFreq+0x440>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001f19 	.word	0x08001f19
 8001ee8:	080022e9 	.word	0x080022e9
 8001eec:	080022e9 	.word	0x080022e9
 8001ef0:	080022e9 	.word	0x080022e9
 8001ef4:	08001f21 	.word	0x08001f21
 8001ef8:	080022e9 	.word	0x080022e9
 8001efc:	080022e9 	.word	0x080022e9
 8001f00:	080022e9 	.word	0x080022e9
 8001f04:	08001f29 	.word	0x08001f29
 8001f08:	080022e9 	.word	0x080022e9
 8001f0c:	080022e9 	.word	0x080022e9
 8001f10:	080022e9 	.word	0x080022e9
 8001f14:	08002119 	.word	0x08002119
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f18:	4bb9      	ldr	r3, [pc, #740]	; (8002200 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001f1e:	e1e7      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f20:	4bb8      	ldr	r3, [pc, #736]	; (8002204 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f26:	e1e3      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4bb4      	ldr	r3, [pc, #720]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f34:	4bb1      	ldr	r3, [pc, #708]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d071      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f40:	4bae      	ldr	r3, [pc, #696]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f4c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f66:	4622      	mov	r2, r4
 8001f68:	462b      	mov	r3, r5
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	0159      	lsls	r1, r3, #5
 8001f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f78:	0150      	lsls	r0, r2, #5
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4621      	mov	r1, r4
 8001f80:	1a51      	subs	r1, r2, r1
 8001f82:	6439      	str	r1, [r7, #64]	; 0x40
 8001f84:	4629      	mov	r1, r5
 8001f86:	eb63 0301 	sbc.w	r3, r3, r1
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f98:	4649      	mov	r1, r9
 8001f9a:	018b      	lsls	r3, r1, #6
 8001f9c:	4641      	mov	r1, r8
 8001f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	018a      	lsls	r2, r1, #6
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	1a51      	subs	r1, r2, r1
 8001faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fac:	4649      	mov	r1, r9
 8001fae:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	00cb      	lsls	r3, r1, #3
 8001fc4:	4641      	mov	r1, r8
 8001fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fca:	4641      	mov	r1, r8
 8001fcc:	00ca      	lsls	r2, r1, #3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	189b      	adds	r3, r3, r2
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fda:	462b      	mov	r3, r5
 8001fdc:	460a      	mov	r2, r1
 8001fde:	eb42 0303 	adc.w	r3, r2, r3
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	024b      	lsls	r3, r1, #9
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	024a      	lsls	r2, r1, #9
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002006:	2200      	movs	r2, #0
 8002008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800200c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002010:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002014:	f7fe f94c 	bl	80002b0 <__aeabi_uldivmod>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4613      	mov	r3, r2
 800201e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002022:	e067      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002024:	4b75      	ldr	r3, [pc, #468]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	2200      	movs	r2, #0
 800202c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002030:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203c:	67bb      	str	r3, [r7, #120]	; 0x78
 800203e:	2300      	movs	r3, #0
 8002040:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002042:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002046:	4622      	mov	r2, r4
 8002048:	462b      	mov	r3, r5
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	0159      	lsls	r1, r3, #5
 8002054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002058:	0150      	lsls	r0, r2, #5
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4621      	mov	r1, r4
 8002060:	1a51      	subs	r1, r2, r1
 8002062:	62b9      	str	r1, [r7, #40]	; 0x28
 8002064:	4629      	mov	r1, r5
 8002066:	eb63 0301 	sbc.w	r3, r3, r1
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002078:	4649      	mov	r1, r9
 800207a:	018b      	lsls	r3, r1, #6
 800207c:	4641      	mov	r1, r8
 800207e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002082:	4641      	mov	r1, r8
 8002084:	018a      	lsls	r2, r1, #6
 8002086:	4641      	mov	r1, r8
 8002088:	ebb2 0a01 	subs.w	sl, r2, r1
 800208c:	4649      	mov	r1, r9
 800208e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800209e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020a6:	4692      	mov	sl, r2
 80020a8:	469b      	mov	fp, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	eb1a 0303 	adds.w	r3, sl, r3
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	462b      	mov	r3, r5
 80020b4:	eb4b 0303 	adc.w	r3, fp, r3
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020c6:	4629      	mov	r1, r5
 80020c8:	028b      	lsls	r3, r1, #10
 80020ca:	4621      	mov	r1, r4
 80020cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d0:	4621      	mov	r1, r4
 80020d2:	028a      	lsls	r2, r1, #10
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020dc:	2200      	movs	r2, #0
 80020de:	673b      	str	r3, [r7, #112]	; 0x70
 80020e0:	677a      	str	r2, [r7, #116]	; 0x74
 80020e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020e6:	f7fe f8e3 	bl	80002b0 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4613      	mov	r3, r2
 80020f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f4:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800210a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002116:	e0eb      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002118:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002124:	4b35      	ldr	r3, [pc, #212]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d06b      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	2200      	movs	r2, #0
 8002138:	66bb      	str	r3, [r7, #104]	; 0x68
 800213a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800213c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800213e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002142:	663b      	str	r3, [r7, #96]	; 0x60
 8002144:	2300      	movs	r3, #0
 8002146:	667b      	str	r3, [r7, #100]	; 0x64
 8002148:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800214c:	4622      	mov	r2, r4
 800214e:	462b      	mov	r3, r5
 8002150:	f04f 0000 	mov.w	r0, #0
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	0159      	lsls	r1, r3, #5
 800215a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800215e:	0150      	lsls	r0, r2, #5
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4621      	mov	r1, r4
 8002166:	1a51      	subs	r1, r2, r1
 8002168:	61b9      	str	r1, [r7, #24]
 800216a:	4629      	mov	r1, r5
 800216c:	eb63 0301 	sbc.w	r3, r3, r1
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800217e:	4659      	mov	r1, fp
 8002180:	018b      	lsls	r3, r1, #6
 8002182:	4651      	mov	r1, sl
 8002184:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002188:	4651      	mov	r1, sl
 800218a:	018a      	lsls	r2, r1, #6
 800218c:	4651      	mov	r1, sl
 800218e:	ebb2 0801 	subs.w	r8, r2, r1
 8002192:	4659      	mov	r1, fp
 8002194:	eb63 0901 	sbc.w	r9, r3, r1
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ac:	4690      	mov	r8, r2
 80021ae:	4699      	mov	r9, r3
 80021b0:	4623      	mov	r3, r4
 80021b2:	eb18 0303 	adds.w	r3, r8, r3
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	462b      	mov	r3, r5
 80021ba:	eb49 0303 	adc.w	r3, r9, r3
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021cc:	4629      	mov	r1, r5
 80021ce:	024b      	lsls	r3, r1, #9
 80021d0:	4621      	mov	r1, r4
 80021d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021d6:	4621      	mov	r1, r4
 80021d8:	024a      	lsls	r2, r1, #9
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021e2:	2200      	movs	r2, #0
 80021e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80021e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021ec:	f7fe f860 	bl	80002b0 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4613      	mov	r3, r2
 80021f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021fa:	e065      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x420>
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400
 8002204:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002208:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCC_GetSysClockFreq+0x458>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	2200      	movs	r2, #0
 8002210:	4618      	mov	r0, r3
 8002212:	4611      	mov	r1, r2
 8002214:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002218:	653b      	str	r3, [r7, #80]	; 0x50
 800221a:	2300      	movs	r3, #0
 800221c:	657b      	str	r3, [r7, #84]	; 0x54
 800221e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002222:	4642      	mov	r2, r8
 8002224:	464b      	mov	r3, r9
 8002226:	f04f 0000 	mov.w	r0, #0
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	0159      	lsls	r1, r3, #5
 8002230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002234:	0150      	lsls	r0, r2, #5
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4641      	mov	r1, r8
 800223c:	1a51      	subs	r1, r2, r1
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	4649      	mov	r1, r9
 8002242:	eb63 0301 	sbc.w	r3, r3, r1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002254:	4659      	mov	r1, fp
 8002256:	018b      	lsls	r3, r1, #6
 8002258:	4651      	mov	r1, sl
 800225a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800225e:	4651      	mov	r1, sl
 8002260:	018a      	lsls	r2, r1, #6
 8002262:	4651      	mov	r1, sl
 8002264:	1a54      	subs	r4, r2, r1
 8002266:	4659      	mov	r1, fp
 8002268:	eb63 0501 	sbc.w	r5, r3, r1
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	00eb      	lsls	r3, r5, #3
 8002276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227a:	00e2      	lsls	r2, r4, #3
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4643      	mov	r3, r8
 8002282:	18e3      	adds	r3, r4, r3
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	464b      	mov	r3, r9
 8002288:	eb45 0303 	adc.w	r3, r5, r3
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229a:	4629      	mov	r1, r5
 800229c:	028b      	lsls	r3, r1, #10
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a4:	4621      	mov	r1, r4
 80022a6:	028a      	lsls	r2, r1, #10
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022b0:	2200      	movs	r2, #0
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80022b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80022b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022ba:	f7fd fff9 	bl	80002b0 <__aeabi_uldivmod>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4613      	mov	r3, r2
 80022c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCC_GetSysClockFreq+0x458>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0f1b      	lsrs	r3, r3, #28
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80022d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022e6:	e003      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_GetSysClockFreq+0x45c>)
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	37b8      	adds	r7, #184	; 0xb8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400

08002308 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e28d      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8083 	beq.w	800242e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002328:	4b94      	ldr	r3, [pc, #592]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d019      	beq.n	8002368 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002334:	4b91      	ldr	r3, [pc, #580]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800233c:	2b08      	cmp	r3, #8
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002340:	4b8e      	ldr	r3, [pc, #568]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234c:	d00c      	beq.n	8002368 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b84      	ldr	r3, [pc, #528]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05b      	beq.n	800242c <HAL_RCC_OscConfig+0x124>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e25a      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x90>
 800238a:	4b7c      	ldr	r3, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a7b      	ldr	r2, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xcc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0xb4>
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a72      	ldr	r2, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xcc>
 80023bc:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b6c      	ldr	r3, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a6b      	ldr	r2, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fd84 	bl	8000ee8 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fd80 	bl	8000ee8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e21f      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xdc>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fd70 	bl	8000ee8 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fd6c 	bl	8000ee8 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e20b      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x104>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d06f      	beq.n	800251a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800243a:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d017      	beq.n	8002476 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002446:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d11c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246a:	4b44      	ldr	r3, [pc, #272]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d116      	bne.n	80024a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x186>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e1d3      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4937      	ldr	r1, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x274>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	e03a      	b.n	800251a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_RCC_OscConfig+0x278>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fd19 	bl	8000ee8 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fd15 	bl	8000ee8 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1b4      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4925      	ldr	r1, [pc, #148]	; (800257c <HAL_RCC_OscConfig+0x274>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x278>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fcf8 	bl	8000ee8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fc:	f7fe fcf4 	bl	8000ee8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e193      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d036      	beq.n	8002594 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_RCC_OscConfig+0x27c>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fcd8 	bl	8000ee8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253c:	f7fe fcd4 	bl	8000ee8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e173      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x234>
 800255a:	e01b      	b.n	8002594 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_OscConfig+0x27c>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7fe fcc1 	bl	8000ee8 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002568:	e00e      	b.n	8002588 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256a:	f7fe fcbd 	bl	8000ee8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d907      	bls.n	8002588 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e15c      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
 800257c:	40023800 	.word	0x40023800
 8002580:	42470000 	.word	0x42470000
 8002584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ea      	bne.n	800256a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8097 	beq.w	80026d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b83      	ldr	r3, [pc, #524]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b7f      	ldr	r3, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a7e      	ldr	r2, [pc, #504]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b7c      	ldr	r3, [pc, #496]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <HAL_RCC_OscConfig+0x4b0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b76      	ldr	r3, [pc, #472]	; (80027b8 <HAL_RCC_OscConfig+0x4b0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <HAL_RCC_OscConfig+0x4b0>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fc7d 	bl	8000ee8 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fc79 	bl	8000ee8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e118      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	4b6c      	ldr	r3, [pc, #432]	; (80027b8 <HAL_RCC_OscConfig+0x4b0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x31e>
 8002618:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e01c      	b.n	8002660 <HAL_RCC_OscConfig+0x358>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b05      	cmp	r3, #5
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x340>
 800262e:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a5d      	ldr	r2, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x358>
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fc3e 	bl	8000ee8 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fc3a 	bl	8000ee8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0d7      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ee      	beq.n	8002670 <HAL_RCC_OscConfig+0x368>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fc28 	bl	8000ee8 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fc24 	bl	8000ee8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0c1      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ee      	bne.n	800269c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80ad 	beq.w	8002834 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d060      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d145      	bne.n	800277a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x4b4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fbf8 	bl	8000ee8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fbf4 	bl	8000ee8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e093      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	071b      	lsls	r3, r3, #28
 8002746:	491b      	ldr	r1, [pc, #108]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_RCC_OscConfig+0x4b4>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fbc9 	bl	8000ee8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275a:	f7fe fbc5 	bl	8000ee8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e064      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x452>
 8002778:	e05c      	b.n	8002834 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCC_OscConfig+0x4b4>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fbb2 	bl	8000ee8 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fbae 	bl	8000ee8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e04d      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_OscConfig+0x4ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x480>
 80027a6:	e045      	b.n	8002834 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e040      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000
 80027bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_RCC_OscConfig+0x538>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d030      	beq.n	8002830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d129      	bne.n	8002830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d122      	bne.n	8002830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d119      	bne.n	8002830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	3b01      	subs	r3, #1
 800280a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d10f      	bne.n	8002830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d107      	bne.n	8002830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e083      	b.n	800295e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7f5b      	ldrb	r3, [r3, #29]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe f924 	bl	8000ab4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	22ca      	movs	r2, #202	; 0xca
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2253      	movs	r2, #83	; 0x53
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fc30 	bl	80030e8 <RTC_EnterInitMode>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	22ff      	movs	r2, #255	; 0xff
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e05e      	b.n	800295e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80028ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6919      	ldr	r1, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	041a      	lsls	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fbc2 	bl	8003098 <HAL_RTC_WaitForSynchro>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	22ff      	movs	r2, #255	; 0xff
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2204      	movs	r2, #4
 8002926:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e018      	b.n	800295e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800295c:	2300      	movs	r3, #0
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002966:	b590      	push	{r4, r7, lr}
 8002968:	b087      	sub	sp, #28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	7f1b      	ldrb	r3, [r3, #28]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_RTC_SetTime+0x1c>
 800297e:	2302      	movs	r3, #2
 8002980:	e0aa      	b.n	8002ad8 <HAL_RTC_SetTime+0x172>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2202      	movs	r2, #2
 800298c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d126      	bne.n	80029e2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2200      	movs	r2, #0
 80029a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fbc7 	bl	8003140 <RTC_ByteToBcd2>
 80029b2:	4603      	mov	r3, r0
 80029b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fbc0 	bl	8003140 <RTC_ByteToBcd2>
 80029c0:	4603      	mov	r3, r0
 80029c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80029c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	789b      	ldrb	r3, [r3, #2]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fbb8 	bl	8003140 <RTC_ByteToBcd2>
 80029d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80029d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	78db      	ldrb	r3, [r3, #3]
 80029da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e018      	b.n	8002a14 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a02:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002a08:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	78db      	ldrb	r3, [r3, #3]
 8002a0e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	22ca      	movs	r2, #202	; 0xca
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2253      	movs	r2, #83	; 0x53
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fb5f 	bl	80030e8 <RTC_EnterInitMode>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e047      	b.n	8002ad8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a56:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a66:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6899      	ldr	r1, [r3, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d111      	bne.n	8002ac2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fafa 	bl	8003098 <HAL_RTC_WaitForSynchro>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	22ff      	movs	r2, #255	; 0xff
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}

08002ae0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d11a      	bne.n	8002b92 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fb0b 	bl	800317c <RTC_Bcd2ToByte>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fb02 	bl	800317c <RTC_Bcd2ToByte>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	789b      	ldrb	r3, [r3, #2]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 faf9 	bl	800317c <RTC_Bcd2ToByte>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7f1b      	ldrb	r3, [r3, #28]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RTC_SetDate+0x1c>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e094      	b.n	8002ce2 <HAL_RTC_SetDate+0x146>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10e      	bne.n	8002be8 <HAL_RTC_SetDate+0x4c>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	f023 0310 	bic.w	r3, r3, #16
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	330a      	adds	r3, #10
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11c      	bne.n	8002c28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	78db      	ldrb	r3, [r3, #3]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 faa4 	bl	8003140 <RTC_ByteToBcd2>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fa9d 	bl	8003140 <RTC_ByteToBcd2>
 8002c06:	4603      	mov	r3, r0
 8002c08:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c0a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	789b      	ldrb	r3, [r3, #2]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fa95 	bl	8003140 <RTC_ByteToBcd2>
 8002c16:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c18:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e00e      	b.n	8002c46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	78db      	ldrb	r3, [r3, #3]
 8002c2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c34:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	22ca      	movs	r2, #202	; 0xca
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2253      	movs	r2, #83	; 0x53
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa46 	bl	80030e8 <RTC_EnterInitMode>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	22ff      	movs	r2, #255	; 0xff
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e033      	b.n	8002ce2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c98:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f9f5 	bl	8003098 <HAL_RTC_WaitForSynchro>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e00a      	b.n	8002ce2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	22ff      	movs	r2, #255	; 0xff
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}

08002cea <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	0b5b      	lsrs	r3, r3, #13
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11a      	bne.n	8002d7e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	78db      	ldrb	r3, [r3, #3]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fa15 	bl	800317c <RTC_Bcd2ToByte>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa0c 	bl	800317c <RTC_Bcd2ToByte>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	789b      	ldrb	r3, [r3, #2]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fa03 	bl	800317c <RTC_Bcd2ToByte>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002d9c:	4b93      	ldr	r3, [pc, #588]	; (8002fec <HAL_RTC_SetAlarm_IT+0x264>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a93      	ldr	r2, [pc, #588]	; (8002ff0 <HAL_RTC_SetAlarm_IT+0x268>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0adb      	lsrs	r3, r3, #11
 8002da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	7f1b      	ldrb	r3, [r3, #28]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_RTC_SetAlarm_IT+0x36>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e111      	b.n	8002fe2 <HAL_RTC_SetAlarm_IT+0x25a>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d137      	bne.n	8002e40 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f9a9 	bl	8003140 <RTC_ByteToBcd2>
 8002dee:	4603      	mov	r3, r0
 8002df0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f9a2 	bl	8003140 <RTC_ByteToBcd2>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e00:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	789b      	ldrb	r3, [r3, #2]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f99a 	bl	8003140 <RTC_ByteToBcd2>
 8002e0c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002e0e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002e18:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f98c 	bl	8003140 <RTC_ByteToBcd2>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e2c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e023      	b.n	8002e88 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e60:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002e66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	78db      	ldrb	r3, [r3, #3]
 8002e6c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002e6e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e76:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	22ca      	movs	r2, #202	; 0xca
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2253      	movs	r2, #83	; 0x53
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eac:	d141      	bne.n	8002f32 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ebc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002ece:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	617a      	str	r2, [r7, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	22ff      	movs	r2, #255	; 0xff
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e077      	b.n	8002fe2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0e7      	beq.n	8002ed0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f1e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	e040      	b.n	8002fb4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f40:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002f52:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1e5a      	subs	r2, r3, #1
 8002f58:	617a      	str	r2, [r7, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	22ff      	movs	r2, #255	; 0xff
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e035      	b.n	8002fe2 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0e7      	beq.n	8002f54 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbe:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fca:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	10624dd3 	.word	0x10624dd3
 8002ff4:	40013c00 	.word	0x40013c00

08002ff8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f831 	bl	8003084 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003032:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8cb 	bl	80031ec <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003066:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RTC_AlarmIRQHandler+0x88>)
 800306a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800306e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	775a      	strb	r2, [r3, #29]
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40013c00 	.word	0x40013c00

08003084 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fd ff18 	bl	8000ee8 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80030ba:	e009      	b.n	80030d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80030bc:	f7fd ff14 	bl	8000ee8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ca:	d901      	bls.n	80030d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e007      	b.n	80030e0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f04f 32ff 	mov.w	r2, #4294967295
 800310a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800310c:	f7fd feec 	bl	8000ee8 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003112:	e009      	b.n	8003128 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003114:	f7fd fee8 	bl	8000ee8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003122:	d901      	bls.n	8003128 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e007      	b.n	8003138 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ee      	beq.n	8003114 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800314e:	e005      	b.n	800315c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	3b0a      	subs	r3, #10
 800315a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2b09      	cmp	r3, #9
 8003160:	d8f6      	bhi.n	8003150 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	b2da      	uxtb	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	4313      	orrs	r3, r2
 800316e:	b2db      	uxtb	r3, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	b2db      	uxtb	r3, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3350      	adds	r3, #80	; 0x50
 80031ce:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4413      	add	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	601a      	str	r2, [r3, #0]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e041      	b.n	8003296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fc76 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 fa96 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e04e      	b.n	8003356 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <HAL_TIM_Base_Start_IT+0xc4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d01d      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <HAL_TIM_Base_Start_IT+0xcc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_TIM_Base_Start_IT+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_TIM_Base_Start_IT+0xd4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_TIM_Base_Start_IT+0xd8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x80>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <HAL_TIM_Base_Start_IT+0xdc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d111      	bne.n	8003344 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d010      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	e007      	b.n	8003354 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40010400 	.word	0x40010400
 8003378:	40014000 	.word	0x40014000
 800337c:	40001800 	.word	0x40001800

08003380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0202 	mvn.w	r2, #2
 80033ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f9b5 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9a7 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f9b8 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0204 	mvn.w	r2, #4
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f98b 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f97d 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f98e 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b08      	cmp	r3, #8
 800343c:	d122      	bne.n	8003484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d11b      	bne.n	8003484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0208 	mvn.w	r2, #8
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2204      	movs	r2, #4
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f961 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f953 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f964 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b10      	cmp	r3, #16
 8003490:	d122      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	d11b      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0210 	mvn.w	r2, #16
 80034a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2208      	movs	r2, #8
 80034ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f937 	bl	8003732 <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f929 	bl	800371e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f93a 	bl	8003746 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10e      	bne.n	8003504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0201 	mvn.w	r2, #1
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fa96 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b80      	cmp	r3, #128	; 0x80
 8003510:	d10e      	bne.n	8003530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d107      	bne.n	8003530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fae0 	bl	8003af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d10e      	bne.n	800355c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d107      	bne.n	800355c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8ff 	bl	800375a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b20      	cmp	r3, #32
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0220 	mvn.w	r2, #32
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 faaa 	bl	8003adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIM_ConfigClockSource+0x1c>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0b4      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x186>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e4:	d03e      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0xd4>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ea:	f200 8087 	bhi.w	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	f000 8086 	beq.w	8003702 <HAL_TIM_ConfigClockSource+0x172>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d87f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b70      	cmp	r3, #112	; 0x70
 80035fe:	d01a      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xa6>
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d87b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b60      	cmp	r3, #96	; 0x60
 8003606:	d050      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x11a>
 8003608:	2b60      	cmp	r3, #96	; 0x60
 800360a:	d877      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b50      	cmp	r3, #80	; 0x50
 800360e:	d03c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0xfa>
 8003610:	2b50      	cmp	r3, #80	; 0x50
 8003612:	d873      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d058      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x13a>
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d86f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b30      	cmp	r3, #48	; 0x30
 800361e:	d064      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b30      	cmp	r3, #48	; 0x30
 8003622:	d86b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b20      	cmp	r3, #32
 8003626:	d060      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d867      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	2b10      	cmp	r3, #16
 8003632:	d05a      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003634:	e062      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f000 f9ad 	bl	80039a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	609a      	str	r2, [r3, #8]
      break;
 8003662:	e04f      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f000 f996 	bl	80039a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003686:	609a      	str	r2, [r3, #8]
      break;
 8003688:	e03c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	461a      	mov	r2, r3
 8003698:	f000 f90a 	bl	80038b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2150      	movs	r1, #80	; 0x50
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f963 	bl	800396e <TIM_ITRx_SetConfig>
      break;
 80036a8:	e02c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6859      	ldr	r1, [r3, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f000 f929 	bl	800390e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2160      	movs	r1, #96	; 0x60
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f953 	bl	800396e <TIM_ITRx_SetConfig>
      break;
 80036c8:	e01c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	461a      	mov	r2, r3
 80036d8:	f000 f8ea 	bl	80038b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2140      	movs	r1, #64	; 0x40
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f943 	bl	800396e <TIM_ITRx_SetConfig>
      break;
 80036e8:	e00c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 f93a 	bl	800396e <TIM_ITRx_SetConfig>
      break;
 80036fa:	e003      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003700:	e000      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a40      	ldr	r2, [pc, #256]	; (8003884 <TIM_Base_SetConfig+0x114>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d00f      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a3d      	ldr	r2, [pc, #244]	; (8003888 <TIM_Base_SetConfig+0x118>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3c      	ldr	r2, [pc, #240]	; (800388c <TIM_Base_SetConfig+0x11c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3b      	ldr	r2, [pc, #236]	; (8003890 <TIM_Base_SetConfig+0x120>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <TIM_Base_SetConfig+0x124>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <TIM_Base_SetConfig+0x114>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d027      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2c      	ldr	r2, [pc, #176]	; (8003888 <TIM_Base_SetConfig+0x118>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d023      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a2b      	ldr	r2, [pc, #172]	; (800388c <TIM_Base_SetConfig+0x11c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01f      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <TIM_Base_SetConfig+0x120>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a29      	ldr	r2, [pc, #164]	; (8003894 <TIM_Base_SetConfig+0x124>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d017      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a28      	ldr	r2, [pc, #160]	; (8003898 <TIM_Base_SetConfig+0x128>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a27      	ldr	r2, [pc, #156]	; (800389c <TIM_Base_SetConfig+0x12c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00f      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <TIM_Base_SetConfig+0x130>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <TIM_Base_SetConfig+0x134>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a24      	ldr	r2, [pc, #144]	; (80038a8 <TIM_Base_SetConfig+0x138>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a23      	ldr	r2, [pc, #140]	; (80038ac <TIM_Base_SetConfig+0x13c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d108      	bne.n	8003834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <TIM_Base_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_Base_SetConfig+0xf8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <TIM_Base_SetConfig+0x124>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d103      	bne.n	8003870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	615a      	str	r2, [r3, #20]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40010400 	.word	0x40010400
 8003898:	40014000 	.word	0x40014000
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800
 80038a4:	40001800 	.word	0x40001800
 80038a8:	40001c00 	.word	0x40001c00
 80038ac:	40002000 	.word	0x40002000

080038b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0201 	bic.w	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 030a 	bic.w	r3, r3, #10
 80038ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800390e:	b480      	push	{r7}
 8003910:	b087      	sub	sp, #28
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0210 	bic.w	r2, r3, #16
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800394a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	f043 0307 	orr.w	r3, r3, #7
 8003990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	021a      	lsls	r2, r3, #8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	609a      	str	r2, [r3, #8]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e05a      	b.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d01d      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d018      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10c      	bne.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40010400 	.word	0x40010400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800

08003adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e03f      	b.n	8003b96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd f81a 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fd7b 	bl	8004644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b08a      	sub	sp, #40	; 0x28
 8003ba2:	af02      	add	r7, sp, #8
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d17c      	bne.n	8003cb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_UART_Transmit+0x2c>
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e075      	b.n	8003cba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_UART_Transmit+0x3e>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e06e      	b.n	8003cba <HAL_UART_Transmit+0x11c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2221      	movs	r2, #33	; 0x21
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bf2:	f7fd f979 	bl	8000ee8 <HAL_GetTick>
 8003bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d108      	bne.n	8003c20 <HAL_UART_Transmit+0x82>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e003      	b.n	8003c28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c30:	e02a      	b.n	8003c88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 faf9 	bl	8004234 <UART_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e036      	b.n	8003cba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	3302      	adds	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e007      	b.n	8003c7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	781a      	ldrb	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	3301      	adds	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1cf      	bne.n	8003c32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2140      	movs	r1, #64	; 0x40
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fac9 	bl	8004234 <UART_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e006      	b.n	8003cba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b0ba      	sub	sp, #232	; 0xe8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_UART_IRQHandler+0x66>
 8003d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fbd3 	bl	80044ce <UART_Receive_IT>
      return;
 8003d28:	e256      	b.n	80041d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80de 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x22c>
 8003d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80d1 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_UART_IRQHandler+0xae>
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_UART_IRQHandler+0xd2>
 8003d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_UART_IRQHandler+0xf6>
 8003da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f043 0204 	orr.w	r2, r3, #4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d011      	beq.n	8003dea <HAL_UART_IRQHandler+0x126>
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f043 0208 	orr.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 81ed 	beq.w	80041ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_UART_IRQHandler+0x14e>
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fb5e 	bl	80044ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d103      	bne.n	8003e3e <HAL_UART_IRQHandler+0x17a>
 8003e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04f      	beq.n	8003ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa66 	bl	8004310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d141      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1d9      	bne.n	8003e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d013      	beq.n	8003ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	4a7d      	ldr	r2, [pc, #500]	; (80040a0 <HAL_UART_IRQHandler+0x3dc>)
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd f9c9 	bl	800124a <HAL_DMA_Abort_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e00e      	b.n	8003eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f99a 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e00a      	b.n	8003eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f996 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	e006      	b.n	8003eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f992 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003eea:	e170      	b.n	80041ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	bf00      	nop
    return;
 8003eee:	e16e      	b.n	80041ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	f040 814a 	bne.w	800418e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8143 	beq.w	800418e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 813c 	beq.w	800418e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	f040 80b4 	bne.w	80040a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8140 	beq.w	80041d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	f080 8139 	bcs.w	80041d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f72:	f000 8088 	beq.w	8004086 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1d9      	bne.n	8003f76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e1      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800400e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e3      	bne.n	8003ffe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004056:	f023 0310 	bic.w	r3, r3, #16
 800405a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004068:	65ba      	str	r2, [r7, #88]	; 0x58
 800406a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800406e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e3      	bne.n	8004044 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	4618      	mov	r0, r3
 8004082:	f7fd f872 	bl	800116a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800408e:	b29b      	uxth	r3, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	b29b      	uxth	r3, r3
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8c0 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800409c:	e099      	b.n	80041d2 <HAL_UART_IRQHandler+0x50e>
 800409e:	bf00      	nop
 80040a0:	080043d7 	.word	0x080043d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 808b 	beq.w	80041d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8086 	beq.w	80041d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040ee:	647a      	str	r2, [r7, #68]	; 0x44
 80040f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e3      	bne.n	80040ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	623b      	str	r3, [r7, #32]
   return(result);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004126:	633a      	str	r2, [r7, #48]	; 0x30
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e3      	bne.n	8004102 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	60fb      	str	r3, [r7, #12]
   return(result);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800416c:	61fa      	str	r2, [r7, #28]
 800416e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	617b      	str	r3, [r7, #20]
   return(result);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e3      	bne.n	8004148 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f848 	bl	800421c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800418c:	e023      	b.n	80041d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_UART_IRQHandler+0x4ea>
 800419a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f929 	bl	80043fe <UART_Transmit_IT>
    return;
 80041ac:	e014      	b.n	80041d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00e      	beq.n	80041d8 <HAL_UART_IRQHandler+0x514>
 80041ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f969 	bl	800449e <UART_EndTransmit_IT>
    return;
 80041cc:	e004      	b.n	80041d8 <HAL_UART_IRQHandler+0x514>
    return;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <HAL_UART_IRQHandler+0x514>
      return;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <HAL_UART_IRQHandler+0x514>
      return;
 80041d6:	bf00      	nop
  }
}
 80041d8:	37e8      	adds	r7, #232	; 0xe8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop

080041e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b090      	sub	sp, #64	; 0x40
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004244:	e050      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d04c      	beq.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <UART_WaitOnFlagUntilTimeout+0x30>
 8004254:	f7fc fe48 	bl	8000ee8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004260:	429a      	cmp	r2, r3
 8004262:	d241      	bcs.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004284:	637a      	str	r2, [r7, #52]	; 0x34
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	613b      	str	r3, [r7, #16]
   return(result);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042b8:	623a      	str	r2, [r7, #32]
 80042ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	69f9      	ldr	r1, [r7, #28]
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e5      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e00f      	b.n	8004308 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	429a      	cmp	r2, r3
 8004304:	d09f      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3740      	adds	r7, #64	; 0x40
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004310:	b480      	push	{r7}
 8004312:	b095      	sub	sp, #84	; 0x54
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004338:	643a      	str	r2, [r7, #64]	; 0x40
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800433e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	61fb      	str	r3, [r7, #28]
   return(result);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	64bb      	str	r3, [r7, #72]	; 0x48
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3314      	adds	r3, #20
 800436a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800436c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	2b01      	cmp	r3, #1
 8004386:	d119      	bne.n	80043bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	60bb      	str	r3, [r7, #8]
   return(result);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f023 0310 	bic.w	r3, r3, #16
 800439e:	647b      	str	r3, [r7, #68]	; 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043a8:	61ba      	str	r2, [r7, #24]
 80043aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6979      	ldr	r1, [r7, #20]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	613b      	str	r3, [r7, #16]
   return(result);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043ca:	bf00      	nop
 80043cc:	3754      	adds	r7, #84	; 0x54
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff ff09 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b21      	cmp	r3, #33	; 0x21
 8004410:	d13e      	bne.n	8004490 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441a:	d114      	bne.n	8004446 <UART_Transmit_IT+0x48>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d110      	bne.n	8004446 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004438:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]
 8004444:	e008      	b.n	8004458 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	1c59      	adds	r1, r3, #1
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6211      	str	r1, [r2, #32]
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29b      	uxth	r3, r3
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4619      	mov	r1, r3
 8004466:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10f      	bne.n	800448c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800447a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fe8e 	bl	80041e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b08c      	sub	sp, #48	; 0x30
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b22      	cmp	r3, #34	; 0x22
 80044e0:	f040 80ab 	bne.w	800463a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d117      	bne.n	800451e <UART_Receive_IT+0x50>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d113      	bne.n	800451e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450c:	b29a      	uxth	r2, r3
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	1c9a      	adds	r2, r3, #2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
 800451c:	e026      	b.n	800456c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004530:	d007      	beq.n	8004542 <UART_Receive_IT+0x74>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <UART_Receive_IT+0x82>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e008      	b.n	8004562 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800455c:	b2da      	uxtb	r2, r3
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4619      	mov	r1, r3
 800457a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800457c:	2b00      	cmp	r3, #0
 800457e:	d15a      	bne.n	8004636 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0220 	bic.w	r2, r2, #32
 800458e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d135      	bne.n	800462c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	613b      	str	r3, [r7, #16]
   return(result);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f023 0310 	bic.w	r3, r3, #16
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e6:	623a      	str	r2, [r7, #32]
 80045e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	69f9      	ldr	r1, [r7, #28]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b10      	cmp	r3, #16
 8004606:	d10a      	bne.n	800461e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fdf9 	bl	800421c <HAL_UARTEx_RxEventCallback>
 800462a:	e002      	b.n	8004632 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fde1 	bl	80041f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e002      	b.n	800463c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800463a:	2302      	movs	r3, #2
  }
}
 800463c:	4618      	mov	r0, r3
 800463e:	3730      	adds	r7, #48	; 0x30
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004648:	b0c0      	sub	sp, #256	; 0x100
 800464a:	af00      	add	r7, sp, #0
 800464c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	68d9      	ldr	r1, [r3, #12]
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	ea40 0301 	orr.w	r3, r0, r1
 800466c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	431a      	orrs	r2, r3
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	431a      	orrs	r2, r3
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800469c:	f021 010c 	bic.w	r1, r1, #12
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046aa:	430b      	orrs	r3, r1
 80046ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046be:	6999      	ldr	r1, [r3, #24]
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	ea40 0301 	orr.w	r3, r0, r1
 80046ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b8f      	ldr	r3, [pc, #572]	; (8004910 <UART_SetConfig+0x2cc>)
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d005      	beq.n	80046e4 <UART_SetConfig+0xa0>
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <UART_SetConfig+0x2d0>)
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d104      	bne.n	80046ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046e4:	f7fd f8a2 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 80046e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046ec:	e003      	b.n	80046f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ee:	f7fd f889 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 80046f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004700:	f040 810c 	bne.w	800491c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800470e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004712:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004716:	4622      	mov	r2, r4
 8004718:	462b      	mov	r3, r5
 800471a:	1891      	adds	r1, r2, r2
 800471c:	65b9      	str	r1, [r7, #88]	; 0x58
 800471e:	415b      	adcs	r3, r3
 8004720:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004722:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004726:	4621      	mov	r1, r4
 8004728:	eb12 0801 	adds.w	r8, r2, r1
 800472c:	4629      	mov	r1, r5
 800472e:	eb43 0901 	adc.w	r9, r3, r1
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004746:	4690      	mov	r8, r2
 8004748:	4699      	mov	r9, r3
 800474a:	4623      	mov	r3, r4
 800474c:	eb18 0303 	adds.w	r3, r8, r3
 8004750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004754:	462b      	mov	r3, r5
 8004756:	eb49 0303 	adc.w	r3, r9, r3
 800475a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800476a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800476e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004772:	460b      	mov	r3, r1
 8004774:	18db      	adds	r3, r3, r3
 8004776:	653b      	str	r3, [r7, #80]	; 0x50
 8004778:	4613      	mov	r3, r2
 800477a:	eb42 0303 	adc.w	r3, r2, r3
 800477e:	657b      	str	r3, [r7, #84]	; 0x54
 8004780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004784:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004788:	f7fb fd92 	bl	80002b0 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4b61      	ldr	r3, [pc, #388]	; (8004918 <UART_SetConfig+0x2d4>)
 8004792:	fba3 2302 	umull	r2, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	011c      	lsls	r4, r3, #4
 800479a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	1891      	adds	r1, r2, r2
 80047b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80047b4:	415b      	adcs	r3, r3
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047bc:	4641      	mov	r1, r8
 80047be:	eb12 0a01 	adds.w	sl, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0b01 	adc.w	fp, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047dc:	4692      	mov	sl, r2
 80047de:	469b      	mov	fp, r3
 80047e0:	4643      	mov	r3, r8
 80047e2:	eb1a 0303 	adds.w	r3, sl, r3
 80047e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ea:	464b      	mov	r3, r9
 80047ec:	eb4b 0303 	adc.w	r3, fp, r3
 80047f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004800:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004804:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004808:	460b      	mov	r3, r1
 800480a:	18db      	adds	r3, r3, r3
 800480c:	643b      	str	r3, [r7, #64]	; 0x40
 800480e:	4613      	mov	r3, r2
 8004810:	eb42 0303 	adc.w	r3, r2, r3
 8004814:	647b      	str	r3, [r7, #68]	; 0x44
 8004816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800481a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800481e:	f7fb fd47 	bl	80002b0 <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4611      	mov	r1, r2
 8004828:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <UART_SetConfig+0x2d4>)
 800482a:	fba3 2301 	umull	r2, r3, r3, r1
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2264      	movs	r2, #100	; 0x64
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	1acb      	subs	r3, r1, r3
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <UART_SetConfig+0x2d4>)
 8004840:	fba3 2302 	umull	r2, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800484c:	441c      	add	r4, r3
 800484e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004858:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800485c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	1891      	adds	r1, r2, r2
 8004866:	63b9      	str	r1, [r7, #56]	; 0x38
 8004868:	415b      	adcs	r3, r3
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004870:	4641      	mov	r1, r8
 8004872:	1851      	adds	r1, r2, r1
 8004874:	6339      	str	r1, [r7, #48]	; 0x30
 8004876:	4649      	mov	r1, r9
 8004878:	414b      	adcs	r3, r1
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004888:	4659      	mov	r1, fp
 800488a:	00cb      	lsls	r3, r1, #3
 800488c:	4651      	mov	r1, sl
 800488e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004892:	4651      	mov	r1, sl
 8004894:	00ca      	lsls	r2, r1, #3
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	4603      	mov	r3, r0
 800489c:	4642      	mov	r2, r8
 800489e:	189b      	adds	r3, r3, r2
 80048a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048a4:	464b      	mov	r3, r9
 80048a6:	460a      	mov	r2, r1
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048c4:	460b      	mov	r3, r1
 80048c6:	18db      	adds	r3, r3, r3
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ca:	4613      	mov	r3, r2
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048da:	f7fb fce9 	bl	80002b0 <__aeabi_uldivmod>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <UART_SetConfig+0x2d4>)
 80048e4:	fba3 1302 	umull	r1, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	2164      	movs	r1, #100	; 0x64
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	3332      	adds	r3, #50	; 0x32
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <UART_SetConfig+0x2d4>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	f003 0207 	and.w	r2, r3, #7
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4422      	add	r2, r4
 800490a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800490c:	e105      	b.n	8004b1a <UART_SetConfig+0x4d6>
 800490e:	bf00      	nop
 8004910:	40011000 	.word	0x40011000
 8004914:	40011400 	.word	0x40011400
 8004918:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800491c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004920:	2200      	movs	r2, #0
 8004922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004926:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800492a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800492e:	4642      	mov	r2, r8
 8004930:	464b      	mov	r3, r9
 8004932:	1891      	adds	r1, r2, r2
 8004934:	6239      	str	r1, [r7, #32]
 8004936:	415b      	adcs	r3, r3
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
 800493a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800493e:	4641      	mov	r1, r8
 8004940:	1854      	adds	r4, r2, r1
 8004942:	4649      	mov	r1, r9
 8004944:	eb43 0501 	adc.w	r5, r3, r1
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	00eb      	lsls	r3, r5, #3
 8004952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004956:	00e2      	lsls	r2, r4, #3
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	4643      	mov	r3, r8
 800495e:	18e3      	adds	r3, r4, r3
 8004960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004964:	464b      	mov	r3, r9
 8004966:	eb45 0303 	adc.w	r3, r5, r3
 800496a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800497a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800498a:	4629      	mov	r1, r5
 800498c:	008b      	lsls	r3, r1, #2
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004994:	4621      	mov	r1, r4
 8004996:	008a      	lsls	r2, r1, #2
 8004998:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800499c:	f7fb fc88 	bl	80002b0 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4b60      	ldr	r3, [pc, #384]	; (8004b28 <UART_SetConfig+0x4e4>)
 80049a6:	fba3 2302 	umull	r2, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	011c      	lsls	r4, r3, #4
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	61b9      	str	r1, [r7, #24]
 80049c8:	415b      	adcs	r3, r3
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d0:	4641      	mov	r1, r8
 80049d2:	1851      	adds	r1, r2, r1
 80049d4:	6139      	str	r1, [r7, #16]
 80049d6:	4649      	mov	r1, r9
 80049d8:	414b      	adcs	r3, r1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e8:	4659      	mov	r1, fp
 80049ea:	00cb      	lsls	r3, r1, #3
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f2:	4651      	mov	r1, sl
 80049f4:	00ca      	lsls	r2, r1, #3
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	4642      	mov	r2, r8
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a04:	464b      	mov	r3, r9
 8004a06:	460a      	mov	r2, r1
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a28:	4649      	mov	r1, r9
 8004a2a:	008b      	lsls	r3, r1, #2
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a32:	4641      	mov	r1, r8
 8004a34:	008a      	lsls	r2, r1, #2
 8004a36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a3a:	f7fb fc39 	bl	80002b0 <__aeabi_uldivmod>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <UART_SetConfig+0x4e4>)
 8004a44:	fba3 1302 	umull	r1, r3, r3, r2
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2164      	movs	r1, #100	; 0x64
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <UART_SetConfig+0x4e4>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a62:	441c      	add	r4, r3
 8004a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a68:	2200      	movs	r2, #0
 8004a6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a6c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a72:	4642      	mov	r2, r8
 8004a74:	464b      	mov	r3, r9
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a82:	4641      	mov	r1, r8
 8004a84:	1851      	adds	r1, r2, r1
 8004a86:	6039      	str	r1, [r7, #0]
 8004a88:	4649      	mov	r1, r9
 8004a8a:	414b      	adcs	r3, r1
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a9a:	4659      	mov	r1, fp
 8004a9c:	00cb      	lsls	r3, r1, #3
 8004a9e:	4651      	mov	r1, sl
 8004aa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	00ca      	lsls	r2, r1, #3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4603      	mov	r3, r0
 8004aae:	4642      	mov	r2, r8
 8004ab0:	189b      	adds	r3, r3, r2
 8004ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	eb42 0303 	adc.w	r3, r2, r3
 8004abc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac8:	667a      	str	r2, [r7, #100]	; 0x64
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	008b      	lsls	r3, r1, #2
 8004ada:	4641      	mov	r1, r8
 8004adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	008a      	lsls	r2, r1, #2
 8004ae4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ae8:	f7fb fbe2 	bl	80002b0 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <UART_SetConfig+0x4e4>)
 8004af2:	fba3 1302 	umull	r1, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2164      	movs	r1, #100	; 0x64
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	3332      	adds	r3, #50	; 0x32
 8004b04:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <UART_SetConfig+0x4e4>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	f003 020f 	and.w	r2, r3, #15
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4422      	add	r2, r4
 8004b18:	609a      	str	r2, [r3, #8]
}
 8004b1a:	bf00      	nop
 8004b1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b20:	46bd      	mov	sp, r7
 8004b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b26:	bf00      	nop
 8004b28:	51eb851f 	.word	0x51eb851f

08004b2c <__errno>:
 8004b2c:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <__errno+0x8>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4d0d      	ldr	r5, [pc, #52]	; (8004b70 <__libc_init_array+0x38>)
 8004b3c:	4c0d      	ldr	r4, [pc, #52]	; (8004b74 <__libc_init_array+0x3c>)
 8004b3e:	1b64      	subs	r4, r4, r5
 8004b40:	10a4      	asrs	r4, r4, #2
 8004b42:	2600      	movs	r6, #0
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	4d0b      	ldr	r5, [pc, #44]	; (8004b78 <__libc_init_array+0x40>)
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	; (8004b7c <__libc_init_array+0x44>)
 8004b4c:	f000 ffae 	bl	8005aac <_init>
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	2600      	movs	r6, #0
 8004b56:	42a6      	cmp	r6, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b60:	4798      	blx	r3
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6a:	4798      	blx	r3
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	08005ba4 	.word	0x08005ba4
 8004b74:	08005ba4 	.word	0x08005ba4
 8004b78:	08005ba4 	.word	0x08005ba4
 8004b7c:	08005ba8 	.word	0x08005ba8

08004b80 <memset>:
 8004b80:	4402      	add	r2, r0
 8004b82:	4603      	mov	r3, r0
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d100      	bne.n	8004b8a <memset+0xa>
 8004b88:	4770      	bx	lr
 8004b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8e:	e7f9      	b.n	8004b84 <memset+0x4>

08004b90 <iprintf>:
 8004b90:	b40f      	push	{r0, r1, r2, r3}
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <iprintf+0x2c>)
 8004b94:	b513      	push	{r0, r1, r4, lr}
 8004b96:	681c      	ldr	r4, [r3, #0]
 8004b98:	b124      	cbz	r4, 8004ba4 <iprintf+0x14>
 8004b9a:	69a3      	ldr	r3, [r4, #24]
 8004b9c:	b913      	cbnz	r3, 8004ba4 <iprintf+0x14>
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 f866 	bl	8004c70 <__sinit>
 8004ba4:	ab05      	add	r3, sp, #20
 8004ba6:	9a04      	ldr	r2, [sp, #16]
 8004ba8:	68a1      	ldr	r1, [r4, #8]
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	4620      	mov	r0, r4
 8004bae:	f000 f9bd 	bl	8004f2c <_vfiprintf_r>
 8004bb2:	b002      	add	sp, #8
 8004bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb8:	b004      	add	sp, #16
 8004bba:	4770      	bx	lr
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <std>:
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bce:	6083      	str	r3, [r0, #8]
 8004bd0:	8181      	strh	r1, [r0, #12]
 8004bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8004bd4:	81c2      	strh	r2, [r0, #14]
 8004bd6:	6183      	str	r3, [r0, #24]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	2208      	movs	r2, #8
 8004bdc:	305c      	adds	r0, #92	; 0x5c
 8004bde:	f7ff ffcf 	bl	8004b80 <memset>
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <std+0x38>)
 8004be4:	6263      	str	r3, [r4, #36]	; 0x24
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <std+0x3c>)
 8004be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <std+0x40>)
 8004bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <std+0x44>)
 8004bf0:	6224      	str	r4, [r4, #32]
 8004bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	bf00      	nop
 8004bf8:	080054d5 	.word	0x080054d5
 8004bfc:	080054f7 	.word	0x080054f7
 8004c00:	0800552f 	.word	0x0800552f
 8004c04:	08005553 	.word	0x08005553

08004c08 <_cleanup_r>:
 8004c08:	4901      	ldr	r1, [pc, #4]	; (8004c10 <_cleanup_r+0x8>)
 8004c0a:	f000 b8af 	b.w	8004d6c <_fwalk_reent>
 8004c0e:	bf00      	nop
 8004c10:	0800582d 	.word	0x0800582d

08004c14 <__sfmoreglue>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	2268      	movs	r2, #104	; 0x68
 8004c18:	1e4d      	subs	r5, r1, #1
 8004c1a:	4355      	muls	r5, r2
 8004c1c:	460e      	mov	r6, r1
 8004c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c22:	f000 f8e5 	bl	8004df0 <_malloc_r>
 8004c26:	4604      	mov	r4, r0
 8004c28:	b140      	cbz	r0, 8004c3c <__sfmoreglue+0x28>
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c30:	300c      	adds	r0, #12
 8004c32:	60a0      	str	r0, [r4, #8]
 8004c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c38:	f7ff ffa2 	bl	8004b80 <memset>
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}

08004c40 <__sfp_lock_acquire>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sfp_lock_acquire+0x8>)
 8004c42:	f000 b8b3 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	20000159 	.word	0x20000159

08004c4c <__sfp_lock_release>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sfp_lock_release+0x8>)
 8004c4e:	f000 b8ae 	b.w	8004dae <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	20000159 	.word	0x20000159

08004c58 <__sinit_lock_acquire>:
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <__sinit_lock_acquire+0x8>)
 8004c5a:	f000 b8a7 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8004c5e:	bf00      	nop
 8004c60:	2000015a 	.word	0x2000015a

08004c64 <__sinit_lock_release>:
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <__sinit_lock_release+0x8>)
 8004c66:	f000 b8a2 	b.w	8004dae <__retarget_lock_release_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	2000015a 	.word	0x2000015a

08004c70 <__sinit>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4604      	mov	r4, r0
 8004c74:	f7ff fff0 	bl	8004c58 <__sinit_lock_acquire>
 8004c78:	69a3      	ldr	r3, [r4, #24]
 8004c7a:	b11b      	cbz	r3, 8004c84 <__sinit+0x14>
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c80:	f7ff bff0 	b.w	8004c64 <__sinit_lock_release>
 8004c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c88:	6523      	str	r3, [r4, #80]	; 0x50
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <__sinit+0x68>)
 8004c8c:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <__sinit+0x6c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	bf04      	itt	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	61a3      	streq	r3, [r4, #24]
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f000 f820 	bl	8004ce0 <__sfp>
 8004ca0:	6060      	str	r0, [r4, #4]
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 f81c 	bl	8004ce0 <__sfp>
 8004ca8:	60a0      	str	r0, [r4, #8]
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 f818 	bl	8004ce0 <__sfp>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	60e0      	str	r0, [r4, #12]
 8004cb4:	2104      	movs	r1, #4
 8004cb6:	6860      	ldr	r0, [r4, #4]
 8004cb8:	f7ff ff82 	bl	8004bc0 <std>
 8004cbc:	68a0      	ldr	r0, [r4, #8]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2109      	movs	r1, #9
 8004cc2:	f7ff ff7d 	bl	8004bc0 <std>
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2112      	movs	r1, #18
 8004ccc:	f7ff ff78 	bl	8004bc0 <std>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	61a3      	str	r3, [r4, #24]
 8004cd4:	e7d2      	b.n	8004c7c <__sinit+0xc>
 8004cd6:	bf00      	nop
 8004cd8:	08005b04 	.word	0x08005b04
 8004cdc:	08004c09 	.word	0x08004c09

08004ce0 <__sfp>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	f7ff ffac 	bl	8004c40 <__sfp_lock_acquire>
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <__sfp+0x84>)
 8004cea:	681e      	ldr	r6, [r3, #0]
 8004cec:	69b3      	ldr	r3, [r6, #24]
 8004cee:	b913      	cbnz	r3, 8004cf6 <__sfp+0x16>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff ffbd 	bl	8004c70 <__sinit>
 8004cf6:	3648      	adds	r6, #72	; 0x48
 8004cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	d503      	bpl.n	8004d08 <__sfp+0x28>
 8004d00:	6833      	ldr	r3, [r6, #0]
 8004d02:	b30b      	cbz	r3, 8004d48 <__sfp+0x68>
 8004d04:	6836      	ldr	r6, [r6, #0]
 8004d06:	e7f7      	b.n	8004cf8 <__sfp+0x18>
 8004d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d0c:	b9d5      	cbnz	r5, 8004d44 <__sfp+0x64>
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <__sfp+0x88>)
 8004d10:	60e3      	str	r3, [r4, #12]
 8004d12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d16:	6665      	str	r5, [r4, #100]	; 0x64
 8004d18:	f000 f847 	bl	8004daa <__retarget_lock_init_recursive>
 8004d1c:	f7ff ff96 	bl	8004c4c <__sfp_lock_release>
 8004d20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d28:	6025      	str	r5, [r4, #0]
 8004d2a:	61a5      	str	r5, [r4, #24]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	4629      	mov	r1, r5
 8004d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d34:	f7ff ff24 	bl	8004b80 <memset>
 8004d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d40:	4620      	mov	r0, r4
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	3468      	adds	r4, #104	; 0x68
 8004d46:	e7d9      	b.n	8004cfc <__sfp+0x1c>
 8004d48:	2104      	movs	r1, #4
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f7ff ff62 	bl	8004c14 <__sfmoreglue>
 8004d50:	4604      	mov	r4, r0
 8004d52:	6030      	str	r0, [r6, #0]
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d1d5      	bne.n	8004d04 <__sfp+0x24>
 8004d58:	f7ff ff78 	bl	8004c4c <__sfp_lock_release>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	e7ee      	b.n	8004d40 <__sfp+0x60>
 8004d62:	bf00      	nop
 8004d64:	08005b04 	.word	0x08005b04
 8004d68:	ffff0001 	.word	0xffff0001

08004d6c <_fwalk_reent>:
 8004d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d70:	4606      	mov	r6, r0
 8004d72:	4688      	mov	r8, r1
 8004d74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d78:	2700      	movs	r7, #0
 8004d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8004d82:	d505      	bpl.n	8004d90 <_fwalk_reent+0x24>
 8004d84:	6824      	ldr	r4, [r4, #0]
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	d1f7      	bne.n	8004d7a <_fwalk_reent+0xe>
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d90:	89ab      	ldrh	r3, [r5, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d907      	bls.n	8004da6 <_fwalk_reent+0x3a>
 8004d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	d003      	beq.n	8004da6 <_fwalk_reent+0x3a>
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4630      	mov	r0, r6
 8004da2:	47c0      	blx	r8
 8004da4:	4307      	orrs	r7, r0
 8004da6:	3568      	adds	r5, #104	; 0x68
 8004da8:	e7e9      	b.n	8004d7e <_fwalk_reent+0x12>

08004daa <__retarget_lock_init_recursive>:
 8004daa:	4770      	bx	lr

08004dac <__retarget_lock_acquire_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_release_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <sbrk_aligned>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4e0e      	ldr	r6, [pc, #56]	; (8004dec <sbrk_aligned+0x3c>)
 8004db4:	460c      	mov	r4, r1
 8004db6:	6831      	ldr	r1, [r6, #0]
 8004db8:	4605      	mov	r5, r0
 8004dba:	b911      	cbnz	r1, 8004dc2 <sbrk_aligned+0x12>
 8004dbc:	f000 fb7a 	bl	80054b4 <_sbrk_r>
 8004dc0:	6030      	str	r0, [r6, #0]
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fb75 	bl	80054b4 <_sbrk_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	d00a      	beq.n	8004de4 <sbrk_aligned+0x34>
 8004dce:	1cc4      	adds	r4, r0, #3
 8004dd0:	f024 0403 	bic.w	r4, r4, #3
 8004dd4:	42a0      	cmp	r0, r4
 8004dd6:	d007      	beq.n	8004de8 <sbrk_aligned+0x38>
 8004dd8:	1a21      	subs	r1, r4, r0
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 fb6a 	bl	80054b4 <_sbrk_r>
 8004de0:	3001      	adds	r0, #1
 8004de2:	d101      	bne.n	8004de8 <sbrk_aligned+0x38>
 8004de4:	f04f 34ff 	mov.w	r4, #4294967295
 8004de8:	4620      	mov	r0, r4
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	20000160 	.word	0x20000160

08004df0 <_malloc_r>:
 8004df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df4:	1ccd      	adds	r5, r1, #3
 8004df6:	f025 0503 	bic.w	r5, r5, #3
 8004dfa:	3508      	adds	r5, #8
 8004dfc:	2d0c      	cmp	r5, #12
 8004dfe:	bf38      	it	cc
 8004e00:	250c      	movcc	r5, #12
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	4607      	mov	r7, r0
 8004e06:	db01      	blt.n	8004e0c <_malloc_r+0x1c>
 8004e08:	42a9      	cmp	r1, r5
 8004e0a:	d905      	bls.n	8004e18 <_malloc_r+0x28>
 8004e0c:	230c      	movs	r3, #12
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	2600      	movs	r6, #0
 8004e12:	4630      	mov	r0, r6
 8004e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e18:	4e2e      	ldr	r6, [pc, #184]	; (8004ed4 <_malloc_r+0xe4>)
 8004e1a:	f000 fdbb 	bl	8005994 <__malloc_lock>
 8004e1e:	6833      	ldr	r3, [r6, #0]
 8004e20:	461c      	mov	r4, r3
 8004e22:	bb34      	cbnz	r4, 8004e72 <_malloc_r+0x82>
 8004e24:	4629      	mov	r1, r5
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff ffc2 	bl	8004db0 <sbrk_aligned>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	4604      	mov	r4, r0
 8004e30:	d14d      	bne.n	8004ece <_malloc_r+0xde>
 8004e32:	6834      	ldr	r4, [r6, #0]
 8004e34:	4626      	mov	r6, r4
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	d140      	bne.n	8004ebc <_malloc_r+0xcc>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4638      	mov	r0, r7
 8004e40:	eb04 0803 	add.w	r8, r4, r3
 8004e44:	f000 fb36 	bl	80054b4 <_sbrk_r>
 8004e48:	4580      	cmp	r8, r0
 8004e4a:	d13a      	bne.n	8004ec2 <_malloc_r+0xd2>
 8004e4c:	6821      	ldr	r1, [r4, #0]
 8004e4e:	3503      	adds	r5, #3
 8004e50:	1a6d      	subs	r5, r5, r1
 8004e52:	f025 0503 	bic.w	r5, r5, #3
 8004e56:	3508      	adds	r5, #8
 8004e58:	2d0c      	cmp	r5, #12
 8004e5a:	bf38      	it	cc
 8004e5c:	250c      	movcc	r5, #12
 8004e5e:	4629      	mov	r1, r5
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7ff ffa5 	bl	8004db0 <sbrk_aligned>
 8004e66:	3001      	adds	r0, #1
 8004e68:	d02b      	beq.n	8004ec2 <_malloc_r+0xd2>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	442b      	add	r3, r5
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	e00e      	b.n	8004e90 <_malloc_r+0xa0>
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	1b52      	subs	r2, r2, r5
 8004e76:	d41e      	bmi.n	8004eb6 <_malloc_r+0xc6>
 8004e78:	2a0b      	cmp	r2, #11
 8004e7a:	d916      	bls.n	8004eaa <_malloc_r+0xba>
 8004e7c:	1961      	adds	r1, r4, r5
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	6025      	str	r5, [r4, #0]
 8004e82:	bf18      	it	ne
 8004e84:	6059      	strne	r1, [r3, #4]
 8004e86:	6863      	ldr	r3, [r4, #4]
 8004e88:	bf08      	it	eq
 8004e8a:	6031      	streq	r1, [r6, #0]
 8004e8c:	5162      	str	r2, [r4, r5]
 8004e8e:	604b      	str	r3, [r1, #4]
 8004e90:	4638      	mov	r0, r7
 8004e92:	f104 060b 	add.w	r6, r4, #11
 8004e96:	f000 fd83 	bl	80059a0 <__malloc_unlock>
 8004e9a:	f026 0607 	bic.w	r6, r6, #7
 8004e9e:	1d23      	adds	r3, r4, #4
 8004ea0:	1af2      	subs	r2, r6, r3
 8004ea2:	d0b6      	beq.n	8004e12 <_malloc_r+0x22>
 8004ea4:	1b9b      	subs	r3, r3, r6
 8004ea6:	50a3      	str	r3, [r4, r2]
 8004ea8:	e7b3      	b.n	8004e12 <_malloc_r+0x22>
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	bf0c      	ite	eq
 8004eb0:	6032      	streq	r2, [r6, #0]
 8004eb2:	605a      	strne	r2, [r3, #4]
 8004eb4:	e7ec      	b.n	8004e90 <_malloc_r+0xa0>
 8004eb6:	4623      	mov	r3, r4
 8004eb8:	6864      	ldr	r4, [r4, #4]
 8004eba:	e7b2      	b.n	8004e22 <_malloc_r+0x32>
 8004ebc:	4634      	mov	r4, r6
 8004ebe:	6876      	ldr	r6, [r6, #4]
 8004ec0:	e7b9      	b.n	8004e36 <_malloc_r+0x46>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f000 fd6a 	bl	80059a0 <__malloc_unlock>
 8004ecc:	e7a1      	b.n	8004e12 <_malloc_r+0x22>
 8004ece:	6025      	str	r5, [r4, #0]
 8004ed0:	e7de      	b.n	8004e90 <_malloc_r+0xa0>
 8004ed2:	bf00      	nop
 8004ed4:	2000015c 	.word	0x2000015c

08004ed8 <__sfputc_r>:
 8004ed8:	6893      	ldr	r3, [r2, #8]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	b410      	push	{r4}
 8004ee0:	6093      	str	r3, [r2, #8]
 8004ee2:	da08      	bge.n	8004ef6 <__sfputc_r+0x1e>
 8004ee4:	6994      	ldr	r4, [r2, #24]
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	db01      	blt.n	8004eee <__sfputc_r+0x16>
 8004eea:	290a      	cmp	r1, #10
 8004eec:	d103      	bne.n	8004ef6 <__sfputc_r+0x1e>
 8004eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef2:	f000 bb33 	b.w	800555c <__swbuf_r>
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	1c58      	adds	r0, r3, #1
 8004efa:	6010      	str	r0, [r2, #0]
 8004efc:	7019      	strb	r1, [r3, #0]
 8004efe:	4608      	mov	r0, r1
 8004f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <__sfputs_r>:
 8004f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f08:	4606      	mov	r6, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	18d5      	adds	r5, r2, r3
 8004f10:	42ac      	cmp	r4, r5
 8004f12:	d101      	bne.n	8004f18 <__sfputs_r+0x12>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e007      	b.n	8004f28 <__sfputs_r+0x22>
 8004f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff ffda 	bl	8004ed8 <__sfputc_r>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d1f3      	bne.n	8004f10 <__sfputs_r+0xa>
 8004f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f2c <_vfiprintf_r>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	460d      	mov	r5, r1
 8004f32:	b09d      	sub	sp, #116	; 0x74
 8004f34:	4614      	mov	r4, r2
 8004f36:	4698      	mov	r8, r3
 8004f38:	4606      	mov	r6, r0
 8004f3a:	b118      	cbz	r0, 8004f44 <_vfiprintf_r+0x18>
 8004f3c:	6983      	ldr	r3, [r0, #24]
 8004f3e:	b90b      	cbnz	r3, 8004f44 <_vfiprintf_r+0x18>
 8004f40:	f7ff fe96 	bl	8004c70 <__sinit>
 8004f44:	4b89      	ldr	r3, [pc, #548]	; (800516c <_vfiprintf_r+0x240>)
 8004f46:	429d      	cmp	r5, r3
 8004f48:	d11b      	bne.n	8004f82 <_vfiprintf_r+0x56>
 8004f4a:	6875      	ldr	r5, [r6, #4]
 8004f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f4e:	07d9      	lsls	r1, r3, #31
 8004f50:	d405      	bmi.n	8004f5e <_vfiprintf_r+0x32>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	059a      	lsls	r2, r3, #22
 8004f56:	d402      	bmi.n	8004f5e <_vfiprintf_r+0x32>
 8004f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f5a:	f7ff ff27 	bl	8004dac <__retarget_lock_acquire_recursive>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	d501      	bpl.n	8004f68 <_vfiprintf_r+0x3c>
 8004f64:	692b      	ldr	r3, [r5, #16]
 8004f66:	b9eb      	cbnz	r3, 8004fa4 <_vfiprintf_r+0x78>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f000 fb5a 	bl	8005624 <__swsetup_r>
 8004f70:	b1c0      	cbz	r0, 8004fa4 <_vfiprintf_r+0x78>
 8004f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f74:	07dc      	lsls	r4, r3, #31
 8004f76:	d50e      	bpl.n	8004f96 <_vfiprintf_r+0x6a>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	b01d      	add	sp, #116	; 0x74
 8004f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f82:	4b7b      	ldr	r3, [pc, #492]	; (8005170 <_vfiprintf_r+0x244>)
 8004f84:	429d      	cmp	r5, r3
 8004f86:	d101      	bne.n	8004f8c <_vfiprintf_r+0x60>
 8004f88:	68b5      	ldr	r5, [r6, #8]
 8004f8a:	e7df      	b.n	8004f4c <_vfiprintf_r+0x20>
 8004f8c:	4b79      	ldr	r3, [pc, #484]	; (8005174 <_vfiprintf_r+0x248>)
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	bf08      	it	eq
 8004f92:	68f5      	ldreq	r5, [r6, #12]
 8004f94:	e7da      	b.n	8004f4c <_vfiprintf_r+0x20>
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	0598      	lsls	r0, r3, #22
 8004f9a:	d4ed      	bmi.n	8004f78 <_vfiprintf_r+0x4c>
 8004f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f9e:	f7ff ff06 	bl	8004dae <__retarget_lock_release_recursive>
 8004fa2:	e7e9      	b.n	8004f78 <_vfiprintf_r+0x4c>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa8:	2320      	movs	r3, #32
 8004faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb2:	2330      	movs	r3, #48	; 0x30
 8004fb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005178 <_vfiprintf_r+0x24c>
 8004fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fbc:	f04f 0901 	mov.w	r9, #1
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	469a      	mov	sl, r3
 8004fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fc8:	b10a      	cbz	r2, 8004fce <_vfiprintf_r+0xa2>
 8004fca:	2a25      	cmp	r2, #37	; 0x25
 8004fcc:	d1f9      	bne.n	8004fc2 <_vfiprintf_r+0x96>
 8004fce:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd2:	d00b      	beq.n	8004fec <_vfiprintf_r+0xc0>
 8004fd4:	465b      	mov	r3, fp
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f7ff ff93 	bl	8004f06 <__sfputs_r>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f000 80aa 	beq.w	800513a <_vfiprintf_r+0x20e>
 8004fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fe8:	445a      	add	r2, fp
 8004fea:	9209      	str	r2, [sp, #36]	; 0x24
 8004fec:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a2 	beq.w	800513a <_vfiprintf_r+0x20e>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005000:	f10a 0a01 	add.w	sl, sl, #1
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	9307      	str	r3, [sp, #28]
 8005008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800500c:	931a      	str	r3, [sp, #104]	; 0x68
 800500e:	4654      	mov	r4, sl
 8005010:	2205      	movs	r2, #5
 8005012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005016:	4858      	ldr	r0, [pc, #352]	; (8005178 <_vfiprintf_r+0x24c>)
 8005018:	f7fb f8fa 	bl	8000210 <memchr>
 800501c:	9a04      	ldr	r2, [sp, #16]
 800501e:	b9d8      	cbnz	r0, 8005058 <_vfiprintf_r+0x12c>
 8005020:	06d1      	lsls	r1, r2, #27
 8005022:	bf44      	itt	mi
 8005024:	2320      	movmi	r3, #32
 8005026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800502a:	0713      	lsls	r3, r2, #28
 800502c:	bf44      	itt	mi
 800502e:	232b      	movmi	r3, #43	; 0x2b
 8005030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005034:	f89a 3000 	ldrb.w	r3, [sl]
 8005038:	2b2a      	cmp	r3, #42	; 0x2a
 800503a:	d015      	beq.n	8005068 <_vfiprintf_r+0x13c>
 800503c:	9a07      	ldr	r2, [sp, #28]
 800503e:	4654      	mov	r4, sl
 8005040:	2000      	movs	r0, #0
 8005042:	f04f 0c0a 	mov.w	ip, #10
 8005046:	4621      	mov	r1, r4
 8005048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800504c:	3b30      	subs	r3, #48	; 0x30
 800504e:	2b09      	cmp	r3, #9
 8005050:	d94e      	bls.n	80050f0 <_vfiprintf_r+0x1c4>
 8005052:	b1b0      	cbz	r0, 8005082 <_vfiprintf_r+0x156>
 8005054:	9207      	str	r2, [sp, #28]
 8005056:	e014      	b.n	8005082 <_vfiprintf_r+0x156>
 8005058:	eba0 0308 	sub.w	r3, r0, r8
 800505c:	fa09 f303 	lsl.w	r3, r9, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	9304      	str	r3, [sp, #16]
 8005064:	46a2      	mov	sl, r4
 8005066:	e7d2      	b.n	800500e <_vfiprintf_r+0xe2>
 8005068:	9b03      	ldr	r3, [sp, #12]
 800506a:	1d19      	adds	r1, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	9103      	str	r1, [sp, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfbb      	ittet	lt
 8005074:	425b      	neglt	r3, r3
 8005076:	f042 0202 	orrlt.w	r2, r2, #2
 800507a:	9307      	strge	r3, [sp, #28]
 800507c:	9307      	strlt	r3, [sp, #28]
 800507e:	bfb8      	it	lt
 8005080:	9204      	strlt	r2, [sp, #16]
 8005082:	7823      	ldrb	r3, [r4, #0]
 8005084:	2b2e      	cmp	r3, #46	; 0x2e
 8005086:	d10c      	bne.n	80050a2 <_vfiprintf_r+0x176>
 8005088:	7863      	ldrb	r3, [r4, #1]
 800508a:	2b2a      	cmp	r3, #42	; 0x2a
 800508c:	d135      	bne.n	80050fa <_vfiprintf_r+0x1ce>
 800508e:	9b03      	ldr	r3, [sp, #12]
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	9203      	str	r2, [sp, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfb8      	it	lt
 800509a:	f04f 33ff 	movlt.w	r3, #4294967295
 800509e:	3402      	adds	r4, #2
 80050a0:	9305      	str	r3, [sp, #20]
 80050a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005188 <_vfiprintf_r+0x25c>
 80050a6:	7821      	ldrb	r1, [r4, #0]
 80050a8:	2203      	movs	r2, #3
 80050aa:	4650      	mov	r0, sl
 80050ac:	f7fb f8b0 	bl	8000210 <memchr>
 80050b0:	b140      	cbz	r0, 80050c4 <_vfiprintf_r+0x198>
 80050b2:	2340      	movs	r3, #64	; 0x40
 80050b4:	eba0 000a 	sub.w	r0, r0, sl
 80050b8:	fa03 f000 	lsl.w	r0, r3, r0
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	4303      	orrs	r3, r0
 80050c0:	3401      	adds	r4, #1
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c8:	482c      	ldr	r0, [pc, #176]	; (800517c <_vfiprintf_r+0x250>)
 80050ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050ce:	2206      	movs	r2, #6
 80050d0:	f7fb f89e 	bl	8000210 <memchr>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d03f      	beq.n	8005158 <_vfiprintf_r+0x22c>
 80050d8:	4b29      	ldr	r3, [pc, #164]	; (8005180 <_vfiprintf_r+0x254>)
 80050da:	bb1b      	cbnz	r3, 8005124 <_vfiprintf_r+0x1f8>
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	3307      	adds	r3, #7
 80050e0:	f023 0307 	bic.w	r3, r3, #7
 80050e4:	3308      	adds	r3, #8
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ea:	443b      	add	r3, r7
 80050ec:	9309      	str	r3, [sp, #36]	; 0x24
 80050ee:	e767      	b.n	8004fc0 <_vfiprintf_r+0x94>
 80050f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80050f4:	460c      	mov	r4, r1
 80050f6:	2001      	movs	r0, #1
 80050f8:	e7a5      	b.n	8005046 <_vfiprintf_r+0x11a>
 80050fa:	2300      	movs	r3, #0
 80050fc:	3401      	adds	r4, #1
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	4619      	mov	r1, r3
 8005102:	f04f 0c0a 	mov.w	ip, #10
 8005106:	4620      	mov	r0, r4
 8005108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800510c:	3a30      	subs	r2, #48	; 0x30
 800510e:	2a09      	cmp	r2, #9
 8005110:	d903      	bls.n	800511a <_vfiprintf_r+0x1ee>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0c5      	beq.n	80050a2 <_vfiprintf_r+0x176>
 8005116:	9105      	str	r1, [sp, #20]
 8005118:	e7c3      	b.n	80050a2 <_vfiprintf_r+0x176>
 800511a:	fb0c 2101 	mla	r1, ip, r1, r2
 800511e:	4604      	mov	r4, r0
 8005120:	2301      	movs	r3, #1
 8005122:	e7f0      	b.n	8005106 <_vfiprintf_r+0x1da>
 8005124:	ab03      	add	r3, sp, #12
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	462a      	mov	r2, r5
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <_vfiprintf_r+0x258>)
 800512c:	a904      	add	r1, sp, #16
 800512e:	4630      	mov	r0, r6
 8005130:	f3af 8000 	nop.w
 8005134:	4607      	mov	r7, r0
 8005136:	1c78      	adds	r0, r7, #1
 8005138:	d1d6      	bne.n	80050e8 <_vfiprintf_r+0x1bc>
 800513a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800513c:	07d9      	lsls	r1, r3, #31
 800513e:	d405      	bmi.n	800514c <_vfiprintf_r+0x220>
 8005140:	89ab      	ldrh	r3, [r5, #12]
 8005142:	059a      	lsls	r2, r3, #22
 8005144:	d402      	bmi.n	800514c <_vfiprintf_r+0x220>
 8005146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005148:	f7ff fe31 	bl	8004dae <__retarget_lock_release_recursive>
 800514c:	89ab      	ldrh	r3, [r5, #12]
 800514e:	065b      	lsls	r3, r3, #25
 8005150:	f53f af12 	bmi.w	8004f78 <_vfiprintf_r+0x4c>
 8005154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005156:	e711      	b.n	8004f7c <_vfiprintf_r+0x50>
 8005158:	ab03      	add	r3, sp, #12
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	462a      	mov	r2, r5
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <_vfiprintf_r+0x258>)
 8005160:	a904      	add	r1, sp, #16
 8005162:	4630      	mov	r0, r6
 8005164:	f000 f880 	bl	8005268 <_printf_i>
 8005168:	e7e4      	b.n	8005134 <_vfiprintf_r+0x208>
 800516a:	bf00      	nop
 800516c:	08005b28 	.word	0x08005b28
 8005170:	08005b48 	.word	0x08005b48
 8005174:	08005b08 	.word	0x08005b08
 8005178:	08005b68 	.word	0x08005b68
 800517c:	08005b72 	.word	0x08005b72
 8005180:	00000000 	.word	0x00000000
 8005184:	08004f07 	.word	0x08004f07
 8005188:	08005b6e 	.word	0x08005b6e

0800518c <_printf_common>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	4616      	mov	r6, r2
 8005192:	4699      	mov	r9, r3
 8005194:	688a      	ldr	r2, [r1, #8]
 8005196:	690b      	ldr	r3, [r1, #16]
 8005198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800519c:	4293      	cmp	r3, r2
 800519e:	bfb8      	it	lt
 80051a0:	4613      	movlt	r3, r2
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a8:	4607      	mov	r7, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b10a      	cbz	r2, 80051b2 <_printf_common+0x26>
 80051ae:	3301      	adds	r3, #1
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	0699      	lsls	r1, r3, #26
 80051b6:	bf42      	ittt	mi
 80051b8:	6833      	ldrmi	r3, [r6, #0]
 80051ba:	3302      	addmi	r3, #2
 80051bc:	6033      	strmi	r3, [r6, #0]
 80051be:	6825      	ldr	r5, [r4, #0]
 80051c0:	f015 0506 	ands.w	r5, r5, #6
 80051c4:	d106      	bne.n	80051d4 <_printf_common+0x48>
 80051c6:	f104 0a19 	add.w	sl, r4, #25
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	6832      	ldr	r2, [r6, #0]
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dc26      	bgt.n	8005222 <_printf_common+0x96>
 80051d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d8:	1e13      	subs	r3, r2, #0
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	bf18      	it	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	0692      	lsls	r2, r2, #26
 80051e2:	d42b      	bmi.n	800523c <_printf_common+0xb0>
 80051e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e8:	4649      	mov	r1, r9
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c0      	blx	r8
 80051ee:	3001      	adds	r0, #1
 80051f0:	d01e      	beq.n	8005230 <_printf_common+0xa4>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	68e5      	ldr	r5, [r4, #12]
 80051f6:	6832      	ldr	r2, [r6, #0]
 80051f8:	f003 0306 	and.w	r3, r3, #6
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	bf08      	it	eq
 8005200:	1aad      	subeq	r5, r5, r2
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	bf0c      	ite	eq
 8005208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800520c:	2500      	movne	r5, #0
 800520e:	4293      	cmp	r3, r2
 8005210:	bfc4      	itt	gt
 8005212:	1a9b      	subgt	r3, r3, r2
 8005214:	18ed      	addgt	r5, r5, r3
 8005216:	2600      	movs	r6, #0
 8005218:	341a      	adds	r4, #26
 800521a:	42b5      	cmp	r5, r6
 800521c:	d11a      	bne.n	8005254 <_printf_common+0xc8>
 800521e:	2000      	movs	r0, #0
 8005220:	e008      	b.n	8005234 <_printf_common+0xa8>
 8005222:	2301      	movs	r3, #1
 8005224:	4652      	mov	r2, sl
 8005226:	4649      	mov	r1, r9
 8005228:	4638      	mov	r0, r7
 800522a:	47c0      	blx	r8
 800522c:	3001      	adds	r0, #1
 800522e:	d103      	bne.n	8005238 <_printf_common+0xac>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005238:	3501      	adds	r5, #1
 800523a:	e7c6      	b.n	80051ca <_printf_common+0x3e>
 800523c:	18e1      	adds	r1, r4, r3
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	2030      	movs	r0, #48	; 0x30
 8005242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005246:	4422      	add	r2, r4
 8005248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800524c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005250:	3302      	adds	r3, #2
 8005252:	e7c7      	b.n	80051e4 <_printf_common+0x58>
 8005254:	2301      	movs	r3, #1
 8005256:	4622      	mov	r2, r4
 8005258:	4649      	mov	r1, r9
 800525a:	4638      	mov	r0, r7
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d0e6      	beq.n	8005230 <_printf_common+0xa4>
 8005262:	3601      	adds	r6, #1
 8005264:	e7d9      	b.n	800521a <_printf_common+0x8e>
	...

08005268 <_printf_i>:
 8005268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800526c:	7e0f      	ldrb	r7, [r1, #24]
 800526e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005270:	2f78      	cmp	r7, #120	; 0x78
 8005272:	4691      	mov	r9, r2
 8005274:	4680      	mov	r8, r0
 8005276:	460c      	mov	r4, r1
 8005278:	469a      	mov	sl, r3
 800527a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800527e:	d807      	bhi.n	8005290 <_printf_i+0x28>
 8005280:	2f62      	cmp	r7, #98	; 0x62
 8005282:	d80a      	bhi.n	800529a <_printf_i+0x32>
 8005284:	2f00      	cmp	r7, #0
 8005286:	f000 80d8 	beq.w	800543a <_printf_i+0x1d2>
 800528a:	2f58      	cmp	r7, #88	; 0x58
 800528c:	f000 80a3 	beq.w	80053d6 <_printf_i+0x16e>
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005298:	e03a      	b.n	8005310 <_printf_i+0xa8>
 800529a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800529e:	2b15      	cmp	r3, #21
 80052a0:	d8f6      	bhi.n	8005290 <_printf_i+0x28>
 80052a2:	a101      	add	r1, pc, #4	; (adr r1, 80052a8 <_printf_i+0x40>)
 80052a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a8:	08005301 	.word	0x08005301
 80052ac:	08005315 	.word	0x08005315
 80052b0:	08005291 	.word	0x08005291
 80052b4:	08005291 	.word	0x08005291
 80052b8:	08005291 	.word	0x08005291
 80052bc:	08005291 	.word	0x08005291
 80052c0:	08005315 	.word	0x08005315
 80052c4:	08005291 	.word	0x08005291
 80052c8:	08005291 	.word	0x08005291
 80052cc:	08005291 	.word	0x08005291
 80052d0:	08005291 	.word	0x08005291
 80052d4:	08005421 	.word	0x08005421
 80052d8:	08005345 	.word	0x08005345
 80052dc:	08005403 	.word	0x08005403
 80052e0:	08005291 	.word	0x08005291
 80052e4:	08005291 	.word	0x08005291
 80052e8:	08005443 	.word	0x08005443
 80052ec:	08005291 	.word	0x08005291
 80052f0:	08005345 	.word	0x08005345
 80052f4:	08005291 	.word	0x08005291
 80052f8:	08005291 	.word	0x08005291
 80052fc:	0800540b 	.word	0x0800540b
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800530c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005310:	2301      	movs	r3, #1
 8005312:	e0a3      	b.n	800545c <_printf_i+0x1f4>
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	6829      	ldr	r1, [r5, #0]
 8005318:	0606      	lsls	r6, r0, #24
 800531a:	f101 0304 	add.w	r3, r1, #4
 800531e:	d50a      	bpl.n	8005336 <_printf_i+0xce>
 8005320:	680e      	ldr	r6, [r1, #0]
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	2e00      	cmp	r6, #0
 8005326:	da03      	bge.n	8005330 <_printf_i+0xc8>
 8005328:	232d      	movs	r3, #45	; 0x2d
 800532a:	4276      	negs	r6, r6
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005330:	485e      	ldr	r0, [pc, #376]	; (80054ac <_printf_i+0x244>)
 8005332:	230a      	movs	r3, #10
 8005334:	e019      	b.n	800536a <_printf_i+0x102>
 8005336:	680e      	ldr	r6, [r1, #0]
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800533e:	bf18      	it	ne
 8005340:	b236      	sxthne	r6, r6
 8005342:	e7ef      	b.n	8005324 <_printf_i+0xbc>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	1d19      	adds	r1, r3, #4
 800534a:	6029      	str	r1, [r5, #0]
 800534c:	0601      	lsls	r1, r0, #24
 800534e:	d501      	bpl.n	8005354 <_printf_i+0xec>
 8005350:	681e      	ldr	r6, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0xf2>
 8005354:	0646      	lsls	r6, r0, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0xe8>
 8005358:	881e      	ldrh	r6, [r3, #0]
 800535a:	4854      	ldr	r0, [pc, #336]	; (80054ac <_printf_i+0x244>)
 800535c:	2f6f      	cmp	r7, #111	; 0x6f
 800535e:	bf0c      	ite	eq
 8005360:	2308      	moveq	r3, #8
 8005362:	230a      	movne	r3, #10
 8005364:	2100      	movs	r1, #0
 8005366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800536a:	6865      	ldr	r5, [r4, #4]
 800536c:	60a5      	str	r5, [r4, #8]
 800536e:	2d00      	cmp	r5, #0
 8005370:	bfa2      	ittt	ge
 8005372:	6821      	ldrge	r1, [r4, #0]
 8005374:	f021 0104 	bicge.w	r1, r1, #4
 8005378:	6021      	strge	r1, [r4, #0]
 800537a:	b90e      	cbnz	r6, 8005380 <_printf_i+0x118>
 800537c:	2d00      	cmp	r5, #0
 800537e:	d04d      	beq.n	800541c <_printf_i+0x1b4>
 8005380:	4615      	mov	r5, r2
 8005382:	fbb6 f1f3 	udiv	r1, r6, r3
 8005386:	fb03 6711 	mls	r7, r3, r1, r6
 800538a:	5dc7      	ldrb	r7, [r0, r7]
 800538c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005390:	4637      	mov	r7, r6
 8005392:	42bb      	cmp	r3, r7
 8005394:	460e      	mov	r6, r1
 8005396:	d9f4      	bls.n	8005382 <_printf_i+0x11a>
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10b      	bne.n	80053b4 <_printf_i+0x14c>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	07de      	lsls	r6, r3, #31
 80053a0:	d508      	bpl.n	80053b4 <_printf_i+0x14c>
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	6861      	ldr	r1, [r4, #4]
 80053a6:	4299      	cmp	r1, r3
 80053a8:	bfde      	ittt	le
 80053aa:	2330      	movle	r3, #48	; 0x30
 80053ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053b4:	1b52      	subs	r2, r2, r5
 80053b6:	6122      	str	r2, [r4, #16]
 80053b8:	f8cd a000 	str.w	sl, [sp]
 80053bc:	464b      	mov	r3, r9
 80053be:	aa03      	add	r2, sp, #12
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff fee2 	bl	800518c <_printf_common>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d14c      	bne.n	8005466 <_printf_i+0x1fe>
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	b004      	add	sp, #16
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	4835      	ldr	r0, [pc, #212]	; (80054ac <_printf_i+0x244>)
 80053d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053dc:	6829      	ldr	r1, [r5, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80053e4:	6029      	str	r1, [r5, #0]
 80053e6:	061d      	lsls	r5, r3, #24
 80053e8:	d514      	bpl.n	8005414 <_printf_i+0x1ac>
 80053ea:	07df      	lsls	r7, r3, #31
 80053ec:	bf44      	itt	mi
 80053ee:	f043 0320 	orrmi.w	r3, r3, #32
 80053f2:	6023      	strmi	r3, [r4, #0]
 80053f4:	b91e      	cbnz	r6, 80053fe <_printf_i+0x196>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f023 0320 	bic.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	2310      	movs	r3, #16
 8005400:	e7b0      	b.n	8005364 <_printf_i+0xfc>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	f043 0320 	orr.w	r3, r3, #32
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	2378      	movs	r3, #120	; 0x78
 800540c:	4828      	ldr	r0, [pc, #160]	; (80054b0 <_printf_i+0x248>)
 800540e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005412:	e7e3      	b.n	80053dc <_printf_i+0x174>
 8005414:	0659      	lsls	r1, r3, #25
 8005416:	bf48      	it	mi
 8005418:	b2b6      	uxthmi	r6, r6
 800541a:	e7e6      	b.n	80053ea <_printf_i+0x182>
 800541c:	4615      	mov	r5, r2
 800541e:	e7bb      	b.n	8005398 <_printf_i+0x130>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	6826      	ldr	r6, [r4, #0]
 8005424:	6961      	ldr	r1, [r4, #20]
 8005426:	1d18      	adds	r0, r3, #4
 8005428:	6028      	str	r0, [r5, #0]
 800542a:	0635      	lsls	r5, r6, #24
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	d501      	bpl.n	8005434 <_printf_i+0x1cc>
 8005430:	6019      	str	r1, [r3, #0]
 8005432:	e002      	b.n	800543a <_printf_i+0x1d2>
 8005434:	0670      	lsls	r0, r6, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0x1c8>
 8005438:	8019      	strh	r1, [r3, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	4615      	mov	r5, r2
 8005440:	e7ba      	b.n	80053b8 <_printf_i+0x150>
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	602a      	str	r2, [r5, #0]
 8005448:	681d      	ldr	r5, [r3, #0]
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	2100      	movs	r1, #0
 800544e:	4628      	mov	r0, r5
 8005450:	f7fa fede 	bl	8000210 <memchr>
 8005454:	b108      	cbz	r0, 800545a <_printf_i+0x1f2>
 8005456:	1b40      	subs	r0, r0, r5
 8005458:	6060      	str	r0, [r4, #4]
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	2300      	movs	r3, #0
 8005460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005464:	e7a8      	b.n	80053b8 <_printf_i+0x150>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	462a      	mov	r2, r5
 800546a:	4649      	mov	r1, r9
 800546c:	4640      	mov	r0, r8
 800546e:	47d0      	blx	sl
 8005470:	3001      	adds	r0, #1
 8005472:	d0ab      	beq.n	80053cc <_printf_i+0x164>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	079b      	lsls	r3, r3, #30
 8005478:	d413      	bmi.n	80054a2 <_printf_i+0x23a>
 800547a:	68e0      	ldr	r0, [r4, #12]
 800547c:	9b03      	ldr	r3, [sp, #12]
 800547e:	4298      	cmp	r0, r3
 8005480:	bfb8      	it	lt
 8005482:	4618      	movlt	r0, r3
 8005484:	e7a4      	b.n	80053d0 <_printf_i+0x168>
 8005486:	2301      	movs	r3, #1
 8005488:	4632      	mov	r2, r6
 800548a:	4649      	mov	r1, r9
 800548c:	4640      	mov	r0, r8
 800548e:	47d0      	blx	sl
 8005490:	3001      	adds	r0, #1
 8005492:	d09b      	beq.n	80053cc <_printf_i+0x164>
 8005494:	3501      	adds	r5, #1
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	9903      	ldr	r1, [sp, #12]
 800549a:	1a5b      	subs	r3, r3, r1
 800549c:	42ab      	cmp	r3, r5
 800549e:	dcf2      	bgt.n	8005486 <_printf_i+0x21e>
 80054a0:	e7eb      	b.n	800547a <_printf_i+0x212>
 80054a2:	2500      	movs	r5, #0
 80054a4:	f104 0619 	add.w	r6, r4, #25
 80054a8:	e7f5      	b.n	8005496 <_printf_i+0x22e>
 80054aa:	bf00      	nop
 80054ac:	08005b79 	.word	0x08005b79
 80054b0:	08005b8a 	.word	0x08005b8a

080054b4 <_sbrk_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d06      	ldr	r5, [pc, #24]	; (80054d0 <_sbrk_r+0x1c>)
 80054b8:	2300      	movs	r3, #0
 80054ba:	4604      	mov	r4, r0
 80054bc:	4608      	mov	r0, r1
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	f7fb fc3a 	bl	8000d38 <_sbrk>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_sbrk_r+0x1a>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_sbrk_r+0x1a>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000164 	.word	0x20000164

080054d4 <__sread>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	460c      	mov	r4, r1
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	f000 fab2 	bl	8005a44 <_read_r>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	bfab      	itete	ge
 80054e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054e6:	89a3      	ldrhlt	r3, [r4, #12]
 80054e8:	181b      	addge	r3, r3, r0
 80054ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054ee:	bfac      	ite	ge
 80054f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054f2:	81a3      	strhlt	r3, [r4, #12]
 80054f4:	bd10      	pop	{r4, pc}

080054f6 <__swrite>:
 80054f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	461f      	mov	r7, r3
 80054fc:	898b      	ldrh	r3, [r1, #12]
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	4605      	mov	r5, r0
 8005502:	460c      	mov	r4, r1
 8005504:	4616      	mov	r6, r2
 8005506:	d505      	bpl.n	8005514 <__swrite+0x1e>
 8005508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550c:	2302      	movs	r3, #2
 800550e:	2200      	movs	r2, #0
 8005510:	f000 f9c8 	bl	80058a4 <_lseek_r>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	4628      	mov	r0, r5
 8005526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	f000 b869 	b.w	8005600 <_write_r>

0800552e <__sseek>:
 800552e:	b510      	push	{r4, lr}
 8005530:	460c      	mov	r4, r1
 8005532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005536:	f000 f9b5 	bl	80058a4 <_lseek_r>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	bf15      	itete	ne
 8005540:	6560      	strne	r0, [r4, #84]	; 0x54
 8005542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800554a:	81a3      	strheq	r3, [r4, #12]
 800554c:	bf18      	it	ne
 800554e:	81a3      	strhne	r3, [r4, #12]
 8005550:	bd10      	pop	{r4, pc}

08005552 <__sclose>:
 8005552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005556:	f000 b8d3 	b.w	8005700 <_close_r>
	...

0800555c <__swbuf_r>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	460e      	mov	r6, r1
 8005560:	4614      	mov	r4, r2
 8005562:	4605      	mov	r5, r0
 8005564:	b118      	cbz	r0, 800556e <__swbuf_r+0x12>
 8005566:	6983      	ldr	r3, [r0, #24]
 8005568:	b90b      	cbnz	r3, 800556e <__swbuf_r+0x12>
 800556a:	f7ff fb81 	bl	8004c70 <__sinit>
 800556e:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <__swbuf_r+0x98>)
 8005570:	429c      	cmp	r4, r3
 8005572:	d12b      	bne.n	80055cc <__swbuf_r+0x70>
 8005574:	686c      	ldr	r4, [r5, #4]
 8005576:	69a3      	ldr	r3, [r4, #24]
 8005578:	60a3      	str	r3, [r4, #8]
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	071a      	lsls	r2, r3, #28
 800557e:	d52f      	bpl.n	80055e0 <__swbuf_r+0x84>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	b36b      	cbz	r3, 80055e0 <__swbuf_r+0x84>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1ac0      	subs	r0, r0, r3
 800558a:	6963      	ldr	r3, [r4, #20]
 800558c:	b2f6      	uxtb	r6, r6
 800558e:	4283      	cmp	r3, r0
 8005590:	4637      	mov	r7, r6
 8005592:	dc04      	bgt.n	800559e <__swbuf_r+0x42>
 8005594:	4621      	mov	r1, r4
 8005596:	4628      	mov	r0, r5
 8005598:	f000 f948 	bl	800582c <_fflush_r>
 800559c:	bb30      	cbnz	r0, 80055ec <__swbuf_r+0x90>
 800559e:	68a3      	ldr	r3, [r4, #8]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60a3      	str	r3, [r4, #8]
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	701e      	strb	r6, [r3, #0]
 80055ac:	6963      	ldr	r3, [r4, #20]
 80055ae:	3001      	adds	r0, #1
 80055b0:	4283      	cmp	r3, r0
 80055b2:	d004      	beq.n	80055be <__swbuf_r+0x62>
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	07db      	lsls	r3, r3, #31
 80055b8:	d506      	bpl.n	80055c8 <__swbuf_r+0x6c>
 80055ba:	2e0a      	cmp	r6, #10
 80055bc:	d104      	bne.n	80055c8 <__swbuf_r+0x6c>
 80055be:	4621      	mov	r1, r4
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f933 	bl	800582c <_fflush_r>
 80055c6:	b988      	cbnz	r0, 80055ec <__swbuf_r+0x90>
 80055c8:	4638      	mov	r0, r7
 80055ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <__swbuf_r+0x9c>)
 80055ce:	429c      	cmp	r4, r3
 80055d0:	d101      	bne.n	80055d6 <__swbuf_r+0x7a>
 80055d2:	68ac      	ldr	r4, [r5, #8]
 80055d4:	e7cf      	b.n	8005576 <__swbuf_r+0x1a>
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <__swbuf_r+0xa0>)
 80055d8:	429c      	cmp	r4, r3
 80055da:	bf08      	it	eq
 80055dc:	68ec      	ldreq	r4, [r5, #12]
 80055de:	e7ca      	b.n	8005576 <__swbuf_r+0x1a>
 80055e0:	4621      	mov	r1, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f81e 	bl	8005624 <__swsetup_r>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d0cb      	beq.n	8005584 <__swbuf_r+0x28>
 80055ec:	f04f 37ff 	mov.w	r7, #4294967295
 80055f0:	e7ea      	b.n	80055c8 <__swbuf_r+0x6c>
 80055f2:	bf00      	nop
 80055f4:	08005b28 	.word	0x08005b28
 80055f8:	08005b48 	.word	0x08005b48
 80055fc:	08005b08 	.word	0x08005b08

08005600 <_write_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d07      	ldr	r5, [pc, #28]	; (8005620 <_write_r+0x20>)
 8005604:	4604      	mov	r4, r0
 8005606:	4608      	mov	r0, r1
 8005608:	4611      	mov	r1, r2
 800560a:	2200      	movs	r2, #0
 800560c:	602a      	str	r2, [r5, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	f7fa ffd0 	bl	80005b4 <_write>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_write_r+0x1e>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_write_r+0x1e>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	20000164 	.word	0x20000164

08005624 <__swsetup_r>:
 8005624:	4b32      	ldr	r3, [pc, #200]	; (80056f0 <__swsetup_r+0xcc>)
 8005626:	b570      	push	{r4, r5, r6, lr}
 8005628:	681d      	ldr	r5, [r3, #0]
 800562a:	4606      	mov	r6, r0
 800562c:	460c      	mov	r4, r1
 800562e:	b125      	cbz	r5, 800563a <__swsetup_r+0x16>
 8005630:	69ab      	ldr	r3, [r5, #24]
 8005632:	b913      	cbnz	r3, 800563a <__swsetup_r+0x16>
 8005634:	4628      	mov	r0, r5
 8005636:	f7ff fb1b 	bl	8004c70 <__sinit>
 800563a:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <__swsetup_r+0xd0>)
 800563c:	429c      	cmp	r4, r3
 800563e:	d10f      	bne.n	8005660 <__swsetup_r+0x3c>
 8005640:	686c      	ldr	r4, [r5, #4]
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005648:	0719      	lsls	r1, r3, #28
 800564a:	d42c      	bmi.n	80056a6 <__swsetup_r+0x82>
 800564c:	06dd      	lsls	r5, r3, #27
 800564e:	d411      	bmi.n	8005674 <__swsetup_r+0x50>
 8005650:	2309      	movs	r3, #9
 8005652:	6033      	str	r3, [r6, #0]
 8005654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	f04f 30ff 	mov.w	r0, #4294967295
 800565e:	e03e      	b.n	80056de <__swsetup_r+0xba>
 8005660:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <__swsetup_r+0xd4>)
 8005662:	429c      	cmp	r4, r3
 8005664:	d101      	bne.n	800566a <__swsetup_r+0x46>
 8005666:	68ac      	ldr	r4, [r5, #8]
 8005668:	e7eb      	b.n	8005642 <__swsetup_r+0x1e>
 800566a:	4b24      	ldr	r3, [pc, #144]	; (80056fc <__swsetup_r+0xd8>)
 800566c:	429c      	cmp	r4, r3
 800566e:	bf08      	it	eq
 8005670:	68ec      	ldreq	r4, [r5, #12]
 8005672:	e7e6      	b.n	8005642 <__swsetup_r+0x1e>
 8005674:	0758      	lsls	r0, r3, #29
 8005676:	d512      	bpl.n	800569e <__swsetup_r+0x7a>
 8005678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800567a:	b141      	cbz	r1, 800568e <__swsetup_r+0x6a>
 800567c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005680:	4299      	cmp	r1, r3
 8005682:	d002      	beq.n	800568a <__swsetup_r+0x66>
 8005684:	4630      	mov	r0, r6
 8005686:	f000 f991 	bl	80059ac <_free_r>
 800568a:	2300      	movs	r3, #0
 800568c:	6363      	str	r3, [r4, #52]	; 0x34
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	2300      	movs	r3, #0
 8005698:	6063      	str	r3, [r4, #4]
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	f043 0308 	orr.w	r3, r3, #8
 80056a4:	81a3      	strh	r3, [r4, #12]
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	b94b      	cbnz	r3, 80056be <__swsetup_r+0x9a>
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b4:	d003      	beq.n	80056be <__swsetup_r+0x9a>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 f92b 	bl	8005914 <__smakebuf_r>
 80056be:	89a0      	ldrh	r0, [r4, #12]
 80056c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056c4:	f010 0301 	ands.w	r3, r0, #1
 80056c8:	d00a      	beq.n	80056e0 <__swsetup_r+0xbc>
 80056ca:	2300      	movs	r3, #0
 80056cc:	60a3      	str	r3, [r4, #8]
 80056ce:	6963      	ldr	r3, [r4, #20]
 80056d0:	425b      	negs	r3, r3
 80056d2:	61a3      	str	r3, [r4, #24]
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	b943      	cbnz	r3, 80056ea <__swsetup_r+0xc6>
 80056d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056dc:	d1ba      	bne.n	8005654 <__swsetup_r+0x30>
 80056de:	bd70      	pop	{r4, r5, r6, pc}
 80056e0:	0781      	lsls	r1, r0, #30
 80056e2:	bf58      	it	pl
 80056e4:	6963      	ldrpl	r3, [r4, #20]
 80056e6:	60a3      	str	r3, [r4, #8]
 80056e8:	e7f4      	b.n	80056d4 <__swsetup_r+0xb0>
 80056ea:	2000      	movs	r0, #0
 80056ec:	e7f7      	b.n	80056de <__swsetup_r+0xba>
 80056ee:	bf00      	nop
 80056f0:	2000000c 	.word	0x2000000c
 80056f4:	08005b28 	.word	0x08005b28
 80056f8:	08005b48 	.word	0x08005b48
 80056fc:	08005b08 	.word	0x08005b08

08005700 <_close_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d06      	ldr	r5, [pc, #24]	; (800571c <_close_r+0x1c>)
 8005704:	2300      	movs	r3, #0
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	602b      	str	r3, [r5, #0]
 800570c:	f7fb fadf 	bl	8000cce <_close>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_close_r+0x1a>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_close_r+0x1a>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20000164 	.word	0x20000164

08005720 <__sflush_r>:
 8005720:	898a      	ldrh	r2, [r1, #12]
 8005722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005726:	4605      	mov	r5, r0
 8005728:	0710      	lsls	r0, r2, #28
 800572a:	460c      	mov	r4, r1
 800572c:	d458      	bmi.n	80057e0 <__sflush_r+0xc0>
 800572e:	684b      	ldr	r3, [r1, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc05      	bgt.n	8005740 <__sflush_r+0x20>
 8005734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	dc02      	bgt.n	8005740 <__sflush_r+0x20>
 800573a:	2000      	movs	r0, #0
 800573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005742:	2e00      	cmp	r6, #0
 8005744:	d0f9      	beq.n	800573a <__sflush_r+0x1a>
 8005746:	2300      	movs	r3, #0
 8005748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800574c:	682f      	ldr	r7, [r5, #0]
 800574e:	602b      	str	r3, [r5, #0]
 8005750:	d032      	beq.n	80057b8 <__sflush_r+0x98>
 8005752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	075a      	lsls	r2, r3, #29
 8005758:	d505      	bpl.n	8005766 <__sflush_r+0x46>
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	1ac0      	subs	r0, r0, r3
 800575e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005760:	b10b      	cbz	r3, 8005766 <__sflush_r+0x46>
 8005762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005764:	1ac0      	subs	r0, r0, r3
 8005766:	2300      	movs	r3, #0
 8005768:	4602      	mov	r2, r0
 800576a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800576c:	6a21      	ldr	r1, [r4, #32]
 800576e:	4628      	mov	r0, r5
 8005770:	47b0      	blx	r6
 8005772:	1c43      	adds	r3, r0, #1
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	d106      	bne.n	8005786 <__sflush_r+0x66>
 8005778:	6829      	ldr	r1, [r5, #0]
 800577a:	291d      	cmp	r1, #29
 800577c:	d82c      	bhi.n	80057d8 <__sflush_r+0xb8>
 800577e:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <__sflush_r+0x108>)
 8005780:	40ca      	lsrs	r2, r1
 8005782:	07d6      	lsls	r6, r2, #31
 8005784:	d528      	bpl.n	80057d8 <__sflush_r+0xb8>
 8005786:	2200      	movs	r2, #0
 8005788:	6062      	str	r2, [r4, #4]
 800578a:	04d9      	lsls	r1, r3, #19
 800578c:	6922      	ldr	r2, [r4, #16]
 800578e:	6022      	str	r2, [r4, #0]
 8005790:	d504      	bpl.n	800579c <__sflush_r+0x7c>
 8005792:	1c42      	adds	r2, r0, #1
 8005794:	d101      	bne.n	800579a <__sflush_r+0x7a>
 8005796:	682b      	ldr	r3, [r5, #0]
 8005798:	b903      	cbnz	r3, 800579c <__sflush_r+0x7c>
 800579a:	6560      	str	r0, [r4, #84]	; 0x54
 800579c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800579e:	602f      	str	r7, [r5, #0]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d0ca      	beq.n	800573a <__sflush_r+0x1a>
 80057a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057a8:	4299      	cmp	r1, r3
 80057aa:	d002      	beq.n	80057b2 <__sflush_r+0x92>
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 f8fd 	bl	80059ac <_free_r>
 80057b2:	2000      	movs	r0, #0
 80057b4:	6360      	str	r0, [r4, #52]	; 0x34
 80057b6:	e7c1      	b.n	800573c <__sflush_r+0x1c>
 80057b8:	6a21      	ldr	r1, [r4, #32]
 80057ba:	2301      	movs	r3, #1
 80057bc:	4628      	mov	r0, r5
 80057be:	47b0      	blx	r6
 80057c0:	1c41      	adds	r1, r0, #1
 80057c2:	d1c7      	bne.n	8005754 <__sflush_r+0x34>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0c4      	beq.n	8005754 <__sflush_r+0x34>
 80057ca:	2b1d      	cmp	r3, #29
 80057cc:	d001      	beq.n	80057d2 <__sflush_r+0xb2>
 80057ce:	2b16      	cmp	r3, #22
 80057d0:	d101      	bne.n	80057d6 <__sflush_r+0xb6>
 80057d2:	602f      	str	r7, [r5, #0]
 80057d4:	e7b1      	b.n	800573a <__sflush_r+0x1a>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	e7ad      	b.n	800573c <__sflush_r+0x1c>
 80057e0:	690f      	ldr	r7, [r1, #16]
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	d0a9      	beq.n	800573a <__sflush_r+0x1a>
 80057e6:	0793      	lsls	r3, r2, #30
 80057e8:	680e      	ldr	r6, [r1, #0]
 80057ea:	bf08      	it	eq
 80057ec:	694b      	ldreq	r3, [r1, #20]
 80057ee:	600f      	str	r7, [r1, #0]
 80057f0:	bf18      	it	ne
 80057f2:	2300      	movne	r3, #0
 80057f4:	eba6 0807 	sub.w	r8, r6, r7
 80057f8:	608b      	str	r3, [r1, #8]
 80057fa:	f1b8 0f00 	cmp.w	r8, #0
 80057fe:	dd9c      	ble.n	800573a <__sflush_r+0x1a>
 8005800:	6a21      	ldr	r1, [r4, #32]
 8005802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005804:	4643      	mov	r3, r8
 8005806:	463a      	mov	r2, r7
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	2800      	cmp	r0, #0
 800580e:	dc06      	bgt.n	800581e <__sflush_r+0xfe>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	e78e      	b.n	800573c <__sflush_r+0x1c>
 800581e:	4407      	add	r7, r0
 8005820:	eba8 0800 	sub.w	r8, r8, r0
 8005824:	e7e9      	b.n	80057fa <__sflush_r+0xda>
 8005826:	bf00      	nop
 8005828:	20400001 	.word	0x20400001

0800582c <_fflush_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	690b      	ldr	r3, [r1, #16]
 8005830:	4605      	mov	r5, r0
 8005832:	460c      	mov	r4, r1
 8005834:	b913      	cbnz	r3, 800583c <_fflush_r+0x10>
 8005836:	2500      	movs	r5, #0
 8005838:	4628      	mov	r0, r5
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	b118      	cbz	r0, 8005846 <_fflush_r+0x1a>
 800583e:	6983      	ldr	r3, [r0, #24]
 8005840:	b90b      	cbnz	r3, 8005846 <_fflush_r+0x1a>
 8005842:	f7ff fa15 	bl	8004c70 <__sinit>
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <_fflush_r+0x6c>)
 8005848:	429c      	cmp	r4, r3
 800584a:	d11b      	bne.n	8005884 <_fflush_r+0x58>
 800584c:	686c      	ldr	r4, [r5, #4]
 800584e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0ef      	beq.n	8005836 <_fflush_r+0xa>
 8005856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005858:	07d0      	lsls	r0, r2, #31
 800585a:	d404      	bmi.n	8005866 <_fflush_r+0x3a>
 800585c:	0599      	lsls	r1, r3, #22
 800585e:	d402      	bmi.n	8005866 <_fflush_r+0x3a>
 8005860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005862:	f7ff faa3 	bl	8004dac <__retarget_lock_acquire_recursive>
 8005866:	4628      	mov	r0, r5
 8005868:	4621      	mov	r1, r4
 800586a:	f7ff ff59 	bl	8005720 <__sflush_r>
 800586e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005870:	07da      	lsls	r2, r3, #31
 8005872:	4605      	mov	r5, r0
 8005874:	d4e0      	bmi.n	8005838 <_fflush_r+0xc>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	059b      	lsls	r3, r3, #22
 800587a:	d4dd      	bmi.n	8005838 <_fflush_r+0xc>
 800587c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800587e:	f7ff fa96 	bl	8004dae <__retarget_lock_release_recursive>
 8005882:	e7d9      	b.n	8005838 <_fflush_r+0xc>
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <_fflush_r+0x70>)
 8005886:	429c      	cmp	r4, r3
 8005888:	d101      	bne.n	800588e <_fflush_r+0x62>
 800588a:	68ac      	ldr	r4, [r5, #8]
 800588c:	e7df      	b.n	800584e <_fflush_r+0x22>
 800588e:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <_fflush_r+0x74>)
 8005890:	429c      	cmp	r4, r3
 8005892:	bf08      	it	eq
 8005894:	68ec      	ldreq	r4, [r5, #12]
 8005896:	e7da      	b.n	800584e <_fflush_r+0x22>
 8005898:	08005b28 	.word	0x08005b28
 800589c:	08005b48 	.word	0x08005b48
 80058a0:	08005b08 	.word	0x08005b08

080058a4 <_lseek_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	; (80058c4 <_lseek_r+0x20>)
 80058a8:	4604      	mov	r4, r0
 80058aa:	4608      	mov	r0, r1
 80058ac:	4611      	mov	r1, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	602a      	str	r2, [r5, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fb fa32 	bl	8000d1c <_lseek>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_lseek_r+0x1e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_lseek_r+0x1e>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000164 	.word	0x20000164

080058c8 <__swhatbuf_r>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	460e      	mov	r6, r1
 80058cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d0:	2900      	cmp	r1, #0
 80058d2:	b096      	sub	sp, #88	; 0x58
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	da08      	bge.n	80058ec <__swhatbuf_r+0x24>
 80058da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	061a      	lsls	r2, r3, #24
 80058e4:	d410      	bmi.n	8005908 <__swhatbuf_r+0x40>
 80058e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ea:	e00e      	b.n	800590a <__swhatbuf_r+0x42>
 80058ec:	466a      	mov	r2, sp
 80058ee:	f000 f8bb 	bl	8005a68 <_fstat_r>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	dbf1      	blt.n	80058da <__swhatbuf_r+0x12>
 80058f6:	9a01      	ldr	r2, [sp, #4]
 80058f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005900:	425a      	negs	r2, r3
 8005902:	415a      	adcs	r2, r3
 8005904:	602a      	str	r2, [r5, #0]
 8005906:	e7ee      	b.n	80058e6 <__swhatbuf_r+0x1e>
 8005908:	2340      	movs	r3, #64	; 0x40
 800590a:	2000      	movs	r0, #0
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	b016      	add	sp, #88	; 0x58
 8005910:	bd70      	pop	{r4, r5, r6, pc}
	...

08005914 <__smakebuf_r>:
 8005914:	898b      	ldrh	r3, [r1, #12]
 8005916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005918:	079d      	lsls	r5, r3, #30
 800591a:	4606      	mov	r6, r0
 800591c:	460c      	mov	r4, r1
 800591e:	d507      	bpl.n	8005930 <__smakebuf_r+0x1c>
 8005920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	2301      	movs	r3, #1
 800592a:	6163      	str	r3, [r4, #20]
 800592c:	b002      	add	sp, #8
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	ab01      	add	r3, sp, #4
 8005932:	466a      	mov	r2, sp
 8005934:	f7ff ffc8 	bl	80058c8 <__swhatbuf_r>
 8005938:	9900      	ldr	r1, [sp, #0]
 800593a:	4605      	mov	r5, r0
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff fa57 	bl	8004df0 <_malloc_r>
 8005942:	b948      	cbnz	r0, 8005958 <__smakebuf_r+0x44>
 8005944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005948:	059a      	lsls	r2, r3, #22
 800594a:	d4ef      	bmi.n	800592c <__smakebuf_r+0x18>
 800594c:	f023 0303 	bic.w	r3, r3, #3
 8005950:	f043 0302 	orr.w	r3, r3, #2
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	e7e3      	b.n	8005920 <__smakebuf_r+0xc>
 8005958:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <__smakebuf_r+0x7c>)
 800595a:	62b3      	str	r3, [r6, #40]	; 0x28
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	6020      	str	r0, [r4, #0]
 8005960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	9b00      	ldr	r3, [sp, #0]
 8005968:	6163      	str	r3, [r4, #20]
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	6120      	str	r0, [r4, #16]
 800596e:	b15b      	cbz	r3, 8005988 <__smakebuf_r+0x74>
 8005970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005974:	4630      	mov	r0, r6
 8005976:	f000 f889 	bl	8005a8c <_isatty_r>
 800597a:	b128      	cbz	r0, 8005988 <__smakebuf_r+0x74>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	89a0      	ldrh	r0, [r4, #12]
 800598a:	4305      	orrs	r5, r0
 800598c:	81a5      	strh	r5, [r4, #12]
 800598e:	e7cd      	b.n	800592c <__smakebuf_r+0x18>
 8005990:	08004c09 	.word	0x08004c09

08005994 <__malloc_lock>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__malloc_lock+0x8>)
 8005996:	f7ff ba09 	b.w	8004dac <__retarget_lock_acquire_recursive>
 800599a:	bf00      	nop
 800599c:	20000158 	.word	0x20000158

080059a0 <__malloc_unlock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__malloc_unlock+0x8>)
 80059a2:	f7ff ba04 	b.w	8004dae <__retarget_lock_release_recursive>
 80059a6:	bf00      	nop
 80059a8:	20000158 	.word	0x20000158

080059ac <_free_r>:
 80059ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059ae:	2900      	cmp	r1, #0
 80059b0:	d044      	beq.n	8005a3c <_free_r+0x90>
 80059b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b6:	9001      	str	r0, [sp, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f1a1 0404 	sub.w	r4, r1, #4
 80059be:	bfb8      	it	lt
 80059c0:	18e4      	addlt	r4, r4, r3
 80059c2:	f7ff ffe7 	bl	8005994 <__malloc_lock>
 80059c6:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <_free_r+0x94>)
 80059c8:	9801      	ldr	r0, [sp, #4]
 80059ca:	6813      	ldr	r3, [r2, #0]
 80059cc:	b933      	cbnz	r3, 80059dc <_free_r+0x30>
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	6014      	str	r4, [r2, #0]
 80059d2:	b003      	add	sp, #12
 80059d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059d8:	f7ff bfe2 	b.w	80059a0 <__malloc_unlock>
 80059dc:	42a3      	cmp	r3, r4
 80059de:	d908      	bls.n	80059f2 <_free_r+0x46>
 80059e0:	6825      	ldr	r5, [r4, #0]
 80059e2:	1961      	adds	r1, r4, r5
 80059e4:	428b      	cmp	r3, r1
 80059e6:	bf01      	itttt	eq
 80059e8:	6819      	ldreq	r1, [r3, #0]
 80059ea:	685b      	ldreq	r3, [r3, #4]
 80059ec:	1949      	addeq	r1, r1, r5
 80059ee:	6021      	streq	r1, [r4, #0]
 80059f0:	e7ed      	b.n	80059ce <_free_r+0x22>
 80059f2:	461a      	mov	r2, r3
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	b10b      	cbz	r3, 80059fc <_free_r+0x50>
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	d9fa      	bls.n	80059f2 <_free_r+0x46>
 80059fc:	6811      	ldr	r1, [r2, #0]
 80059fe:	1855      	adds	r5, r2, r1
 8005a00:	42a5      	cmp	r5, r4
 8005a02:	d10b      	bne.n	8005a1c <_free_r+0x70>
 8005a04:	6824      	ldr	r4, [r4, #0]
 8005a06:	4421      	add	r1, r4
 8005a08:	1854      	adds	r4, r2, r1
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	6011      	str	r1, [r2, #0]
 8005a0e:	d1e0      	bne.n	80059d2 <_free_r+0x26>
 8005a10:	681c      	ldr	r4, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	6053      	str	r3, [r2, #4]
 8005a16:	4421      	add	r1, r4
 8005a18:	6011      	str	r1, [r2, #0]
 8005a1a:	e7da      	b.n	80059d2 <_free_r+0x26>
 8005a1c:	d902      	bls.n	8005a24 <_free_r+0x78>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	6003      	str	r3, [r0, #0]
 8005a22:	e7d6      	b.n	80059d2 <_free_r+0x26>
 8005a24:	6825      	ldr	r5, [r4, #0]
 8005a26:	1961      	adds	r1, r4, r5
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	bf04      	itt	eq
 8005a2c:	6819      	ldreq	r1, [r3, #0]
 8005a2e:	685b      	ldreq	r3, [r3, #4]
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	bf04      	itt	eq
 8005a34:	1949      	addeq	r1, r1, r5
 8005a36:	6021      	streq	r1, [r4, #0]
 8005a38:	6054      	str	r4, [r2, #4]
 8005a3a:	e7ca      	b.n	80059d2 <_free_r+0x26>
 8005a3c:	b003      	add	sp, #12
 8005a3e:	bd30      	pop	{r4, r5, pc}
 8005a40:	2000015c 	.word	0x2000015c

08005a44 <_read_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d07      	ldr	r5, [pc, #28]	; (8005a64 <_read_r+0x20>)
 8005a48:	4604      	mov	r4, r0
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	2200      	movs	r2, #0
 8005a50:	602a      	str	r2, [r5, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f7fb f91e 	bl	8000c94 <_read>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_read_r+0x1e>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_read_r+0x1e>
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	20000164 	.word	0x20000164

08005a68 <_fstat_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d07      	ldr	r5, [pc, #28]	; (8005a88 <_fstat_r+0x20>)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4608      	mov	r0, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	602b      	str	r3, [r5, #0]
 8005a76:	f7fb f936 	bl	8000ce6 <_fstat>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	d102      	bne.n	8005a84 <_fstat_r+0x1c>
 8005a7e:	682b      	ldr	r3, [r5, #0]
 8005a80:	b103      	cbz	r3, 8005a84 <_fstat_r+0x1c>
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	bd38      	pop	{r3, r4, r5, pc}
 8005a86:	bf00      	nop
 8005a88:	20000164 	.word	0x20000164

08005a8c <_isatty_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d06      	ldr	r5, [pc, #24]	; (8005aa8 <_isatty_r+0x1c>)
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	f7fb f935 	bl	8000d06 <_isatty>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d102      	bne.n	8005aa6 <_isatty_r+0x1a>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b103      	cbz	r3, 8005aa6 <_isatty_r+0x1a>
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	20000164 	.word	0x20000164

08005aac <_init>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr

08005ab8 <_fini>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr
