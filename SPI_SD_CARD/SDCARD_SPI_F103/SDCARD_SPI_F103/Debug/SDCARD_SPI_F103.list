
SDCARD_SPI_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007368  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a0  080078a0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080078a0  080078a0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078a0  080078a0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080078a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000088  08007930  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08007930  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae58  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214b  00000000  00000000  0002af09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001501b  00000000  00000000  0002e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da12  00000000  00000000  0004361b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d865  00000000  00000000  0005102d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  000be8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800745c 	.word	0x0800745c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800745c 	.word	0x0800745c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2uiz>:
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	d211      	bcs.n	8000750 <__aeabi_d2uiz+0x28>
 800072c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000730:	d211      	bcs.n	8000756 <__aeabi_d2uiz+0x2e>
 8000732:	d50d      	bpl.n	8000750 <__aeabi_d2uiz+0x28>
 8000734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800073c:	d40e      	bmi.n	800075c <__aeabi_d2uiz+0x34>
 800073e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074a:	fa23 f002 	lsr.w	r0, r3, r2
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075a:	d102      	bne.n	8000762 <__aeabi_d2uiz+0x3a>
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr

08000768 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2101      	movs	r1, #1
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <SELECT+0x18>)
 8000772:	f001 fc5f 	bl	8002034 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f001 f9d0 	bl	8001b1c <HAL_Delay>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010c00 	.word	0x40010c00

08000784 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <DESELECT+0x18>)
 800078e:	f001 fc51 	bl	8002034 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000792:	2001      	movs	r0, #1
 8000794:	f001 f9c2 	bl	8001b1c <HAL_Delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40010c00 	.word	0x40010c00

080007a0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007aa:	bf00      	nop
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <SPI_TxByte+0x30>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d1f8      	bne.n	80007ac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80007ba:	1df9      	adds	r1, r7, #7
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	2201      	movs	r2, #1
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <SPI_TxByte+0x30>)
 80007c2:	f002 f8ca 	bl	800295a <HAL_SPI_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000a8 	.word	0x200000a8

080007d4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007e0:	bf00      	nop
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <SPI_TxBuffer+0x30>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d1f8      	bne.n	80007e2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80007f0:	887a      	ldrh	r2, [r7, #2]
 80007f2:	2364      	movs	r3, #100	; 0x64
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <SPI_TxBuffer+0x30>)
 80007f8:	f002 f8af 	bl	800295a <HAL_SPI_Transmit>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000a8 	.word	0x200000a8

08000808 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800080e:	23ff      	movs	r3, #255	; 0xff
 8000810:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000812:	bf00      	nop
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <SPI_RxByte+0x34>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b02      	cmp	r3, #2
 8000820:	d1f8      	bne.n	8000814 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000822:	1dba      	adds	r2, r7, #6
 8000824:	1df9      	adds	r1, r7, #7
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2301      	movs	r3, #1
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <SPI_RxByte+0x34>)
 800082e:	f002 f9c8 	bl	8002bc2 <HAL_SPI_TransmitReceive>

	return data;
 8000832:	79bb      	ldrb	r3, [r7, #6]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000a8 	.word	0x200000a8

08000840 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000848:	f7ff ffde 	bl	8000808 <SPI_RxByte>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	701a      	strb	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <SD_ReadyWait+0x30>)
 8000864:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000868:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800086a:	f7ff ffcd 	bl	8000808 <SPI_RxByte>
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2bff      	cmp	r3, #255	; 0xff
 8000876:	d004      	beq.n	8000882 <SD_ReadyWait+0x26>
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <SD_ReadyWait+0x30>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	b29b      	uxth	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f3      	bne.n	800086a <SD_ReadyWait+0xe>

	return res;
 8000882:	79fb      	ldrb	r3, [r7, #7]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000063c 	.word	0x2000063c

08000890 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000896:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800089a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800089c:	f7ff ff72 	bl	8000784 <DESELECT>
	for(int i = 0; i < 10; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	e005      	b.n	80008b2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80008a6:	20ff      	movs	r0, #255	; 0xff
 80008a8:	f7ff ff7a 	bl	80007a0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b09      	cmp	r3, #9
 80008b6:	ddf6      	ble.n	80008a6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80008b8:	f7ff ff56 	bl	8000768 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80008d0:	2395      	movs	r3, #149	; 0x95
 80008d2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80008d4:	463b      	mov	r3, r7
 80008d6:	2106      	movs	r1, #6
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff7b 	bl	80007d4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80008de:	e002      	b.n	80008e6 <SD_PowerOn+0x56>
	{
		cnt--;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80008e6:	f7ff ff8f 	bl	8000808 <SPI_RxByte>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d002      	beq.n	80008f6 <SD_PowerOn+0x66>
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f4      	bne.n	80008e0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80008f6:	f7ff ff45 	bl	8000784 <DESELECT>
	SPI_TxByte(0XFF);
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	f7ff ff50 	bl	80007a0 <SPI_TxByte>

	PowerFlag = 1;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <SD_PowerOn+0x80>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000a5 	.word	0x200000a5

08000914 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <SD_PowerOff+0x14>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	200000a5 	.word	0x200000a5

0800092c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <SD_CheckPower+0x10>)
 8000932:	781b      	ldrb	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	200000a5 	.word	0x200000a5

08000940 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <SD_RxDataBlock+0x5c>)
 800094c:	22c8      	movs	r2, #200	; 0xc8
 800094e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000950:	f7ff ff5a 	bl	8000808 <SPI_RxByte>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	2bff      	cmp	r3, #255	; 0xff
 800095c:	d104      	bne.n	8000968 <SD_RxDataBlock+0x28>
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <SD_RxDataBlock+0x5c>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1f3      	bne.n	8000950 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2bfe      	cmp	r3, #254	; 0xfe
 800096c:	d001      	beq.n	8000972 <SD_RxDataBlock+0x32>
 800096e:	2300      	movs	r3, #0
 8000970:	e00f      	b.n	8000992 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff61 	bl	8000840 <SPI_RxBytePtr>
	} while(len--);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	603a      	str	r2, [r7, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1f4      	bne.n	8000972 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000988:	f7ff ff3e 	bl	8000808 <SPI_RxByte>
	SPI_RxByte();
 800098c:	f7ff ff3c 	bl	8000808 <SPI_RxByte>

	return TRUE;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000063a 	.word	0x2000063a

080009a0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80009b0:	f7ff ff54 	bl	800085c <SD_ReadyWait>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d001      	beq.n	80009be <SD_TxDataBlock+0x1e>
 80009ba:	2300      	movs	r3, #0
 80009bc:	e02f      	b.n	8000a1e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80009be:	78fb      	ldrb	r3, [r7, #3]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff feed 	bl	80007a0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2bfd      	cmp	r3, #253	; 0xfd
 80009ca:	d020      	beq.n	8000a0e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff feff 	bl	80007d4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80009d6:	f7ff ff17 	bl	8000808 <SPI_RxByte>
		SPI_RxByte();
 80009da:	f7ff ff15 	bl	8000808 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80009de:	e00b      	b.n	80009f8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80009e0:	f7ff ff12 	bl	8000808 <SPI_RxByte>
 80009e4:	4603      	mov	r3, r0
 80009e6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	2b05      	cmp	r3, #5
 80009f0:	d006      	beq.n	8000a00 <SD_TxDataBlock+0x60>
			i++;
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	3301      	adds	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d9f0      	bls.n	80009e0 <SD_TxDataBlock+0x40>
 80009fe:	e000      	b.n	8000a02 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000a00:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000a02:	bf00      	nop
 8000a04:	f7ff ff00 	bl	8000808 <SPI_RxByte>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0fa      	beq.n	8000a04 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	f003 031f 	and.w	r3, r3, #31
 8000a14:	2b05      	cmp	r3, #5
 8000a16:	d101      	bne.n	8000a1c <SD_TxDataBlock+0x7c>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	6039      	str	r1, [r7, #0]
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000a32:	f7ff ff13 	bl	800085c <SD_ReadyWait>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d001      	beq.n	8000a40 <SD_SendCmd+0x1a>
 8000a3c:	23ff      	movs	r3, #255	; 0xff
 8000a3e:	e042      	b.n	8000ac6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff feac 	bl	80007a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	0e1b      	lsrs	r3, r3, #24
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fea6 	bl	80007a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	0c1b      	lsrs	r3, r3, #16
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fea0 	bl	80007a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fe9a 	bl	80007a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe95 	bl	80007a0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b40      	cmp	r3, #64	; 0x40
 8000a7a:	d102      	bne.n	8000a82 <SD_SendCmd+0x5c>
 8000a7c:	2395      	movs	r3, #149	; 0x95
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e007      	b.n	8000a92 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b48      	cmp	r3, #72	; 0x48
 8000a86:	d102      	bne.n	8000a8e <SD_SendCmd+0x68>
 8000a88:	2387      	movs	r3, #135	; 0x87
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e001      	b.n	8000a92 <SD_SendCmd+0x6c>
	else crc = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe83 	bl	80007a0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b4c      	cmp	r3, #76	; 0x4c
 8000a9e:	d101      	bne.n	8000aa4 <SD_SendCmd+0x7e>
 8000aa0:	f7ff feb2 	bl	8000808 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000aa8:	f7ff feae 	bl	8000808 <SPI_RxByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ab0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da05      	bge.n	8000ac4 <SD_SendCmd+0x9e>
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f1      	bne.n	8000aa8 <SD_SendCmd+0x82>

	return res;
 8000ac4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_initialize+0x14>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e0d6      	b.n	8000c92 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000ae4:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <SD_disk_initialize+0x1cc>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <SD_disk_initialize+0x2a>
 8000af2:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <SD_disk_initialize+0x1cc>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	e0cb      	b.n	8000c92 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000afa:	f7ff fec9 	bl	8000890 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000afe:	f7ff fe33 	bl	8000768 <SELECT>

	/* check disk type */
	type = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000b06:	2100      	movs	r1, #0
 8000b08:	2040      	movs	r0, #64	; 0x40
 8000b0a:	f7ff ff8c 	bl	8000a26 <SD_SendCmd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	f040 80a6 	bne.w	8000c62 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000b16:	4b62      	ldr	r3, [pc, #392]	; (8000ca0 <SD_disk_initialize+0x1d0>)
 8000b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b1c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000b22:	2048      	movs	r0, #72	; 0x48
 8000b24:	f7ff ff7f 	bl	8000a26 <SD_SendCmd>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d158      	bne.n	8000be0 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e00c      	b.n	8000b4e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000b34:	7bfc      	ldrb	r4, [r7, #15]
 8000b36:	f7ff fe67 	bl	8000808 <SPI_RxByte>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f104 0310 	add.w	r3, r4, #16
 8000b42:	443b      	add	r3, r7
 8000b44:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d9ef      	bls.n	8000b34 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b54:	7abb      	ldrb	r3, [r7, #10]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	f040 8083 	bne.w	8000c62 <SD_disk_initialize+0x192>
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	2baa      	cmp	r3, #170	; 0xaa
 8000b60:	d17f      	bne.n	8000c62 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b62:	2100      	movs	r1, #0
 8000b64:	2077      	movs	r0, #119	; 0x77
 8000b66:	f7ff ff5e 	bl	8000a26 <SD_SendCmd>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d807      	bhi.n	8000b80 <SD_disk_initialize+0xb0>
 8000b70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b74:	2069      	movs	r0, #105	; 0x69
 8000b76:	f7ff ff56 	bl	8000a26 <SD_SendCmd>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000b80:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <SD_disk_initialize+0x1d0>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1eb      	bne.n	8000b62 <SD_disk_initialize+0x92>
 8000b8a:	e000      	b.n	8000b8e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b8c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <SD_disk_initialize+0x1d0>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d064      	beq.n	8000c62 <SD_disk_initialize+0x192>
 8000b98:	2100      	movs	r1, #0
 8000b9a:	207a      	movs	r0, #122	; 0x7a
 8000b9c:	f7ff ff43 	bl	8000a26 <SD_SendCmd>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d15d      	bne.n	8000c62 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e00c      	b.n	8000bc6 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000bac:	7bfc      	ldrb	r4, [r7, #15]
 8000bae:	f7ff fe2b 	bl	8000808 <SPI_RxByte>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f104 0310 	add.w	r3, r4, #16
 8000bba:	443b      	add	r3, r7
 8000bbc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d9ef      	bls.n	8000bac <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000bcc:	7a3b      	ldrb	r3, [r7, #8]
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SD_disk_initialize+0x10a>
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	e000      	b.n	8000bdc <SD_disk_initialize+0x10c>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	73bb      	strb	r3, [r7, #14]
 8000bde:	e040      	b.n	8000c62 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000be0:	2100      	movs	r1, #0
 8000be2:	2077      	movs	r0, #119	; 0x77
 8000be4:	f7ff ff1f 	bl	8000a26 <SD_SendCmd>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d808      	bhi.n	8000c00 <SD_disk_initialize+0x130>
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2069      	movs	r0, #105	; 0x69
 8000bf2:	f7ff ff18 	bl	8000a26 <SD_SendCmd>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d801      	bhi.n	8000c00 <SD_disk_initialize+0x130>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e000      	b.n	8000c02 <SD_disk_initialize+0x132>
 8000c00:	2301      	movs	r3, #1
 8000c02:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d10e      	bne.n	8000c28 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2077      	movs	r0, #119	; 0x77
 8000c0e:	f7ff ff0a 	bl	8000a26 <SD_SendCmd>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d80e      	bhi.n	8000c36 <SD_disk_initialize+0x166>
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2069      	movs	r0, #105	; 0x69
 8000c1c:	f7ff ff03 	bl	8000a26 <SD_SendCmd>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d107      	bne.n	8000c36 <SD_disk_initialize+0x166>
 8000c26:	e00d      	b.n	8000c44 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2041      	movs	r0, #65	; 0x41
 8000c2c:	f7ff fefb 	bl	8000a26 <SD_SendCmd>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <SD_disk_initialize+0x1d0>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1e1      	bne.n	8000c04 <SD_disk_initialize+0x134>
 8000c40:	e000      	b.n	8000c44 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c42:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <SD_disk_initialize+0x1d0>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <SD_disk_initialize+0x18e>
 8000c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c52:	2050      	movs	r0, #80	; 0x50
 8000c54:	f7ff fee7 	bl	8000a26 <SD_SendCmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SD_disk_initialize+0x192>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <SD_disk_initialize+0x1d4>)
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000c68:	f7ff fd8c 	bl	8000784 <DESELECT>
	SPI_RxByte();
 8000c6c:	f7ff fdcc 	bl	8000808 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d008      	beq.n	8000c88 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <SD_disk_initialize+0x1cc>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f023 0301 	bic.w	r3, r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SD_disk_initialize+0x1cc>)
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e001      	b.n	8000c8c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000c88:	f7ff fe44 	bl	8000914 <SD_PowerOff>
	}

	return Stat;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <SD_disk_initialize+0x1cc>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	2000063a 	.word	0x2000063a
 8000ca4:	200000a4 	.word	0x200000a4

08000ca8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SD_disk_status+0x14>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e002      	b.n	8000cc2 <SD_disk_status+0x1a>
	return Stat;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <SD_disk_status+0x24>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000000 	.word	0x20000000

08000cd0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <SD_disk_read+0x1c>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <SD_disk_read+0x20>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e051      	b.n	8000d94 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <SD_disk_read+0xcc>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SD_disk_read+0x32>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e048      	b.n	8000d94 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <SD_disk_read+0xd0>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <SD_disk_read+0x44>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	025b      	lsls	r3, r3, #9
 8000d12:	607b      	str	r3, [r7, #4]

	SELECT();
 8000d14:	f7ff fd28 	bl	8000768 <SELECT>

	if (count == 1)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d111      	bne.n	8000d42 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	2051      	movs	r0, #81	; 0x51
 8000d22:	f7ff fe80 	bl	8000a26 <SD_SendCmd>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d129      	bne.n	8000d80 <SD_disk_read+0xb0>
 8000d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f7ff fe05 	bl	8000940 <SD_RxDataBlock>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d021      	beq.n	8000d80 <SD_disk_read+0xb0>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	e01e      	b.n	8000d80 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2052      	movs	r0, #82	; 0x52
 8000d46:	f7ff fe6e 	bl	8000a26 <SD_SendCmd>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d117      	bne.n	8000d80 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f7ff fdf3 	bl	8000940 <SD_RxDataBlock>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00a      	beq.n	8000d76 <SD_disk_read+0xa6>
				buff += 512;
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d66:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1ed      	bne.n	8000d50 <SD_disk_read+0x80>
 8000d74:	e000      	b.n	8000d78 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d76:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	204c      	movs	r0, #76	; 0x4c
 8000d7c:	f7ff fe53 	bl	8000a26 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000d80:	f7ff fd00 	bl	8000784 <DESELECT>
	SPI_RxByte();
 8000d84:	f7ff fd40 	bl	8000808 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf14      	ite	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	2300      	moveq	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	200000a4 	.word	0x200000a4

08000da4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <SD_disk_write+0x1c>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <SD_disk_write+0x20>
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	e06b      	b.n	8000e9c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <SD_disk_write+0x100>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SD_disk_write+0x32>
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e062      	b.n	8000e9c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000dd6:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <SD_disk_write+0x100>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SD_disk_write+0x44>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e059      	b.n	8000e9c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <SD_disk_write+0x104>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <SD_disk_write+0x56>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	607b      	str	r3, [r7, #4]

	SELECT();
 8000dfa:	f7ff fcb5 	bl	8000768 <SELECT>

	if (count == 1)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d110      	bne.n	8000e26 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	2058      	movs	r0, #88	; 0x58
 8000e08:	f7ff fe0d 	bl	8000a26 <SD_SendCmd>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d13a      	bne.n	8000e88 <SD_disk_write+0xe4>
 8000e12:	21fe      	movs	r1, #254	; 0xfe
 8000e14:	68b8      	ldr	r0, [r7, #8]
 8000e16:	f7ff fdc3 	bl	80009a0 <SD_TxDataBlock>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d033      	beq.n	8000e88 <SD_disk_write+0xe4>
			count = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	e030      	b.n	8000e88 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <SD_disk_write+0x104>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2077      	movs	r0, #119	; 0x77
 8000e36:	f7ff fdf6 	bl	8000a26 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e3a:	6839      	ldr	r1, [r7, #0]
 8000e3c:	2057      	movs	r0, #87	; 0x57
 8000e3e:	f7ff fdf2 	bl	8000a26 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	2059      	movs	r0, #89	; 0x59
 8000e46:	f7ff fdee 	bl	8000a26 <SD_SendCmd>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d11b      	bne.n	8000e88 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e50:	21fc      	movs	r1, #252	; 0xfc
 8000e52:	68b8      	ldr	r0, [r7, #8]
 8000e54:	f7ff fda4 	bl	80009a0 <SD_TxDataBlock>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00a      	beq.n	8000e74 <SD_disk_write+0xd0>
				buff += 512;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e64:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1ee      	bne.n	8000e50 <SD_disk_write+0xac>
 8000e72:	e000      	b.n	8000e76 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e74:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000e76:	21fd      	movs	r1, #253	; 0xfd
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fd91 	bl	80009a0 <SD_TxDataBlock>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <SD_disk_write+0xe4>
			{
				count = 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000e88:	f7ff fc7c 	bl	8000784 <DESELECT>
	SPI_RxByte();
 8000e8c:	f7ff fcbc 	bl	8000808 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	200000a4 	.word	0x200000a4

08000eac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	603a      	str	r2, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SD_disk_ioctl+0x1e>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e115      	b.n	80010f6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	d124      	bne.n	8000f20 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d012      	beq.n	8000f04 <SD_disk_ioctl+0x58>
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	dc1a      	bgt.n	8000f18 <SD_disk_ioctl+0x6c>
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <SD_disk_ioctl+0x40>
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d006      	beq.n	8000ef8 <SD_disk_ioctl+0x4c>
 8000eea:	e015      	b.n	8000f18 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000eec:	f7ff fd12 	bl	8000914 <SD_PowerOff>
			res = RES_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ef6:	e0fc      	b.n	80010f2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ef8:	f7ff fcca 	bl	8000890 <SD_PowerOn>
			res = RES_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f02:	e0f6      	b.n	80010f2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	1c5c      	adds	r4, r3, #1
 8000f08:	f7ff fd10 	bl	800092c <SD_CheckPower>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000f10:	2300      	movs	r3, #0
 8000f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f16:	e0ec      	b.n	80010f2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f1e:	e0e8      	b.n	80010f2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f20:	4b77      	ldr	r3, [pc, #476]	; (8001100 <SD_disk_ioctl+0x254>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SD_disk_ioctl+0x86>
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e0e1      	b.n	80010f6 <SD_disk_ioctl+0x24a>

		SELECT();
 8000f32:	f7ff fc19 	bl	8000768 <SELECT>

		switch (ctrl)
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	2b0d      	cmp	r3, #13
 8000f3a:	f200 80cb 	bhi.w	80010d4 <SD_disk_ioctl+0x228>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <SD_disk_ioctl+0x98>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	0800103f 	.word	0x0800103f
 8000f48:	08000f7d 	.word	0x08000f7d
 8000f4c:	0800102f 	.word	0x0800102f
 8000f50:	080010d5 	.word	0x080010d5
 8000f54:	080010d5 	.word	0x080010d5
 8000f58:	080010d5 	.word	0x080010d5
 8000f5c:	080010d5 	.word	0x080010d5
 8000f60:	080010d5 	.word	0x080010d5
 8000f64:	080010d5 	.word	0x080010d5
 8000f68:	080010d5 	.word	0x080010d5
 8000f6c:	080010d5 	.word	0x080010d5
 8000f70:	08001051 	.word	0x08001051
 8000f74:	08001075 	.word	0x08001075
 8000f78:	08001099 	.word	0x08001099
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2049      	movs	r0, #73	; 0x49
 8000f80:	f7ff fd51 	bl	8000a26 <SD_SendCmd>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 80a8 	bne.w	80010dc <SD_disk_ioctl+0x230>
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2110      	movs	r1, #16
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fcd4 	bl	8000940 <SD_RxDataBlock>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 809e 	beq.w	80010dc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	099b      	lsrs	r3, r3, #6
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10e      	bne.n	8000fc8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000faa:	7d7b      	ldrb	r3, [r7, #21]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	7d3b      	ldrb	r3, [r7, #20]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000fbe:	8bfb      	ldrh	r3, [r7, #30]
 8000fc0:	029a      	lsls	r2, r3, #10
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e02e      	b.n	8001026 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000fc8:	7c7b      	ldrb	r3, [r7, #17]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	7dbb      	ldrb	r3, [r7, #22]
 8000fd2:	09db      	lsrs	r3, r3, #7
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	7d7b      	ldrb	r3, [r7, #21]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 0306 	and.w	r3, r3, #6
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3302      	adds	r3, #2
 8000fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ff0:	7d3b      	ldrb	r3, [r7, #20]
 8000ff2:	099b      	lsrs	r3, r3, #6
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	7cfb      	ldrb	r3, [r7, #19]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4413      	add	r3, r2
 8001002:	b29a      	uxth	r2, r3
 8001004:	7cbb      	ldrb	r3, [r7, #18]
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	b29b      	uxth	r3, r3
 800100a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	b29b      	uxth	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001018:	8bfa      	ldrh	r2, [r7, #30]
 800101a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800101e:	3b09      	subs	r3, #9
 8001020:	409a      	lsls	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800102c:	e056      	b.n	80010dc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800103c:	e055      	b.n	80010ea <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800103e:	f7ff fc0d 	bl	800085c <SD_ReadyWait>
 8001042:	4603      	mov	r3, r0
 8001044:	2bff      	cmp	r3, #255	; 0xff
 8001046:	d14b      	bne.n	80010e0 <SD_disk_ioctl+0x234>
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800104e:	e047      	b.n	80010e0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001050:	2100      	movs	r1, #0
 8001052:	2049      	movs	r0, #73	; 0x49
 8001054:	f7ff fce7 	bl	8000a26 <SD_SendCmd>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d142      	bne.n	80010e4 <SD_disk_ioctl+0x238>
 800105e:	2110      	movs	r1, #16
 8001060:	6a38      	ldr	r0, [r7, #32]
 8001062:	f7ff fc6d 	bl	8000940 <SD_RxDataBlock>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d03b      	beq.n	80010e4 <SD_disk_ioctl+0x238>
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001072:	e037      	b.n	80010e4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001074:	2100      	movs	r1, #0
 8001076:	204a      	movs	r0, #74	; 0x4a
 8001078:	f7ff fcd5 	bl	8000a26 <SD_SendCmd>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d132      	bne.n	80010e8 <SD_disk_ioctl+0x23c>
 8001082:	2110      	movs	r1, #16
 8001084:	6a38      	ldr	r0, [r7, #32]
 8001086:	f7ff fc5b 	bl	8000940 <SD_RxDataBlock>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d02b      	beq.n	80010e8 <SD_disk_ioctl+0x23c>
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001096:	e027      	b.n	80010e8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001098:	2100      	movs	r1, #0
 800109a:	207a      	movs	r0, #122	; 0x7a
 800109c:	f7ff fcc3 	bl	8000a26 <SD_SendCmd>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d116      	bne.n	80010d4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010ac:	e00b      	b.n	80010c6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80010ae:	6a3c      	ldr	r4, [r7, #32]
 80010b0:	1c63      	adds	r3, r4, #1
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	f7ff fba8 	bl	8000808 <SPI_RxByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80010bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c0:	3301      	adds	r3, #1
 80010c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d9ef      	bls.n	80010ae <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80010d4:	2304      	movs	r3, #4
 80010d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010da:	e006      	b.n	80010ea <SD_disk_ioctl+0x23e>
			break;
 80010dc:	bf00      	nop
 80010de:	e004      	b.n	80010ea <SD_disk_ioctl+0x23e>
			break;
 80010e0:	bf00      	nop
 80010e2:	e002      	b.n	80010ea <SD_disk_ioctl+0x23e>
			break;
 80010e4:	bf00      	nop
 80010e6:	e000      	b.n	80010ea <SD_disk_ioctl+0x23e>
			break;
 80010e8:	bf00      	nop
		}

		DESELECT();
 80010ea:	f7ff fb4b 	bl	8000784 <DESELECT>
		SPI_RxByte();
 80010ee:	f7ff fb8b 	bl	8000808 <SPI_RxByte>
	}

	return res;
 80010f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	372c      	adds	r7, #44	; 0x2c
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000

08001104 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	int i=0;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001110:	e002      	b.n	8001118 <bufsize+0x14>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f6      	bne.n	8001112 <bufsize+0xe>
	return i;
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <clear_buffer>:

void clear_buffer (void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e007      	b.n	800114c <clear_buffer+0x1c>
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <clear_buffer+0x30>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3301      	adds	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b7f      	cmp	r3, #127	; 0x7f
 8001150:	ddf4      	ble.n	800113c <clear_buffer+0xc>
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200005b8 	.word	0x200005b8

08001164 <send_uart>:

void send_uart (char *string)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7fe ffed 	bl	800014c <strlen>
 8001172:	4603      	mov	r3, r0
 8001174:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	b29a      	uxth	r2, r3
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <send_uart+0x2c>)
 8001182:	f001 ff95 	bl	80030b0 <HAL_UART_Transmit>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000100 	.word	0x20000100

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f000 fc5e 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119c:	f000 f9b8 	bl	8001510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f000 fa5c 	bl	800165c <MX_GPIO_Init>
  MX_SPI1_Init();
 80011a4:	f000 f9fa 	bl	800159c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011a8:	f000 fa2e 	bl	8001608 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80011ac:	f002 f93e 	bl	800342c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay (500);
 80011b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b4:	f000 fcb2 	bl	8001b1c <HAL_Delay>

  fresult = f_mount(&fs, "/", 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	49b3      	ldr	r1, [pc, #716]	; (8001488 <main+0x2f4>)
 80011bc:	48b3      	ldr	r0, [pc, #716]	; (800148c <main+0x2f8>)
 80011be:	f004 f8c3 	bl	8005348 <f_mount>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	4bb2      	ldr	r3, [pc, #712]	; (8001490 <main+0x2fc>)
 80011c8:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 80011ca:	4bb1      	ldr	r3, [pc, #708]	; (8001490 <main+0x2fc>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <main+0x46>
 80011d2:	48b0      	ldr	r0, [pc, #704]	; (8001494 <main+0x300>)
 80011d4:	f7ff ffc6 	bl	8001164 <send_uart>
 80011d8:	e002      	b.n	80011e0 <main+0x4c>
  	else send_uart("SD CARD mounted successfully...\n\n");
 80011da:	48af      	ldr	r0, [pc, #700]	; (8001498 <main+0x304>)
 80011dc:	f7ff ffc2 	bl	8001164 <send_uart>


  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 80011e0:	4aae      	ldr	r2, [pc, #696]	; (800149c <main+0x308>)
 80011e2:	49af      	ldr	r1, [pc, #700]	; (80014a0 <main+0x30c>)
 80011e4:	48af      	ldr	r0, [pc, #700]	; (80014a4 <main+0x310>)
 80011e6:	f005 f9c8 	bl	800657a <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80011ea:	4bac      	ldr	r3, [pc, #688]	; (800149c <main+0x308>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80011f2:	3b02      	subs	r3, #2
 80011f4:	4aa9      	ldr	r2, [pc, #676]	; (800149c <main+0x308>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80011fc:	fb02 f303 	mul.w	r3, r2, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fa17 	bl	8000634 <__aeabi_ui2d>
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4ba7      	ldr	r3, [pc, #668]	; (80014a8 <main+0x314>)
 800120c:	f7fe ffa6 	bl	800015c <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fa86 	bl	8000728 <__aeabi_d2uiz>
 800121c:	4603      	mov	r3, r0
 800121e:	4aa3      	ldr	r2, [pc, #652]	; (80014ac <main+0x318>)
 8001220:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8001222:	4ba2      	ldr	r3, [pc, #648]	; (80014ac <main+0x318>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	49a1      	ldr	r1, [pc, #644]	; (80014b0 <main+0x31c>)
 800122a:	48a2      	ldr	r0, [pc, #648]	; (80014b4 <main+0x320>)
 800122c:	f005 fcaa 	bl	8006b84 <siprintf>
  	send_uart(buffer);
 8001230:	48a0      	ldr	r0, [pc, #640]	; (80014b4 <main+0x320>)
 8001232:	f7ff ff97 	bl	8001164 <send_uart>
  	clear_buffer();
 8001236:	f7ff ff7b 	bl	8001130 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800123a:	4b98      	ldr	r3, [pc, #608]	; (800149c <main+0x308>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001242:	461a      	mov	r2, r3
 8001244:	4b96      	ldr	r3, [pc, #600]	; (80014a0 <main+0x30c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f9f1 	bl	8000634 <__aeabi_ui2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b94      	ldr	r3, [pc, #592]	; (80014a8 <main+0x314>)
 8001258:	f7fe ff80 	bl	800015c <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fa60 	bl	8000728 <__aeabi_d2uiz>
 8001268:	4603      	mov	r3, r0
 800126a:	4a93      	ldr	r2, [pc, #588]	; (80014b8 <main+0x324>)
 800126c:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 800126e:	4b92      	ldr	r3, [pc, #584]	; (80014b8 <main+0x324>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4991      	ldr	r1, [pc, #580]	; (80014bc <main+0x328>)
 8001276:	488f      	ldr	r0, [pc, #572]	; (80014b4 <main+0x320>)
 8001278:	f005 fc84 	bl	8006b84 <siprintf>
  	send_uart(buffer);
 800127c:	488d      	ldr	r0, [pc, #564]	; (80014b4 <main+0x320>)
 800127e:	f7ff ff71 	bl	8001164 <send_uart>
  	clear_buffer();
 8001282:	f7ff ff55 	bl	8001130 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001286:	2213      	movs	r2, #19
 8001288:	498d      	ldr	r1, [pc, #564]	; (80014c0 <main+0x32c>)
 800128a:	488e      	ldr	r0, [pc, #568]	; (80014c4 <main+0x330>)
 800128c:	f004 f8a4 	bl	80053d8 <f_open>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b7e      	ldr	r3, [pc, #504]	; (8001490 <main+0x2fc>)
 8001296:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 8001298:	498a      	ldr	r1, [pc, #552]	; (80014c4 <main+0x330>)
 800129a:	488b      	ldr	r0, [pc, #556]	; (80014c8 <main+0x334>)
 800129c:	f005 fb9f 	bl	80069de <f_puts>

  	/* Close file */
  	fresult = f_close(&fil);
 80012a0:	4888      	ldr	r0, [pc, #544]	; (80014c4 <main+0x330>)
 80012a2:	f004 fee4 	bl	800606e <f_close>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b79      	ldr	r3, [pc, #484]	; (8001490 <main+0x2fc>)
 80012ac:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 80012ae:	4b78      	ldr	r3, [pc, #480]	; (8001490 <main+0x2fc>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <main+0x128>
 80012b6:	4885      	ldr	r0, [pc, #532]	; (80014cc <main+0x338>)
 80012b8:	f7ff ff54 	bl	8001164 <send_uart>

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 80012bc:	2201      	movs	r2, #1
 80012be:	4980      	ldr	r1, [pc, #512]	; (80014c0 <main+0x32c>)
 80012c0:	4880      	ldr	r0, [pc, #512]	; (80014c4 <main+0x330>)
 80012c2:	f004 f889 	bl	80053d8 <f_open>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b71      	ldr	r3, [pc, #452]	; (8001490 <main+0x2fc>)
 80012cc:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <main+0x330>)
 80012d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80012d4:	4a7b      	ldr	r2, [pc, #492]	; (80014c4 <main+0x330>)
 80012d6:	4619      	mov	r1, r3
 80012d8:	4876      	ldr	r0, [pc, #472]	; (80014b4 <main+0x320>)
 80012da:	f005 fb06 	bl	80068ea <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\n");
 80012de:	487c      	ldr	r0, [pc, #496]	; (80014d0 <main+0x33c>)
 80012e0:	f7ff ff40 	bl	8001164 <send_uart>
  	send_uart(buffer);
 80012e4:	4873      	ldr	r0, [pc, #460]	; (80014b4 <main+0x320>)
 80012e6:	f7ff ff3d 	bl	8001164 <send_uart>
  	send_uart("\n\n");
 80012ea:	487a      	ldr	r0, [pc, #488]	; (80014d4 <main+0x340>)
 80012ec:	f7ff ff3a 	bl	8001164 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80012f0:	4874      	ldr	r0, [pc, #464]	; (80014c4 <main+0x330>)
 80012f2:	f004 febc 	bl	800606e <f_close>

  	clear_buffer();
 80012f6:	f7ff ff1b 	bl	8001130 <clear_buffer>


  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80012fa:	220a      	movs	r2, #10
 80012fc:	4976      	ldr	r1, [pc, #472]	; (80014d8 <main+0x344>)
 80012fe:	4871      	ldr	r0, [pc, #452]	; (80014c4 <main+0x330>)
 8001300:	f004 f86a 	bl	80053d8 <f_open>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b61      	ldr	r3, [pc, #388]	; (8001490 <main+0x2fc>)
 800130a:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <main+0x320>)
 800130e:	4b73      	ldr	r3, [pc, #460]	; (80014dc <main+0x348>)
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	2357      	movs	r3, #87	; 0x57
 8001316:	461a      	mov	r2, r3
 8001318:	f005 fc1e 	bl	8006b58 <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 800131c:	4865      	ldr	r0, [pc, #404]	; (80014b4 <main+0x320>)
 800131e:	f7ff fef1 	bl	8001104 <bufsize>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b6e      	ldr	r3, [pc, #440]	; (80014e0 <main+0x34c>)
 8001328:	4962      	ldr	r1, [pc, #392]	; (80014b4 <main+0x320>)
 800132a:	4866      	ldr	r0, [pc, #408]	; (80014c4 <main+0x330>)
 800132c:	f004 fc38 	bl	8005ba0 <f_write>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b56      	ldr	r3, [pc, #344]	; (8001490 <main+0x2fc>)
 8001336:	701a      	strb	r2, [r3, #0]

  	send_uart ("File2.txt created and data is written\n");
 8001338:	486a      	ldr	r0, [pc, #424]	; (80014e4 <main+0x350>)
 800133a:	f7ff ff13 	bl	8001164 <send_uart>

  	/* Close file */
  	f_close(&fil);
 800133e:	4861      	ldr	r0, [pc, #388]	; (80014c4 <main+0x330>)
 8001340:	f004 fe95 	bl	800606e <f_close>



  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 8001344:	f7ff fef4 	bl	8001130 <clear_buffer>

  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 8001348:	2201      	movs	r2, #1
 800134a:	4963      	ldr	r1, [pc, #396]	; (80014d8 <main+0x344>)
 800134c:	485d      	ldr	r0, [pc, #372]	; (80014c4 <main+0x330>)
 800134e:	f004 f843 	bl	80053d8 <f_open>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <main+0x2fc>)
 8001358:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <main+0x2fc>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <main+0x1d4>
 8001362:	4861      	ldr	r0, [pc, #388]	; (80014e8 <main+0x354>)
 8001364:	f7ff fefe 	bl	8001164 <send_uart>

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <main+0x330>)
 800136a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800136e:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <main+0x358>)
 8001370:	4950      	ldr	r1, [pc, #320]	; (80014b4 <main+0x320>)
 8001372:	4854      	ldr	r0, [pc, #336]	; (80014c4 <main+0x330>)
 8001374:	f004 faa9 	bl	80058ca <f_read>
  	send_uart(buffer);
 8001378:	484e      	ldr	r0, [pc, #312]	; (80014b4 <main+0x320>)
 800137a:	f7ff fef3 	bl	8001164 <send_uart>
  	send_uart("\n\n");
 800137e:	4855      	ldr	r0, [pc, #340]	; (80014d4 <main+0x340>)
 8001380:	f7ff fef0 	bl	8001164 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001384:	484f      	ldr	r0, [pc, #316]	; (80014c4 <main+0x330>)
 8001386:	f004 fe72 	bl	800606e <f_close>

  	clear_buffer();
 800138a:	f7ff fed1 	bl	8001130 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800138e:	2203      	movs	r2, #3
 8001390:	4951      	ldr	r1, [pc, #324]	; (80014d8 <main+0x344>)
 8001392:	484c      	ldr	r0, [pc, #304]	; (80014c4 <main+0x330>)
 8001394:	f004 f820 	bl	80053d8 <f_open>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <main+0x2fc>)
 800139e:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 80013a0:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <main+0x330>)
 80013a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4846      	ldr	r0, [pc, #280]	; (80014c4 <main+0x330>)
 80013aa:	f004 fe88 	bl	80060be <f_lseek>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <main+0x2fc>)
 80013b4:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <main+0x2fc>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <main+0x230>
 80013be:	484c      	ldr	r0, [pc, #304]	; (80014f0 <main+0x35c>)
 80013c0:	f7ff fed0 	bl	8001164 <send_uart>

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80013c4:	493f      	ldr	r1, [pc, #252]	; (80014c4 <main+0x330>)
 80013c6:	484b      	ldr	r0, [pc, #300]	; (80014f4 <main+0x360>)
 80013c8:	f005 fb09 	bl	80069de <f_puts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <main+0x2fc>)
 80013d2:	701a      	strb	r2, [r3, #0]

  	f_close (&fil);
 80013d4:	483b      	ldr	r0, [pc, #236]	; (80014c4 <main+0x330>)
 80013d6:	f004 fe4a 	bl	800606e <f_close>

  	clear_buffer();
 80013da:	f7ff fea9 	bl	8001130 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 80013de:	2201      	movs	r2, #1
 80013e0:	493d      	ldr	r1, [pc, #244]	; (80014d8 <main+0x344>)
 80013e2:	4838      	ldr	r0, [pc, #224]	; (80014c4 <main+0x330>)
 80013e4:	f003 fff8 	bl	80053d8 <f_open>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <main+0x2fc>)
 80013ee:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <main+0x330>)
 80013f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <main+0x358>)
 80013f8:	492e      	ldr	r1, [pc, #184]	; (80014b4 <main+0x320>)
 80013fa:	4832      	ldr	r0, [pc, #200]	; (80014c4 <main+0x330>)
 80013fc:	f004 fa65 	bl	80058ca <f_read>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <main+0x2fc>)
 8001406:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <main+0x2fc>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <main+0x282>
 8001410:	4839      	ldr	r0, [pc, #228]	; (80014f8 <main+0x364>)
 8001412:	f7ff fea7 	bl	8001164 <send_uart>
  	send_uart(buffer);
 8001416:	4827      	ldr	r0, [pc, #156]	; (80014b4 <main+0x320>)
 8001418:	f7ff fea4 	bl	8001164 <send_uart>
  	send_uart("\n\n");
 800141c:	482d      	ldr	r0, [pc, #180]	; (80014d4 <main+0x340>)
 800141e:	f7ff fea1 	bl	8001164 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001422:	4828      	ldr	r0, [pc, #160]	; (80014c4 <main+0x330>)
 8001424:	f004 fe23 	bl	800606e <f_close>

  	clear_buffer();
 8001428:	f7ff fe82 	bl	8001130 <clear_buffer>


  	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

  	fresult = f_unlink("/file1.txt");
 800142c:	4833      	ldr	r0, [pc, #204]	; (80014fc <main+0x368>)
 800142e:	f005 f971 	bl	8006714 <f_unlink>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <main+0x2fc>)
 8001438:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <main+0x2fc>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <main+0x2b4>
 8001442:	482f      	ldr	r0, [pc, #188]	; (8001500 <main+0x36c>)
 8001444:	f7ff fe8e 	bl	8001164 <send_uart>

  	fresult = f_unlink("/file2.txt");
 8001448:	482e      	ldr	r0, [pc, #184]	; (8001504 <main+0x370>)
 800144a:	f005 f963 	bl	8006714 <f_unlink>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <main+0x2fc>)
 8001454:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <main+0x2fc>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <main+0x2d0>
 800145e:	482a      	ldr	r0, [pc, #168]	; (8001508 <main+0x374>)
 8001460:	f7ff fe80 	bl	8001164 <send_uart>

  	/* Unmount SDCARD */
  	fresult = f_mount(NULL, "/", 1);
 8001464:	2201      	movs	r2, #1
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <main+0x2f4>)
 8001468:	2000      	movs	r0, #0
 800146a:	f003 ff6d 	bl	8005348 <f_mount>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <main+0x2fc>)
 8001474:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <main+0x2fc>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <main+0x2f0>
 800147e:	4823      	ldr	r0, [pc, #140]	; (800150c <main+0x378>)
 8001480:	f7ff fe70 	bl	8001164 <send_uart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001484:	e7fe      	b.n	8001484 <main+0x2f0>
 8001486:	bf00      	nop
 8001488:	08007474 	.word	0x08007474
 800148c:	20000140 	.word	0x20000140
 8001490:	2000059c 	.word	0x2000059c
 8001494:	08007478 	.word	0x08007478
 8001498:	0800749c 	.word	0x0800749c
 800149c:	200005a8 	.word	0x200005a8
 80014a0:	200005ac 	.word	0x200005ac
 80014a4:	080074c0 	.word	0x080074c0
 80014a8:	3fe00000 	.word	0x3fe00000
 80014ac:	200005b0 	.word	0x200005b0
 80014b0:	080074c4 	.word	0x080074c4
 80014b4:	200005b8 	.word	0x200005b8
 80014b8:	200005b4 	.word	0x200005b4
 80014bc:	080074e0 	.word	0x080074e0
 80014c0:	080074fc 	.word	0x080074fc
 80014c4:	20000370 	.word	0x20000370
 80014c8:	08007508 	.word	0x08007508
 80014cc:	08007550 	.word	0x08007550
 80014d0:	0800757c 	.word	0x0800757c
 80014d4:	080075bc 	.word	0x080075bc
 80014d8:	080075c0 	.word	0x080075c0
 80014dc:	080075cc 	.word	0x080075cc
 80014e0:	200005a4 	.word	0x200005a4
 80014e4:	08007624 	.word	0x08007624
 80014e8:	0800764c 	.word	0x0800764c
 80014ec:	200005a0 	.word	0x200005a0
 80014f0:	0800767c 	.word	0x0800767c
 80014f4:	0800769c 	.word	0x0800769c
 80014f8:	080076d0 	.word	0x080076d0
 80014fc:	080076fc 	.word	0x080076fc
 8001500:	08007708 	.word	0x08007708
 8001504:	0800772c 	.word	0x0800772c
 8001508:	08007738 	.word	0x08007738
 800150c:	0800775c 	.word	0x0800775c

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b090      	sub	sp, #64	; 0x40
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	2228      	movs	r2, #40	; 0x28
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fb28 	bl	8006b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001544:	2302      	movs	r3, #2
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800154e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fd83 	bl	8002064 <HAL_RCC_OscConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001564:	f000 f8c4 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	230f      	movs	r3, #15
 800156a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fff0 	bl	8002568 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800158e:	f000 f8af 	bl	80016f0 <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3740      	adds	r7, #64	; 0x40
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_SPI1_Init+0x64>)
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <MX_SPI1_Init+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_SPI1_Init+0x64>)
 80015a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_SPI1_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_SPI1_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_SPI1_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_SPI1_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_SPI1_Init+0x64>)
 80015c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_SPI1_Init+0x64>)
 80015d0:	2210      	movs	r2, #16
 80015d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <MX_SPI1_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_SPI1_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <MX_SPI1_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_SPI1_Init+0x64>)
 80015e8:	220a      	movs	r2, #10
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <MX_SPI1_Init+0x64>)
 80015ee:	f001 f953 	bl	8002898 <HAL_SPI_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015f8:	f000 f87a 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200000a8 	.word	0x200000a8
 8001604:	40013000 	.word	0x40013000

08001608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f001 fce9 	bl	8003016 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f851 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000100 	.word	0x20000100
 8001658:	40013800 	.word	0x40013800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_GPIO_Init+0x8c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <MX_GPIO_Init+0x8c>)
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_GPIO_Init+0x8c>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_GPIO_Init+0x8c>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <MX_GPIO_Init+0x8c>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_GPIO_Init+0x8c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_GPIO_Init+0x8c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <MX_GPIO_Init+0x8c>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_GPIO_Init+0x8c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2101      	movs	r1, #1
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0x90>)
 80016be:	f000 fcb9 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016c2:	2301      	movs	r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_GPIO_Init+0x90>)
 80016da:	f000 fb27 	bl	8001d2c <HAL_GPIO_Init>

}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010c00 	.word	0x40010c00

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_MspInit+0x5c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x5c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_MspInit+0x60>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_MspInit+0x60>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000

08001760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_SPI_MspInit+0x88>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d12f      	bne.n	80017e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_SPI_MspInit+0x8c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a19      	ldr	r2, [pc, #100]	; (80017ec <HAL_SPI_MspInit+0x8c>)
 8001786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x8c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_SPI_MspInit+0x8c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a13      	ldr	r2, [pc, #76]	; (80017ec <HAL_SPI_MspInit+0x8c>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_SPI_MspInit+0x8c>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017b0:	23a0      	movs	r3, #160	; 0xa0
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	480b      	ldr	r0, [pc, #44]	; (80017f0 <HAL_SPI_MspInit+0x90>)
 80017c4:	f000 fab2 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017c8:	2340      	movs	r3, #64	; 0x40
 80017ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_SPI_MspInit+0x90>)
 80017dc:	f000 faa6 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40013000 	.word	0x40013000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800

080017f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_UART_MspInit+0x8c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d131      	bne.n	8001878 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_UART_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <HAL_UART_MspInit+0x90>)
 800181a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_UART_MspInit+0x90>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_UART_MspInit+0x90>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_UART_MspInit+0x90>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_UART_MspInit+0x90>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <HAL_UART_MspInit+0x94>)
 800185a:	f000 fa67 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_UART_MspInit+0x94>)
 8001874:	f000 fa5a 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40013800 	.word	0x40013800
 8001884:	40021000 	.word	0x40021000
 8001888:	40010800 	.word	0x40010800

0800188c <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <SDTimer_Handler+0x3c>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <SDTimer_Handler+0x1c>
    Timer1--;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <SDTimer_Handler+0x3c>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <SDTimer_Handler+0x3c>)
 80018a6:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <SDTimer_Handler+0x40>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <SDTimer_Handler+0x34>
    Timer2--;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SDTimer_Handler+0x40>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <SDTimer_Handler+0x40>)
 80018be:	801a      	strh	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	2000063a 	.word	0x2000063a
 80018cc:	2000063c 	.word	0x2000063c

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <HardFault_Handler+0x4>

080018e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <MemManage_Handler+0x4>

080018e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <BusFault_Handler+0x4>

080018ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <UsageFault_Handler+0x4>

080018f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <SysTick_Handler+0x30>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <SysTick_Handler+0x30>)
 8001928:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <SysTick_Handler+0x30>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b09      	cmp	r3, #9
 8001932:	d904      	bls.n	800193e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Handler+0x30>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800193a:	f7ff ffa7 	bl	800188c <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 f8d1 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000638 	.word	0x20000638

0800194c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x50>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x16>
		heap_end = &end;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_sbrk+0x50>)
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <_sbrk+0x54>)
 8001960:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <_sbrk+0x50>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <_sbrk+0x50>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	466a      	mov	r2, sp
 8001972:	4293      	cmp	r3, r2
 8001974:	d907      	bls.n	8001986 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001976:	f005 f8c5 	bl	8006b04 <__errno>
 800197a:	4603      	mov	r3, r0
 800197c:	220c      	movs	r2, #12
 800197e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e006      	b.n	8001994 <_sbrk+0x48>
	}

	heap_end += incr;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <_sbrk+0x50>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a03      	ldr	r2, [pc, #12]	; (800199c <_sbrk+0x50>)
 8001990:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000640 	.word	0x20000640
 80019a0:	20000690 	.word	0x20000690

080019a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <SystemInit+0x5c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <SystemInit+0x5c>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <SystemInit+0x5c>)
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4911      	ldr	r1, [pc, #68]	; (8001a00 <SystemInit+0x5c>)
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <SystemInit+0x60>)
 80019bc:	4013      	ands	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <SystemInit+0x5c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <SystemInit+0x5c>)
 80019c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <SystemInit+0x5c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SystemInit+0x5c>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <SystemInit+0x5c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <SystemInit+0x5c>)
 80019e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SystemInit+0x5c>)
 80019ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SystemInit+0x64>)
 80019f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	f8ff0000 	.word	0xf8ff0000
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a0e:	e003      	b.n	8001a18 <LoopCopyDataInit>

08001a10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a16:	3104      	adds	r1, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a20:	d3f6      	bcc.n	8001a10 <CopyDataInit>
  ldr r2, =_sbss
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a24:	e002      	b.n	8001a2c <LoopFillZerobss>

08001a26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a28:	f842 3b04 	str.w	r3, [r2], #4

08001a2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a30:	d3f9      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a32:	f7ff ffb7 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f005 f86b 	bl	8006b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a3a:	f7ff fbab 	bl	8001194 <main>
  bx lr
 8001a3e:	4770      	bx	lr
  ldr r3, =_sidata
 8001a40:	080078a8 	.word	0x080078a8
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a48:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8001a4c:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8001a50:	2000068c 	.word	0x2000068c

08001a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_2_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_Init+0x28>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_Init+0x28>)
 8001a62:	f043 0310 	orr.w	r3, r3, #16
 8001a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f92b 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f808 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a74:	f7ff fe42 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f935 	bl	8001d12 <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f90b 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <HAL_InitTick+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x1c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_IncTick+0x20>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_IncTick+0x20>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	20000644 	.word	0x20000644

08001b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <HAL_GetTick+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000644 	.word	0x20000644

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffe0 	bl	8001b08 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff90 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff49 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff5e 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffb0 	bl	8001c80 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b08b      	sub	sp, #44	; 0x2c
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e169      	b.n	8002014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8158 	bne.w	800200e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4a9a      	ldr	r2, [pc, #616]	; (8001fcc <HAL_GPIO_Init+0x2a0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d05e      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d68:	4a98      	ldr	r2, [pc, #608]	; (8001fcc <HAL_GPIO_Init+0x2a0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d875      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d6e:	4a98      	ldr	r2, [pc, #608]	; (8001fd0 <HAL_GPIO_Init+0x2a4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d058      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d74:	4a96      	ldr	r2, [pc, #600]	; (8001fd0 <HAL_GPIO_Init+0x2a4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d86f      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d7a:	4a96      	ldr	r2, [pc, #600]	; (8001fd4 <HAL_GPIO_Init+0x2a8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d052      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d80:	4a94      	ldr	r2, [pc, #592]	; (8001fd4 <HAL_GPIO_Init+0x2a8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d869      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d86:	4a94      	ldr	r2, [pc, #592]	; (8001fd8 <HAL_GPIO_Init+0x2ac>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04c      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a92      	ldr	r2, [pc, #584]	; (8001fd8 <HAL_GPIO_Init+0x2ac>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d863      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d92:	4a92      	ldr	r2, [pc, #584]	; (8001fdc <HAL_GPIO_Init+0x2b0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d046      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d98:	4a90      	ldr	r2, [pc, #576]	; (8001fdc <HAL_GPIO_Init+0x2b0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d85d      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	d82a      	bhi.n	8001df8 <HAL_GPIO_Init+0xcc>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d859      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <HAL_GPIO_Init+0x80>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001e27 	.word	0x08001e27
 8001db0:	08001e01 	.word	0x08001e01
 8001db4:	08001e13 	.word	0x08001e13
 8001db8:	08001e55 	.word	0x08001e55
 8001dbc:	08001e5b 	.word	0x08001e5b
 8001dc0:	08001e5b 	.word	0x08001e5b
 8001dc4:	08001e5b 	.word	0x08001e5b
 8001dc8:	08001e5b 	.word	0x08001e5b
 8001dcc:	08001e5b 	.word	0x08001e5b
 8001dd0:	08001e5b 	.word	0x08001e5b
 8001dd4:	08001e5b 	.word	0x08001e5b
 8001dd8:	08001e5b 	.word	0x08001e5b
 8001ddc:	08001e5b 	.word	0x08001e5b
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e5b 	.word	0x08001e5b
 8001de8:	08001e5b 	.word	0x08001e5b
 8001dec:	08001e5b 	.word	0x08001e5b
 8001df0:	08001e09 	.word	0x08001e09
 8001df4:	08001e1d 	.word	0x08001e1d
 8001df8:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <HAL_GPIO_Init+0x2b4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dfe:	e02c      	b.n	8001e5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e029      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e024      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	3308      	adds	r3, #8
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e01f      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	330c      	adds	r3, #12
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e01a      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e013      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	611a      	str	r2, [r3, #16]
          break;
 8001e46:	e009      	b.n	8001e5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	615a      	str	r2, [r3, #20]
          break;
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          break;
 8001e5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d801      	bhi.n	8001e66 <HAL_GPIO_Init+0x13a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	e001      	b.n	8001e6a <HAL_GPIO_Init+0x13e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d802      	bhi.n	8001e78 <HAL_GPIO_Init+0x14c>
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x152>
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3b08      	subs	r3, #8
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	210f      	movs	r1, #15
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80b1 	beq.w	800200e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a4c      	ldr	r2, [pc, #304]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_GPIO_Init+0x2b8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec4:	4a48      	ldr	r2, [pc, #288]	; (8001fe8 <HAL_GPIO_Init+0x2bc>)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_GPIO_Init+0x2c0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_GPIO_Init+0x2c4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1e8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3e      	ldr	r2, [pc, #248]	; (8001ff4 <HAL_GPIO_Init+0x2c8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1e4>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3d      	ldr	r2, [pc, #244]	; (8001ff8 <HAL_GPIO_Init+0x2cc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1e0>
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e006      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e004      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_GPIO_Init+0x1ee>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2a:	492f      	ldr	r1, [pc, #188]	; (8001fe8 <HAL_GPIO_Init+0x2bc>)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	492c      	ldr	r1, [pc, #176]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4928      	ldr	r1, [pc, #160]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4922      	ldr	r1, [pc, #136]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	491e      	ldr	r1, [pc, #120]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4918      	ldr	r1, [pc, #96]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4914      	ldr	r1, [pc, #80]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d021      	beq.n	8002000 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
 8001fc8:	e021      	b.n	800200e <HAL_GPIO_Init+0x2e2>
 8001fca:	bf00      	nop
 8001fcc:	10320000 	.word	0x10320000
 8001fd0:	10310000 	.word	0x10310000
 8001fd4:	10220000 	.word	0x10220000
 8001fd8:	10210000 	.word	0x10210000
 8001fdc:	10120000 	.word	0x10120000
 8001fe0:	10110000 	.word	0x10110000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40011400 	.word	0x40011400
 8001ffc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_GPIO_Init+0x304>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	43db      	mvns	r3, r3
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <HAL_GPIO_Init+0x304>)
 800200a:	4013      	ands	r3, r2
 800200c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3301      	adds	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	f47f ae8e 	bne.w	8001d40 <HAL_GPIO_Init+0x14>
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	372c      	adds	r7, #44	; 0x2c
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	611a      	str	r2, [r3, #16]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e272      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00c      	beq.n	80020aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002090:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d112      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
 800209c:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d10b      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06c      	beq.n	8002190 <HAL_RCC_OscConfig+0x12c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d168      	bne.n	8002190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e24c      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x76>
 80020cc:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7f      	ldr	r2, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e02e      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7a      	ldr	r2, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0xbc>
 8002106:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a71      	ldr	r2, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 8002120:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fce2 	bl	8001b08 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fcde 	bl	8001b08 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e200      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xe4>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fcce 	bl	8001b08 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fcca 	bl	8001b08 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1ec      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x10c>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1c0      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4939      	ldr	r1, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fc83 	bl	8001b08 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fc7f 	bl	8001b08 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1a1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4927      	ldr	r1, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fc62 	bl	8001b08 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7ff fc5e 	bl	8001b08 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e180      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03a      	beq.n	80022e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fc42 	bl	8001b08 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fc3e 	bl	8001b08 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e160      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 fad8 	bl	800285c <RCC_Delay>
 80022ac:	e01c      	b.n	80022e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7ff fc28 	bl	8001b08 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	e00f      	b.n	80022dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fc24 	bl	8001b08 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d908      	bls.n	80022dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e146      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	42420000 	.word	0x42420000
 80022d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e9      	bne.n	80022bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a6 	beq.w	8002442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a87      	ldr	r2, [pc, #540]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	61d3      	str	r3, [r2, #28]
 8002312:	4b85      	ldr	r3, [pc, #532]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b7f      	ldr	r3, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7e      	ldr	r2, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7ff fbe5 	bl	8001b08 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7ff fbe1 	bl	8001b08 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e103      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x312>
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e02d      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x334>
 800237e:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a69      	ldr	r2, [pc, #420]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	e01c      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0x356>
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 80023ba:	4b5b      	ldr	r3, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d015      	beq.n	8002406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7ff fb95 	bl	8001b08 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7ff fb91 	bl	8001b08 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0b1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ee      	beq.n	80023e2 <HAL_RCC_OscConfig+0x37e>
 8002404:	e014      	b.n	8002430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff fb7f 	bl	8001b08 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff fb7b 	bl	8001b08 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e09b      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ee      	bne.n	800240e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a3b      	ldr	r2, [pc, #236]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8087 	beq.w	800255a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d061      	beq.n	800251c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d146      	bne.n	80024ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7ff fb4f 	bl	8001b08 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7ff fb4b 	bl	8001b08 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e06d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4921      	ldr	r1, [pc, #132]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a19      	ldr	r1, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	430b      	orrs	r3, r1
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff fb1f 	bl	8001b08 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7ff fb1b 	bl	8001b08 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e03d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x46a>
 80024ec:	e035      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fb08 	bl	8001b08 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff fb04 	bl	8001b08 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e026      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x498>
 800251a:	e01e      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e019      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x500>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d0      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4965      	ldr	r1, [pc, #404]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d040      	beq.n	8002688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d115      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e073      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4936      	ldr	r1, [pc, #216]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7ff fa56 	bl	8001b08 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7ff fa52 	bl	8001b08 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e053      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 020c 	and.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d1eb      	bne.n	8002660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d210      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4922      	ldr	r1, [pc, #136]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1cc>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1d0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f9b4 	bl	8001a84 <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	080077d4 	.word	0x080077d4
 8002734:	20000004 	.word	0x20000004
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b490      	push	{r4, r7}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002744:	1d3c      	adds	r4, r7, #4
 8002746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800274c:	f240 2301 	movw	r3, #513	; 0x201
 8002750:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x40>
 8002776:	2b08      	cmp	r3, #8
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x46>
 800277a:	e02b      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277e:	623b      	str	r3, [r7, #32]
      break;
 8002780:	e02b      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3328      	adds	r3, #40	; 0x28
 800278c:	443b      	add	r3, r7
 800278e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002792:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0c5b      	lsrs	r3, r3, #17
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	3328      	adds	r3, #40	; 0x28
 80027aa:	443b      	add	r3, r7
 80027ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	623b      	str	r3, [r7, #32]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6a3b      	ldr	r3, [r7, #32]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc90      	pop	{r4, r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	08007780 	.word	0x08007780
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	003d0900 	.word	0x003d0900

080027f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_RCC_GetHCLKFreq+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff2 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	080077e4 	.word	0x080077e4

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffde 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0adb      	lsrs	r3, r3, #11
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	080077e4 	.word	0x080077e4

0800285c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCC_Delay+0x34>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <RCC_Delay+0x38>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002878:	bf00      	nop
  }
  while (Delay --);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	60fa      	str	r2, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <RCC_Delay+0x1c>
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000004 	.word	0x20000004
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e053      	b.n	8002952 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7fe ff4b 	bl	8001760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	ea42 0103 	orr.w	r1, r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	0c1a      	lsrs	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f002 0204 	and.w	r2, r2, #4
 8002930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b088      	sub	sp, #32
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_SPI_Transmit+0x22>
 8002978:	2302      	movs	r3, #2
 800297a:	e11e      	b.n	8002bba <HAL_SPI_Transmit+0x260>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002984:	f7ff f8c0 	bl	8001b08 <HAL_GetTick>
 8002988:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d002      	beq.n	80029a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800299e:	e103      	b.n	8002ba8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_SPI_Transmit+0x52>
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029b0:	e0fa      	b.n	8002ba8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2203      	movs	r2, #3
 80029b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f8:	d107      	bne.n	8002a0a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d007      	beq.n	8002a28 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a30:	d14b      	bne.n	8002aca <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_SPI_Transmit+0xe6>
 8002a3a:	8afb      	ldrh	r3, [r7, #22]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d13e      	bne.n	8002abe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	1c9a      	adds	r2, r3, #2
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a64:	e02b      	b.n	8002abe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d112      	bne.n	8002a9a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	1c9a      	adds	r2, r3, #2
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a98:	e011      	b.n	8002abe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a9a:	f7ff f835 	bl	8001b08 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d803      	bhi.n	8002ab2 <HAL_SPI_Transmit+0x158>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_Transmit+0x15e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002abc:	e074      	b.n	8002ba8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ce      	bne.n	8002a66 <HAL_SPI_Transmit+0x10c>
 8002ac8:	e04c      	b.n	8002b64 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_Transmit+0x17e>
 8002ad2:	8afb      	ldrh	r3, [r7, #22]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d140      	bne.n	8002b5a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002afe:	e02c      	b.n	8002b5a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d113      	bne.n	8002b36 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b34:	e011      	b.n	8002b5a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b36:	f7fe ffe7 	bl	8001b08 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d803      	bhi.n	8002b4e <HAL_SPI_Transmit+0x1f4>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d102      	bne.n	8002b54 <HAL_SPI_Transmit+0x1fa>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b58:	e026      	b.n	8002ba8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1cd      	bne.n	8002b00 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fa36 	bl	8002fda <SPI_EndRxTxTransaction>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e000      	b.n	8002ba8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002ba6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08c      	sub	sp, #48	; 0x30
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_SPI_TransmitReceive+0x26>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e18a      	b.n	8002efe <HAL_SPI_TransmitReceive+0x33c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf0:	f7fe ff8a 	bl	8001b08 <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d00f      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x70>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c18:	d107      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x68>
 8002c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d003      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c30:	e15b      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x82>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x82>
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c4a:	e14e      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d003      	beq.n	8002c60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	887a      	ldrh	r2, [r7, #2]
 8002c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	887a      	ldrh	r2, [r7, #2]
 8002c82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d007      	beq.n	8002cb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbc:	d178      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x10a>
 8002cc6:	8b7b      	ldrh	r3, [r7, #26]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d166      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf0:	e053      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d11b      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x176>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x176>
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d113      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	1c9a      	adds	r2, r3, #2
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d119      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x1b8>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d014      	beq.n	8002d7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	b292      	uxth	r2, r2
 8002d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	1c9a      	adds	r2, r3, #2
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d76:	2301      	movs	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d7a:	f7fe fec5 	bl	8001b08 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d807      	bhi.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d003      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d98:	e0a7      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1a6      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x130>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1a1      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x130>
 8002dae:	e07c      	b.n	8002eaa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_SPI_TransmitReceive+0x1fc>
 8002db8:	8b7b      	ldrh	r3, [r7, #26]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d16b      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de4:	e057      	b.n	8002e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d11c      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x26c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <HAL_SPI_TransmitReceive+0x26c>
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d114      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d119      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x2ae>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d014      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e70:	f7fe fe4a 	bl	8001b08 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d803      	bhi.n	8002e88 <HAL_SPI_TransmitReceive+0x2c6>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d102      	bne.n	8002e8e <HAL_SPI_TransmitReceive+0x2cc>
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e94:	e029      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1a2      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x224>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d19d      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f893 	bl	8002fda <SPI_EndRxTxTransaction>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ec6:	e010      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	e000      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3730      	adds	r7, #48	; 0x30
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f16:	e04c      	b.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d048      	beq.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f20:	f7fe fdf2 	bl	8001b08 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d902      	bls.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d13d      	bne.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4e:	d111      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f58:	d004      	beq.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f62:	d107      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d10f      	bne.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e00f      	b.n	8002fd2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1a3      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af02      	add	r7, sp, #8
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff ff88 	bl	8002f06 <SPI_WaitFlagStateUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e000      	b.n	800300e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e03f      	b.n	80030a8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d106      	bne.n	8003042 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fe fbd9 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2224      	movs	r2, #36	; 0x24
 8003046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003058:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f90c 	bl	8003278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800306e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800307e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800308e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	f040 8083 	bne.w	80031d8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_Transmit+0x2e>
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07b      	b.n	80031da <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Transmit+0x40>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e074      	b.n	80031da <HAL_UART_Transmit+0x12a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003106:	f7fe fcff 	bl	8001b08 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003118:	e042      	b.n	80031a0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d122      	bne.n	8003178 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f850 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e046      	b.n	80031da <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	3302      	adds	r3, #2
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	e017      	b.n	80031a0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	e013      	b.n	80031a0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f82d 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e023      	b.n	80031da <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	60ba      	str	r2, [r7, #8]
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1b7      	bne.n	800311a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2200      	movs	r2, #0
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f814 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e00a      	b.n	80031da <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	e02c      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d028      	beq.n	800324e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0x30>
 8003202:	f7fe fc81 	bl	8001b08 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	429a      	cmp	r2, r3
 8003210:	d21d      	bcs.n	800324e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003220:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e00f      	b.n	800326e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	429a      	cmp	r2, r3
 800326a:	d0c3      	beq.n	80031f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032b2:	f023 030c 	bic.w	r3, r3, #12
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	430b      	orrs	r3, r1
 80032be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a52      	ldr	r2, [pc, #328]	; (8003424 <UART_SetConfig+0x1ac>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d14e      	bne.n	800337e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032e0:	f7ff faa8 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80032e4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <UART_SetConfig+0x1b0>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	0119      	lsls	r1, r3, #4
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f2f3 	udiv	r2, r2, r3
 800331c:	4b42      	ldr	r3, [pc, #264]	; (8003428 <UART_SetConfig+0x1b0>)
 800331e:	fba3 0302 	umull	r0, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	; 0x32
 8003330:	4a3d      	ldr	r2, [pc, #244]	; (8003428 <UART_SetConfig+0x1b0>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333c:	4419      	add	r1, r3
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4b34      	ldr	r3, [pc, #208]	; (8003428 <UART_SetConfig+0x1b0>)
 8003356:	fba3 0302 	umull	r0, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <UART_SetConfig+0x1b0>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	440a      	add	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800337c:	e04d      	b.n	800341a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800337e:	f7ff fa45 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003382:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009a      	lsls	r2, r3, #2
 800338e:	441a      	add	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	4a23      	ldr	r2, [pc, #140]	; (8003428 <UART_SetConfig+0x1b0>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	0119      	lsls	r1, r3, #4
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009a      	lsls	r2, r3, #2
 80033ae:	441a      	add	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ba:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <UART_SetConfig+0x1b0>)
 80033bc:	fba3 0302 	umull	r0, r3, r3, r2
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	2064      	movs	r0, #100	; 0x64
 80033c4:	fb00 f303 	mul.w	r3, r0, r3
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	3332      	adds	r3, #50	; 0x32
 80033ce:	4a16      	ldr	r2, [pc, #88]	; (8003428 <UART_SetConfig+0x1b0>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033da:	4419      	add	r1, r3
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009a      	lsls	r2, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <UART_SetConfig+0x1b0>)
 80033f4:	fba3 0302 	umull	r0, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2064      	movs	r0, #100	; 0x64
 80033fc:	fb00 f303 	mul.w	r3, r0, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <UART_SetConfig+0x1b0>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	440a      	add	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40013800 	.word	0x40013800
 8003428:	51eb851f 	.word	0x51eb851f

0800342c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003430:	4904      	ldr	r1, [pc, #16]	; (8003444 <MX_FATFS_Init+0x18>)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_FATFS_Init+0x1c>)
 8003434:	f003 fb56 	bl	8006ae4 <FATFS_LinkDriver>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <MX_FATFS_Init+0x20>)
 800343e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000064c 	.word	0x2000064c
 8003448:	20000010 	.word	0x20000010
 800344c:	20000648 	.word	0x20000648

08003450 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003454:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8003456:	4618      	mov	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fb30 	bl	8000ad0 <SD_disk_initialize>
 8003470:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fc0e 	bl	8000ca8 <SD_disk_status>
 800348c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4603      	mov	r3, r0
 80034a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80034a6:	7bf8      	ldrb	r0, [r7, #15]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	f7fd fc0f 	bl	8000cd0 <SD_disk_read>
 80034b2:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80034cc:	7bf8      	ldrb	r0, [r7, #15]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	f7fd fc66 	bl	8000da4 <SD_disk_write>
 80034d8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	603a      	str	r2, [r7, #0]
 80034ec:	71fb      	strb	r3, [r7, #7]
 80034ee:	460b      	mov	r3, r1
 80034f0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80034f2:	79b9      	ldrb	r1, [r7, #6]
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fcd7 	bl	8000eac <SD_disk_ioctl>
 80034fe:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	4a08      	ldr	r2, [pc, #32]	; (8003538 <disk_status+0x30>)
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	79fa      	ldrb	r2, [r7, #7]
 8003520:	4905      	ldr	r1, [pc, #20]	; (8003538 <disk_status+0x30>)
 8003522:	440a      	add	r2, r1
 8003524:	7a12      	ldrb	r2, [r2, #8]
 8003526:	4610      	mov	r0, r2
 8003528:	4798      	blx	r3
 800352a:	4603      	mov	r3, r0
 800352c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000670 	.word	0x20000670

0800353c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <disk_initialize+0x48>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <disk_initialize+0x48>)
 8003558:	2101      	movs	r1, #1
 800355a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <disk_initialize+0x48>)
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	79fa      	ldrb	r2, [r7, #7]
 800356a:	4906      	ldr	r1, [pc, #24]	; (8003584 <disk_initialize+0x48>)
 800356c:	440a      	add	r2, r1
 800356e:	7a12      	ldrb	r2, [r2, #8]
 8003570:	4610      	mov	r0, r2
 8003572:	4798      	blx	r3
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000670 	.word	0x20000670

08003588 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <disk_read+0x3c>)
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	689c      	ldr	r4, [r3, #8]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <disk_read+0x3c>)
 80035a8:	4413      	add	r3, r2
 80035aa:	7a18      	ldrb	r0, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	47a0      	blx	r4
 80035b4:	4603      	mov	r3, r0
 80035b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000670 	.word	0x20000670

080035c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <disk_write+0x3c>)
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68dc      	ldr	r4, [r3, #12]
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	4a07      	ldr	r2, [pc, #28]	; (8003604 <disk_write+0x3c>)
 80035e8:	4413      	add	r3, r2
 80035ea:	7a18      	ldrb	r0, [r3, #8]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	47a0      	blx	r4
 80035f4:	4603      	mov	r3, r0
 80035f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	bf00      	nop
 8003604:	20000670 	.word	0x20000670

08003608 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	603a      	str	r2, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	460b      	mov	r3, r1
 8003616:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <disk_ioctl+0x38>)
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	79fa      	ldrb	r2, [r7, #7]
 8003626:	4906      	ldr	r1, [pc, #24]	; (8003640 <disk_ioctl+0x38>)
 8003628:	440a      	add	r2, r1
 800362a:	7a10      	ldrb	r0, [r2, #8]
 800362c:	79b9      	ldrb	r1, [r7, #6]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4798      	blx	r3
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
  return res;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000670 	.word	0x20000670

08003644 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003658:	e007      	b.n	800366a <mem_cpy+0x26>
		*d++ = *s++;
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	1c53      	adds	r3, r2, #1
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1c59      	adds	r1, r3, #1
 8003664:	6179      	str	r1, [r7, #20]
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1e5a      	subs	r2, r3, #1
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f2      	bne.n	800365a <mem_cpy+0x16>
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003690:	e005      	b.n	800369e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	617a      	str	r2, [r7, #20]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f4      	bne.n	8003692 <mem_set+0x12>
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80036cc:	bf00      	nop
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <mem_cmp+0x40>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	61fa      	str	r2, [r7, #28]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	61ba      	str	r2, [r7, #24]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	1acb      	subs	r3, r1, r3
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ec      	beq.n	80036ce <mem_cmp+0x1a>
	return r;
 80036f4:	697b      	ldr	r3, [r7, #20]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800370a:	e002      	b.n	8003712 <chk_chr+0x12>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3301      	adds	r3, #1
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <chk_chr+0x26>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4293      	cmp	r3, r2
 8003724:	d1f2      	bne.n	800370c <chk_chr+0xc>
	return *str;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	781b      	ldrb	r3, [r3, #0]
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e038      	b.n	80037ba <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003748:	492f      	ldr	r1, [pc, #188]	; (8003808 <chk_lock+0xd4>)
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d029      	beq.n	80037b0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800375c:	492a      	ldr	r1, [pc, #168]	; (8003808 <chk_lock+0xd4>)
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003772:	429a      	cmp	r2, r3
 8003774:	d11e      	bne.n	80037b4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8003776:	4924      	ldr	r1, [pc, #144]	; (8003808 <chk_lock+0xd4>)
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3304      	adds	r3, #4
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800378e:	429a      	cmp	r2, r3
 8003790:	d110      	bne.n	80037b4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003792:	491d      	ldr	r1, [pc, #116]	; (8003808 <chk_lock+0xd4>)
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3308      	adds	r3, #8
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d102      	bne.n	80037b4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80037ae:	e007      	b.n	80037c0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80037b0:	2301      	movs	r3, #1
 80037b2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d9c3      	bls.n	8003748 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d109      	bne.n	80037da <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <chk_lock+0x9e>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d101      	bne.n	80037d6 <chk_lock+0xa2>
 80037d2:	2300      	movs	r3, #0
 80037d4:	e013      	b.n	80037fe <chk_lock+0xca>
 80037d6:	2312      	movs	r3, #18
 80037d8:	e011      	b.n	80037fe <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <chk_lock+0xc4>
 80037e0:	4909      	ldr	r1, [pc, #36]	; (8003808 <chk_lock+0xd4>)
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	330a      	adds	r3, #10
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f6:	d101      	bne.n	80037fc <chk_lock+0xc8>
 80037f8:	2310      	movs	r3, #16
 80037fa:	e000      	b.n	80037fe <chk_lock+0xca>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	20000658 	.word	0x20000658

0800380c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e002      	b.n	800381e <enq_lock+0x12>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3301      	adds	r3, #1
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d809      	bhi.n	8003838 <enq_lock+0x2c>
 8003824:	490a      	ldr	r1, [pc, #40]	; (8003850 <enq_lock+0x44>)
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ef      	bne.n	8003818 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000658 	.word	0x20000658

08003854 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e02b      	b.n	80038bc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8003864:	4955      	ldr	r1, [pc, #340]	; (80039bc <inc_lock+0x168>)
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800387a:	429a      	cmp	r2, r3
 800387c:	d11b      	bne.n	80038b6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800387e:	494f      	ldr	r1, [pc, #316]	; (80039bc <inc_lock+0x168>)
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	3304      	adds	r3, #4
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8003896:	429a      	cmp	r2, r3
 8003898:	d10d      	bne.n	80038b6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800389a:	4948      	ldr	r1, [pc, #288]	; (80039bc <inc_lock+0x168>)
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3308      	adds	r3, #8
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d006      	beq.n	80038c4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3301      	adds	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d9d0      	bls.n	8003864 <inc_lock+0x10>
 80038c2:	e000      	b.n	80038c6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80038c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d145      	bne.n	8003958 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e002      	b.n	80038d8 <inc_lock+0x84>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3301      	adds	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d809      	bhi.n	80038f2 <inc_lock+0x9e>
 80038de:	4937      	ldr	r1, [pc, #220]	; (80039bc <inc_lock+0x168>)
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ef      	bne.n	80038d2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d101      	bne.n	80038fc <inc_lock+0xa8>
 80038f8:	2300      	movs	r3, #0
 80038fa:	e05a      	b.n	80039b2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8003902:	482e      	ldr	r0, [pc, #184]	; (80039bc <inc_lock+0x168>)
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4613      	mov	r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4403      	add	r3, r0
 8003910:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8003918:	4828      	ldr	r0, [pc, #160]	; (80039bc <inc_lock+0x168>)
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4403      	add	r3, r0
 8003926:	3304      	adds	r3, #4
 8003928:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8003930:	4922      	ldr	r1, [pc, #136]	; (80039bc <inc_lock+0x168>)
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3308      	adds	r3, #8
 8003940:	4602      	mov	r2, r0
 8003942:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003944:	491d      	ldr	r1, [pc, #116]	; (80039bc <inc_lock+0x168>)
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	330a      	adds	r3, #10
 8003954:	2200      	movs	r2, #0
 8003956:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <inc_lock+0x124>
 800395e:	4917      	ldr	r1, [pc, #92]	; (80039bc <inc_lock+0x168>)
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	330a      	adds	r3, #10
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <inc_lock+0x124>
 8003974:	2300      	movs	r3, #0
 8003976:	e01c      	b.n	80039b2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <inc_lock+0x142>
 800397e:	490f      	ldr	r1, [pc, #60]	; (80039bc <inc_lock+0x168>)
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	330a      	adds	r3, #10
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	b299      	uxth	r1, r3
 8003994:	e001      	b.n	800399a <inc_lock+0x146>
 8003996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800399a:	4808      	ldr	r0, [pc, #32]	; (80039bc <inc_lock+0x168>)
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4403      	add	r3, r0
 80039a8:	330a      	adds	r3, #10
 80039aa:	460a      	mov	r2, r1
 80039ac:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	20000658 	.word	0x20000658

080039c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d82e      	bhi.n	8003a32 <dec_lock+0x72>
		n = Files[i].ctr;
 80039d4:	491b      	ldr	r1, [pc, #108]	; (8003a44 <dec_lock+0x84>)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	330a      	adds	r3, #10
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80039e8:	89fb      	ldrh	r3, [r7, #14]
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ee:	d101      	bne.n	80039f4 <dec_lock+0x34>
 80039f0:	2300      	movs	r3, #0
 80039f2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80039f4:	89fb      	ldrh	r3, [r7, #14]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <dec_lock+0x40>
 80039fa:	89fb      	ldrh	r3, [r7, #14]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003a00:	4910      	ldr	r1, [pc, #64]	; (8003a44 <dec_lock+0x84>)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	330a      	adds	r3, #10
 8003a10:	89fa      	ldrh	r2, [r7, #14]
 8003a12:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003a14:	89fb      	ldrh	r3, [r7, #14]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <dec_lock+0x6c>
 8003a1a:	490a      	ldr	r1, [pc, #40]	; (8003a44 <dec_lock+0x84>)
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	737b      	strb	r3, [r7, #13]
 8003a30:	e001      	b.n	8003a36 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003a32:	2302      	movs	r3, #2
 8003a34:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003a36:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000658 	.word	0x20000658

08003a48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e016      	b.n	8003a84 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003a56:	4910      	ldr	r1, [pc, #64]	; (8003a98 <clear_lock+0x50>)
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d108      	bne.n	8003a7e <clear_lock+0x36>
 8003a6c:	490a      	ldr	r1, [pc, #40]	; (8003a98 <clear_lock+0x50>)
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d9e5      	bls.n	8003a56 <clear_lock+0xe>
	}
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000658 	.word	0x20000658

08003a9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d038      	beq.n	8003b24 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003ab8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	f7ff fd7f 	bl	80035c8 <disk_write>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	e026      	b.n	8003b24 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d218      	bcs.n	8003b24 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e010      	b.n	8003b1e <sync_window+0x82>
					wsect += fs->fsize;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4413      	add	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	2301      	movs	r3, #1
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	f7ff fd58 	bl	80035c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d8eb      	bhi.n	8003afc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d01b      	beq.n	8003b80 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ffa7 	bl	8003a9c <sync_window>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d113      	bne.n	8003b80 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	2301      	movs	r3, #1
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	f7ff fd10 	bl	8003588 <disk_read>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff82 	bl	8003a9c <sync_window>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 809b 	bne.w	8003cda <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	f040 8088 	bne.w	8003cc0 <sync_fs+0x136>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	f040 8082 	bne.w	8003cc0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fd5b 	bl	8003680 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2255      	movs	r2, #85	; 0x55
 8003bce:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	22aa      	movs	r2, #170	; 0xaa
 8003bd6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2252      	movs	r2, #82	; 0x52
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2252      	movs	r2, #82	; 0x52
 8003be4:	705a      	strb	r2, [r3, #1]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2261      	movs	r2, #97	; 0x61
 8003bea:	709a      	strb	r2, [r3, #2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2241      	movs	r2, #65	; 0x41
 8003bf0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2272      	movs	r2, #114	; 0x72
 8003bf6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2272      	movs	r2, #114	; 0x72
 8003bfe:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2241      	movs	r2, #65	; 0x41
 8003c06:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2261      	movs	r2, #97	; 0x61
 8003c0e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003c4a:	0e1b      	lsrs	r3, r3, #24
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003c8c:	0e1b      	lsrs	r3, r3, #24
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f7ff fc88 	bl	80035c8 <disk_write>
			fs->fsi_flag = 0;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fc9c 	bl	8003608 <disk_ioctl>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <sync_fs+0x150>
			res = FR_DISK_ERR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3b02      	subs	r3, #2
 8003cf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003cfa:	3b02      	subs	r3, #2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d301      	bcc.n	8003d06 <clust2sect+0x22>
 8003d02:	2300      	movs	r3, #0
 8003d04:	e00a      	b.n	8003d1c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	fb03 f202 	mul.w	r2, r3, r2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003d1a:	4413      	add	r3, r2
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b086      	sub	sp, #24
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d905      	bls.n	8003d42 <get_fat+0x1c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003d42:	2301      	movs	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e0a3      	b.n	8003e90 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d068      	beq.n	8003e2a <get_fat+0x104>
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	f300 808f 	bgt.w	8003e7c <get_fat+0x156>
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d002      	beq.n	8003d68 <get_fat+0x42>
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d040      	beq.n	8003de8 <get_fat+0xc2>
 8003d66:	e089      	b.n	8003e7c <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	0a5b      	lsrs	r3, r3, #9
 8003d80:	4413      	add	r3, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fed2 	bl	8003b2e <move_window>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d178      	bne.n	8003e82 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	60fa      	str	r2, [r7, #12]
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	5cd3      	ldrb	r3, [r2, r3]
 8003d9e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	0a5b      	lsrs	r3, r3, #9
 8003daa:	4413      	add	r3, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff febd 	bl	8003b2e <move_window>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d165      	bne.n	8003e86 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <get_fat+0xb8>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	e002      	b.n	8003de4 <get_fat+0xbe>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	617b      	str	r3, [r7, #20]
			break;
 8003de6:	e053      	b.n	8003e90 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	4413      	add	r3, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff fe99 	bl	8003b2e <move_window>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d143      	bne.n	8003e8a <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3301      	adds	r3, #1
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b21b      	sxth	r3, r3
 8003e20:	4313      	orrs	r3, r2
 8003e22:	b21b      	sxth	r3, r3
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	617b      	str	r3, [r7, #20]
			break;
 8003e28:	e032      	b.n	8003e90 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	09db      	lsrs	r3, r3, #7
 8003e34:	4413      	add	r3, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fe78 	bl	8003b2e <move_window>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d124      	bne.n	8003e8e <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	3303      	adds	r3, #3
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	061a      	lsls	r2, r3, #24
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	4313      	orrs	r3, r2
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	3201      	adds	r2, #1
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	0212      	lsls	r2, r2, #8
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e78:	617b      	str	r3, [r7, #20]
			break;
 8003e7a:	e009      	b.n	8003e90 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e006      	b.n	8003e90 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e82:	bf00      	nop
 8003e84:	e004      	b.n	8003e90 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e8e:	bf00      	nop
		}
	}

	return val;
 8003e90:	697b      	ldr	r3, [r7, #20]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b088      	sub	sp, #32
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d905      	bls.n	8003eb8 <put_fat+0x1e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <put_fat+0x24>
		res = FR_INT_ERR;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e0f6      	b.n	80040ac <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	f000 809e 	beq.w	8004006 <put_fat+0x16c>
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	f300 80e4 	bgt.w	8004098 <put_fat+0x1fe>
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d002      	beq.n	8003eda <put_fat+0x40>
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d06f      	beq.n	8003fb8 <put_fat+0x11e>
 8003ed8:	e0de      	b.n	8004098 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	0a5b      	lsrs	r3, r3, #9
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fe19 	bl	8003b2e <move_window>
 8003efc:	4603      	mov	r3, r0
 8003efe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f00:	7ffb      	ldrb	r3, [r7, #31]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 80cb 	bne.w	800409e <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	617a      	str	r2, [r7, #20]
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <put_fat+0xa4>
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	b25a      	sxtb	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	4313      	orrs	r3, r2
 8003f38:	b25b      	sxtb	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e001      	b.n	8003f42 <put_fat+0xa8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	0a5b      	lsrs	r3, r3, #9
 8003f58:	4413      	add	r3, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff fde6 	bl	8003b2e <move_window>
 8003f62:	4603      	mov	r3, r0
 8003f64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f040 809a 	bne.w	80040a2 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <put_fat+0xf2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e00e      	b.n	8003faa <put_fat+0x110>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	f023 030f 	bic.w	r3, r3, #15
 8003f96:	b25a      	sxtb	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003fb6:	e079      	b.n	80040ac <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff fdb1 	bl	8003b2e <move_window>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fd0:	7ffb      	ldrb	r3, [r7, #31]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d167      	bne.n	80040a6 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004004:	e052      	b.n	80040ac <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	09db      	lsrs	r3, r3, #7
 8004010:	4413      	add	r3, r2
 8004012:	4619      	mov	r1, r3
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fd8a 	bl	8003b2e <move_window>
 800401a:	4603      	mov	r3, r0
 800401c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800401e:	7ffb      	ldrb	r3, [r7, #31]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d142      	bne.n	80040aa <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3303      	adds	r3, #3
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	061a      	lsls	r2, r3, #24
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3302      	adds	r3, #2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	4313      	orrs	r3, r2
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	3201      	adds	r2, #1
 8004048:	7812      	ldrb	r2, [r2, #0]
 800404a:	0212      	lsls	r2, r2, #8
 800404c:	4313      	orrs	r3, r2
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4313      	orrs	r3, r2
 800405c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	b29b      	uxth	r3, r3
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	b29a      	uxth	r2, r3
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3301      	adds	r3, #1
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0c1a      	lsrs	r2, r3, #16
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	3302      	adds	r3, #2
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0e1a      	lsrs	r2, r3, #24
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	3303      	adds	r3, #3
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004096:	e009      	b.n	80040ac <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8004098:	2302      	movs	r3, #2
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e006      	b.n	80040ac <put_fat+0x212>
			if (res != FR_OK) break;
 800409e:	bf00      	nop
 80040a0:	e004      	b.n	80040ac <put_fat+0x212>
			if (res != FR_OK) break;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <put_fat+0x212>
			if (res != FR_OK) break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <put_fat+0x212>
			if (res != FR_OK) break;
 80040aa:	bf00      	nop
		}
	}

	return res;
 80040ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d905      	bls.n	80040d2 <remove_chain+0x1c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <remove_chain+0x22>
		res = FR_INT_ERR;
 80040d2:	2302      	movs	r3, #2
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e043      	b.n	8004160 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80040dc:	e036      	b.n	800414c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80040de:	6839      	ldr	r1, [r7, #0]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fe20 	bl	8003d26 <get_fat>
 80040e6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d035      	beq.n	800415a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d102      	bne.n	80040fa <remove_chain+0x44>
 80040f4:	2302      	movs	r3, #2
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	e032      	b.n	8004160 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d102      	bne.n	8004108 <remove_chain+0x52>
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	e02b      	b.n	8004160 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004108:	2200      	movs	r2, #0
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fec4 	bl	8003e9a <put_fat>
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d120      	bne.n	800415e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d00f      	beq.n	8004148 <remove_chain+0x92>
				fs->free_clust++;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	b2da      	uxtb	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d3c2      	bcc.n	80040de <remove_chain+0x28>
 8004158:	e002      	b.n	8004160 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800415e:	bf00      	nop
		}
	}

	return res;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004180:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <create_chain+0x2a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	429a      	cmp	r2, r3
 8004192:	d31c      	bcc.n	80041ce <create_chain+0x64>
 8004194:	2301      	movs	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	e019      	b.n	80041ce <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fdc2 	bl	8003d26 <get_fat>
 80041a2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d801      	bhi.n	80041ae <create_chain+0x44>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e076      	b.n	800429c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d101      	bne.n	80041ba <create_chain+0x50>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	e070      	b.n	800429c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d201      	bcs.n	80041ca <create_chain+0x60>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	e068      	b.n	800429c <create_chain+0x132>
		scl = clst;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3301      	adds	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d307      	bcc.n	80041f4 <create_chain+0x8a>
			ncl = 2;
 80041e4:	2302      	movs	r3, #2
 80041e6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d901      	bls.n	80041f4 <create_chain+0x8a>
 80041f0:	2300      	movs	r3, #0
 80041f2:	e053      	b.n	800429c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80041f4:	6979      	ldr	r1, [r7, #20]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fd95 	bl	8003d26 <get_fat>
 80041fc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d002      	beq.n	8004212 <create_chain+0xa8>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <create_chain+0xac>
			return cs;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	e042      	b.n	800429c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	429a      	cmp	r2, r3
 800421c:	d1d9      	bne.n	80041d2 <create_chain+0x68>
 800421e:	2300      	movs	r3, #0
 8004220:	e03c      	b.n	800429c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8004222:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004224:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004228:	6979      	ldr	r1, [r7, #20]
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff fe35 	bl	8003e9a <put_fat>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <create_chain+0xe4>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d006      	beq.n	800424e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fe28 	bl	8003e9a <put_fat>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11a      	bne.n	800428a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d018      	beq.n	800429a <create_chain+0x130>
			fs->free_clust--;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800426e:	1e5a      	subs	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	b2da      	uxtb	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004288:	e007      	b.n	800429a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d102      	bne.n	8004296 <create_chain+0x12c>
 8004290:	f04f 33ff 	mov.w	r3, #4294967295
 8004294:	e000      	b.n	8004298 <create_chain+0x12e>
 8004296:	2301      	movs	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800429a:	697b      	ldr	r3, [r7, #20]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80042b4:	3304      	adds	r3, #4
 80042b6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	0a5b      	lsrs	r3, r3, #9
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80042c2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80042c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	613a      	str	r2, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <clmt_clust+0x3c>
 80042dc:	2300      	movs	r3, #0
 80042de:	e010      	b.n	8004302 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d307      	bcc.n	80042f8 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	3304      	adds	r3, #4
 80042f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042f6:	e7e9      	b.n	80042cc <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80042f8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4413      	add	r3, r2
}
 8004302:	4618      	mov	r0, r3
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004326:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d007      	beq.n	800433e <dir_sdi+0x32>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004334:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	429a      	cmp	r2, r3
 800433c:	d301      	bcc.n	8004342 <dir_sdi+0x36>
		return FR_INT_ERR;
 800433e:	2302      	movs	r3, #2
 8004340:	e074      	b.n	800442c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10c      	bne.n	8004362 <dir_sdi+0x56>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800434e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004352:	2b03      	cmp	r3, #3
 8004354:	d105      	bne.n	8004362 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800435c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004360:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d111      	bne.n	800438c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800436e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004372:	461a      	mov	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4293      	cmp	r3, r2
 8004378:	d301      	bcc.n	800437e <dir_sdi+0x72>
			return FR_INT_ERR;
 800437a:	2302      	movs	r3, #2
 800437c:	e056      	b.n	800442c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004384:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	e032      	b.n	80043f2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004392:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800439a:	e01e      	b.n	80043da <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fcbe 	bl	8003d26 <get_fat>
 80043aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d101      	bne.n	80043b8 <dir_sdi+0xac>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e039      	b.n	800442c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d907      	bls.n	80043ce <dir_sdi+0xc2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d301      	bcc.n	80043d2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80043ce:	2302      	movs	r3, #2
 80043d0:	e02c      	b.n	800442c <dir_sdi+0x120>
			idx -= ic;
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d2dc      	bcs.n	800439c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fc7a 	bl	8003ce4 <clust2sect>
 80043f0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <dir_sdi+0xf8>
 8004400:	2302      	movs	r3, #2
 8004402:	e013      	b.n	800442c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	091a      	lsrs	r2, r3, #4
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	441a      	add	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004418:	461a      	mov	r2, r3
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	015b      	lsls	r3, r3, #5
 8004422:	441a      	add	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d004      	beq.n	800445a <dir_next+0x26>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <dir_next+0x2a>
		return FR_NO_FILE;
 800445a:	2304      	movs	r3, #4
 800445c:	e0dd      	b.n	800461a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	2b00      	cmp	r3, #0
 8004466:	f040 80c6 	bne.w	80045f6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004488:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800448c:	461a      	mov	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4293      	cmp	r3, r2
 8004492:	f0c0 80b0 	bcc.w	80045f6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8004496:	2304      	movs	r3, #4
 8004498:	e0bf      	b.n	800461a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80044a4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80044a8:	3a01      	subs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f040 80a2 	bne.w	80045f6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7ff fc30 	bl	8003d26 <get_fat>
 80044c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d801      	bhi.n	80044d2 <dir_next+0x9e>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e0a3      	b.n	800461a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d101      	bne.n	80044de <dir_next+0xaa>
 80044da:	2301      	movs	r3, #1
 80044dc:	e09d      	b.n	800461a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d374      	bcc.n	80045d8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <dir_next+0xc4>
 80044f4:	2304      	movs	r3, #4
 80044f6:	e090      	b.n	800461a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f7ff fe2f 	bl	800416a <create_chain>
 800450c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <dir_next+0xe4>
 8004514:	2307      	movs	r3, #7
 8004516:	e080      	b.n	800461a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <dir_next+0xee>
 800451e:	2302      	movs	r3, #2
 8004520:	e07b      	b.n	800461a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d101      	bne.n	800452e <dir_next+0xfa>
 800452a:	2301      	movs	r3, #1
 800452c:	e075      	b.n	800461a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fab1 	bl	8003a9c <sync_window>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <dir_next+0x110>
 8004540:	2301      	movs	r3, #1
 8004542:	e06a      	b.n	800461a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800454a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff f895 	bl	8003680 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	4610      	mov	r0, r2
 8004566:	f7ff fbbd 	bl	8003ce4 <clust2sect>
 800456a:	4603      	mov	r3, r0
 800456c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e01b      	b.n	80045ae <dir_next+0x17a>
						dp->fs->wflag = 1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fa87 	bl	8003a9c <sync_window>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <dir_next+0x164>
 8004594:	2301      	movs	r3, #1
 8004596:	e040      	b.n	800461a <dir_next+0x1e6>
						dp->fs->winsect++;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800459e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80045a2:	3201      	adds	r2, #1
 80045a4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3301      	adds	r3, #1
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045b4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80045b8:	461a      	mov	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4293      	cmp	r3, r2
 80045be:	d3da      	bcc.n	8004576 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045c6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	1a8a      	subs	r2, r1, r2
 80045d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fb7b 	bl	8003ce4 <clust2sect>
 80045ee:	4602      	mov	r2, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004606:	461a      	mov	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	015b      	lsls	r3, r3, #5
 8004610:	441a      	add	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}

08004622 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800462c:	2100      	movs	r1, #0
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fe6c 	bl	800430c <dir_sdi>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d131      	bne.n	80046a2 <dir_alloc+0x80>
		n = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f7ff fa6c 	bl	8003b2e <move_window>
 8004656:	4603      	mov	r3, r0
 8004658:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d11f      	bne.n	80046a0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2be5      	cmp	r3, #229	; 0xe5
 800466a:	d005      	beq.n	8004678 <dir_alloc+0x56>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3301      	adds	r3, #1
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d102      	bne.n	800468c <dir_alloc+0x6a>
 8004686:	e00c      	b.n	80046a2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004688:	2300      	movs	r3, #0
 800468a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800468c:	2101      	movs	r1, #1
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff fed0 	bl	8004434 <dir_next>
 8004694:	4603      	mov	r3, r0
 8004696:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0d1      	beq.n	8004642 <dir_alloc+0x20>
 800469e:	e000      	b.n	80046a2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80046a0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d101      	bne.n	80046ac <dir_alloc+0x8a>
 80046a8:	2307      	movs	r3, #7
 80046aa:	73fb      	strb	r3, [r7, #15]
	return res;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	331b      	adds	r3, #27
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	b21a      	sxth	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	331a      	adds	r3, #26
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b21b      	sxth	r3, r3
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d10f      	bne.n	8004704 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	3315      	adds	r3, #21
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	b21a      	sxth	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3314      	adds	r3, #20
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	b21b      	sxth	r3, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b21b      	sxth	r3, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

	return cl;
 8004704:	68fb      	ldr	r3, [r7, #12]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	331a      	adds	r3, #26
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	331b      	adds	r3, #27
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	0c1a      	lsrs	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3314      	adds	r3, #20
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	b29b      	uxth	r3, r3
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3315      	adds	r3, #21
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004764:	2100      	movs	r1, #0
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fdd0 	bl	800430c <dir_sdi>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <dir_find+0x1e>
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	e03b      	b.n	80047f2 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7ff f9d0 	bl	8003b2e <move_window>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d128      	bne.n	80047ea <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800479e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <dir_find+0x56>
 80047ac:	2304      	movs	r3, #4
 80047ae:	75fb      	strb	r3, [r7, #23]
 80047b0:	e01e      	b.n	80047f0 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	330b      	adds	r3, #11
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <dir_find+0x7a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047c6:	220b      	movs	r2, #11
 80047c8:	4619      	mov	r1, r3
 80047ca:	6938      	ldr	r0, [r7, #16]
 80047cc:	f7fe ff72 	bl	80036b4 <mem_cmp>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fe2b 	bl	8004434 <dir_next>
 80047de:	4603      	mov	r3, r0
 80047e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0c8      	beq.n	800477a <dir_find+0x1e>
 80047e8:	e002      	b.n	80047f0 <dir_find+0x94>
		if (res != FR_OK) break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <dir_find+0x94>
			break;
 80047ee:	bf00      	nop

	return res;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8004804:	2304      	movs	r3, #4
 8004806:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8004808:	e03f      	b.n	800488a <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7ff f988 	bl	8003b2e <move_window>
 800481e:	4603      	mov	r3, r0
 8004820:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d136      	bne.n	8004896 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800482e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <dir_read+0x48>
 800483c:	2304      	movs	r3, #4
 800483e:	75fb      	strb	r3, [r7, #23]
 8004840:	e02e      	b.n	80048a0 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	330b      	adds	r3, #11
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800484c:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2be5      	cmp	r3, #229	; 0xe5
 8004852:	d011      	beq.n	8004878 <dir_read+0x7e>
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b2e      	cmp	r3, #46	; 0x2e
 8004858:	d00e      	beq.n	8004878 <dir_read+0x7e>
 800485a:	7bbb      	ldrb	r3, [r7, #14]
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d00b      	beq.n	8004878 <dir_read+0x7e>
 8004860:	7bbb      	ldrb	r3, [r7, #14]
 8004862:	f023 0320 	bic.w	r3, r3, #32
 8004866:	2b08      	cmp	r3, #8
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4293      	cmp	r3, r2
 8004876:	d010      	beq.n	800489a <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fdda 	bl	8004434 <dir_next>
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <dir_read+0xa4>
	while (dp->sect) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ba      	bne.n	800480a <dir_read+0x10>
 8004894:	e004      	b.n	80048a0 <dir_read+0xa6>
		if (res != FR_OK) break;
 8004896:	bf00      	nop
 8004898:	e002      	b.n	80048a0 <dir_read+0xa6>
			break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <dir_read+0xa6>
		if (res != FR_OK) break;
 800489e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <dir_read+0xb4>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80048c0:	2101      	movs	r1, #1
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fead 	bl	8004622 <dir_alloc>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d126      	bne.n	8004920 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7ff f924 	bl	8003b2e <move_window>
 80048e6:	4603      	mov	r3, r0
 80048e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d117      	bne.n	8004920 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048f6:	2220      	movs	r2, #32
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fec0 	bl	8003680 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800490c:	220b      	movs	r2, #11
 800490e:	4619      	mov	r1, r3
 8004910:	f7fe fe98 	bl	8003644 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fce6 	bl	800430c <dir_sdi>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d121      	bne.n	800498e <dir_remove+0x64>
		res = move_window(dp->fs, dp->sect);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7ff f8e8 	bl	8003b2e <move_window>
 800495e:	4603      	mov	r3, r0
 8004960:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d112      	bne.n	800498e <dir_remove+0x64>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800496e:	2220      	movs	r2, #32
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fe84 	bl	8003680 <mem_set>
			*dp->dir = DDEM;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800497e:	22e5      	movs	r2, #229	; 0xe5
 8004980:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}
#endif

	return res;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e002      	b.n	80049b0 <create_name+0x18>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b2f      	cmp	r3, #47	; 0x2f
 80049b6:	d0f8      	beq.n	80049aa <create_name+0x12>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b5c      	cmp	r3, #92	; 0x5c
 80049be:	d0f4      	beq.n	80049aa <create_name+0x12>
	sfn = dp->fn;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80049c6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80049c8:	220b      	movs	r2, #11
 80049ca:	2120      	movs	r1, #32
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f7fe fe57 	bl	8003680 <mem_set>
	si = i = b = 0; ni = 8;
 80049d2:	2300      	movs	r3, #0
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	2308      	movs	r3, #8
 80049e0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	617a      	str	r2, [r7, #20]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80049f0:	7fbb      	ldrb	r3, [r7, #30]
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d953      	bls.n	8004a9e <create_name+0x106>
 80049f6:	7fbb      	ldrb	r3, [r7, #30]
 80049f8:	2b2f      	cmp	r3, #47	; 0x2f
 80049fa:	d050      	beq.n	8004a9e <create_name+0x106>
 80049fc:	7fbb      	ldrb	r3, [r7, #30]
 80049fe:	2b5c      	cmp	r3, #92	; 0x5c
 8004a00:	d04d      	beq.n	8004a9e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8004a02:	7fbb      	ldrb	r3, [r7, #30]
 8004a04:	2b2e      	cmp	r3, #46	; 0x2e
 8004a06:	d003      	beq.n	8004a10 <create_name+0x78>
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d30f      	bcc.n	8004a30 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d102      	bne.n	8004a1c <create_name+0x84>
 8004a16:	7fbb      	ldrb	r3, [r7, #30]
 8004a18:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1a:	d001      	beq.n	8004a20 <create_name+0x88>
 8004a1c:	2306      	movs	r3, #6
 8004a1e:	e073      	b.n	8004b08 <create_name+0x170>
			i = 8; ni = 11;
 8004a20:	2308      	movs	r3, #8
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	230b      	movs	r3, #11
 8004a26:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004a28:	7ffb      	ldrb	r3, [r7, #31]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e035      	b.n	8004a9c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004a30:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da08      	bge.n	8004a4a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8004a38:	7ffb      	ldrb	r3, [r7, #31]
 8004a3a:	f043 0303 	orr.w	r3, r3, #3
 8004a3e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004a40:	7fbb      	ldrb	r3, [r7, #30]
 8004a42:	3b80      	subs	r3, #128	; 0x80
 8004a44:	4a32      	ldr	r2, [pc, #200]	; (8004b10 <create_name+0x178>)
 8004a46:	5cd3      	ldrb	r3, [r2, r3]
 8004a48:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004a4a:	7fbb      	ldrb	r3, [r7, #30]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4831      	ldr	r0, [pc, #196]	; (8004b14 <create_name+0x17c>)
 8004a50:	f7fe fe56 	bl	8003700 <chk_chr>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <create_name+0xc6>
				return FR_INVALID_NAME;
 8004a5a:	2306      	movs	r3, #6
 8004a5c:	e054      	b.n	8004b08 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004a5e:	7fbb      	ldrb	r3, [r7, #30]
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d907      	bls.n	8004a74 <create_name+0xdc>
 8004a64:	7fbb      	ldrb	r3, [r7, #30]
 8004a66:	2b5a      	cmp	r3, #90	; 0x5a
 8004a68:	d804      	bhi.n	8004a74 <create_name+0xdc>
				b |= 2;
 8004a6a:	7ffb      	ldrb	r3, [r7, #31]
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	77fb      	strb	r3, [r7, #31]
 8004a72:	e00c      	b.n	8004a8e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004a74:	7fbb      	ldrb	r3, [r7, #30]
 8004a76:	2b60      	cmp	r3, #96	; 0x60
 8004a78:	d909      	bls.n	8004a8e <create_name+0xf6>
 8004a7a:	7fbb      	ldrb	r3, [r7, #30]
 8004a7c:	2b7a      	cmp	r3, #122	; 0x7a
 8004a7e:	d806      	bhi.n	8004a8e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8004a80:	7ffb      	ldrb	r3, [r7, #31]
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	7fbb      	ldrb	r3, [r7, #30]
 8004a8a:	3b20      	subs	r3, #32
 8004a8c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	613a      	str	r2, [r7, #16]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	4413      	add	r3, r2
 8004a98:	7fba      	ldrb	r2, [r7, #30]
 8004a9a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004a9c:	e7a1      	b.n	80049e2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004aa8:	7fbb      	ldrb	r3, [r7, #30]
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d801      	bhi.n	8004ab2 <create_name+0x11a>
 8004aae:	2304      	movs	r3, #4
 8004ab0:	e000      	b.n	8004ab4 <create_name+0x11c>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <create_name+0x128>
 8004abc:	2306      	movs	r3, #6
 8004abe:	e023      	b.n	8004b08 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2be5      	cmp	r3, #229	; 0xe5
 8004ac6:	d102      	bne.n	8004ace <create_name+0x136>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2205      	movs	r2, #5
 8004acc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d102      	bne.n	8004ada <create_name+0x142>
 8004ad4:	7ffb      	ldrb	r3, [r7, #31]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d103      	bne.n	8004aec <create_name+0x154>
 8004ae4:	7fbb      	ldrb	r3, [r7, #30]
 8004ae6:	f043 0310 	orr.w	r3, r3, #16
 8004aea:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004aec:	7ffb      	ldrb	r3, [r7, #31]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d103      	bne.n	8004afe <create_name+0x166>
 8004af6:	7fbb      	ldrb	r3, [r7, #30]
 8004af8:	f043 0308 	orr.w	r3, r3, #8
 8004afc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	330b      	adds	r3, #11
 8004b02:	7fba      	ldrb	r2, [r7, #30]
 8004b04:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004b06:	2300      	movs	r3, #0
#endif
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	080077ec 	.word	0x080077ec
 8004b14:	08007790 	.word	0x08007790

08004b18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b2f      	cmp	r3, #47	; 0x2f
 8004b28:	d003      	beq.n	8004b32 <follow_path+0x1a>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b5c      	cmp	r3, #92	; 0x5c
 8004b30:	d102      	bne.n	8004b38 <follow_path+0x20>
		path++;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	3301      	adds	r3, #1
 8004b36:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b1f      	cmp	r3, #31
 8004b46:	d80a      	bhi.n	8004b5e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fbde 	bl	800430c <dir_sdi>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004b5c:	e045      	b.n	8004bea <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b5e:	463b      	mov	r3, r7
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ff18 	bl	8004998 <create_name>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d136      	bne.n	8004be0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fdf2 	bl	800475c <dir_find>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b82:	7adb      	ldrb	r3, [r3, #11]
 8004b84:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d128      	bne.n	8004be4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004b92:	7bbb      	ldrb	r3, [r7, #14]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d123      	bne.n	8004be4 <follow_path+0xcc>
 8004b9c:	2305      	movs	r3, #5
 8004b9e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004ba0:	e020      	b.n	8004be4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ba2:	7bbb      	ldrb	r3, [r7, #14]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11d      	bne.n	8004be8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bb2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	330b      	adds	r3, #11
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8004bc2:	2305      	movs	r3, #5
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e010      	b.n	8004bea <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fd70 	bl	80046b6 <ld_clust>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004bde:	e7be      	b.n	8004b5e <follow_path+0x46>
			if (res != FR_OK) break;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <follow_path+0xd2>
				break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004be8:	bf00      	nop
		}
	}

	return res;
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004c00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d031      	beq.n	8004c6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e002      	b.n	8004c18 <get_ldnumber+0x24>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	3301      	adds	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d903      	bls.n	8004c28 <get_ldnumber+0x34>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b3a      	cmp	r3, #58	; 0x3a
 8004c26:	d1f4      	bne.n	8004c12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b3a      	cmp	r3, #58	; 0x3a
 8004c2e:	d11c      	bne.n	8004c6a <get_ldnumber+0x76>
			tp = *path;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	60fa      	str	r2, [r7, #12]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	3b30      	subs	r3, #48	; 0x30
 8004c40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b09      	cmp	r3, #9
 8004c46:	d80e      	bhi.n	8004c66 <get_ldnumber+0x72>
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d10a      	bne.n	8004c66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <get_ldnumber+0x72>
					vol = (int)i;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	e002      	b.n	8004c70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004c6e:	693b      	ldr	r3, [r7, #16]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
	...

08004c7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe ff47 	bl	8003b2e <move_window>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <check_fs+0x2e>
		return 3;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e04a      	b.n	8004d40 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	b21a      	sxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004cbe:	b21b      	sxth	r3, r3
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b21b      	sxth	r3, r3
 8004cc4:	4a20      	ldr	r2, [pc, #128]	; (8004d48 <check_fs+0xcc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d001      	beq.n	8004cce <check_fs+0x52>
		return 2;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e038      	b.n	8004d40 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3336      	adds	r3, #54	; 0x36
 8004cd2:	3303      	adds	r3, #3
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	061a      	lsls	r2, r3, #24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3336      	adds	r3, #54	; 0x36
 8004cdc:	3302      	adds	r3, #2
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	3236      	adds	r2, #54	; 0x36
 8004ce8:	3201      	adds	r2, #1
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	0212      	lsls	r2, r2, #8
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <check_fs+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d101      	bne.n	8004d06 <check_fs+0x8a>
		return 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e01c      	b.n	8004d40 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3352      	adds	r3, #82	; 0x52
 8004d0a:	3303      	adds	r3, #3
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	061a      	lsls	r2, r3, #24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3352      	adds	r3, #82	; 0x52
 8004d14:	3302      	adds	r3, #2
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	3252      	adds	r2, #82	; 0x52
 8004d20:	3201      	adds	r2, #1
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	0212      	lsls	r2, r2, #8
 8004d26:	4313      	orrs	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <check_fs+0xd0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <check_fs+0xc2>
		return 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <check_fs+0xc4>

	return 1;
 8004d3e:	2301      	movs	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	ffffaa55 	.word	0xffffaa55
 8004d4c:	00544146 	.word	0x00544146

08004d50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b096      	sub	sp, #88	; 0x58
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004d64:	68b8      	ldr	r0, [r7, #8]
 8004d66:	f7ff ff45 	bl	8004bf4 <get_ldnumber>
 8004d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da01      	bge.n	8004d76 <find_volume+0x26>
 8004d72:	230b      	movs	r3, #11
 8004d74:	e2a8      	b.n	80052c8 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004d76:	4a9d      	ldr	r2, [pc, #628]	; (8004fec <find_volume+0x29c>)
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <find_volume+0x3a>
 8004d86:	230c      	movs	r3, #12
 8004d88:	e29e      	b.n	80052c8 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d8e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01b      	beq.n	8004dd2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fbb1 	bl	8003508 <disk_status>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10c      	bne.n	8004dd2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <find_volume+0x7e>
 8004dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8004dca:	230a      	movs	r3, #10
 8004dcc:	e27c      	b.n	80052c8 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e27a      	b.n	80052c8 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fba6 	bl	800353c <disk_initialize>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004df6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e02:	2303      	movs	r3, #3
 8004e04:	e260      	b.n	80052c8 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <find_volume+0xcc>
 8004e0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004e18:	230a      	movs	r3, #10
 8004e1a:	e255      	b.n	80052c8 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004e20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e24:	f7ff ff2a 	bl	8004c7c <check_fs>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d153      	bne.n	8004ede <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004e36:	2300      	movs	r3, #0
 8004e38:	643b      	str	r3, [r7, #64]	; 0x40
 8004e3a:	e028      	b.n	8004e8e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004e46:	4413      	add	r3, r2
 8004e48:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d012      	beq.n	8004e7a <find_volume+0x12a>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	330b      	adds	r3, #11
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	061a      	lsls	r2, r3, #24
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	330a      	adds	r3, #10
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	4313      	orrs	r3, r2
 8004e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e68:	3209      	adds	r2, #9
 8004e6a:	7812      	ldrb	r2, [r2, #0]
 8004e6c:	0212      	lsls	r2, r2, #8
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e72:	3208      	adds	r2, #8
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	e000      	b.n	8004e7c <find_volume+0x12c>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	3358      	adds	r3, #88	; 0x58
 8004e82:	443b      	add	r3, r7
 8004e84:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d9d3      	bls.n	8004e3c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004e94:	2300      	movs	r3, #0
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <find_volume+0x154>
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	3358      	adds	r3, #88	; 0x58
 8004eaa:	443b      	add	r3, r7
 8004eac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004eb0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <find_volume+0x174>
 8004eb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004eba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ebc:	f7ff fede 	bl	8004c7c <check_fs>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	e000      	b.n	8004ec6 <find_volume+0x176>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <find_volume+0x18e>
 8004ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d9e2      	bls.n	8004ea4 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004ede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d101      	bne.n	8004eea <find_volume+0x19a>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1ee      	b.n	80052c8 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004eea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <find_volume+0x1a6>
 8004ef2:	230d      	movs	r3, #13
 8004ef4:	e1e8      	b.n	80052c8 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	7b1b      	ldrb	r3, [r3, #12]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	b21a      	sxth	r2, r3
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	7adb      	ldrb	r3, [r3, #11]
 8004f02:	b21b      	sxth	r3, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	b21b      	sxth	r3, r3
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0c:	d001      	beq.n	8004f12 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8004f0e:	230d      	movs	r3, #13
 8004f10:	e1da      	b.n	80052c8 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	7ddb      	ldrb	r3, [r3, #23]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	b21a      	sxth	r2, r3
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	7d9b      	ldrb	r3, [r3, #22]
 8004f1e:	b21b      	sxth	r3, r3
 8004f20:	4313      	orrs	r3, r2
 8004f22:	b21b      	sxth	r3, r3
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d112      	bne.n	8004f54 <find_volume+0x204>
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004f34:	061a      	lsls	r2, r3, #24
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f42:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004f46:	0212      	lsls	r2, r2, #8
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004f50:	4313      	orrs	r3, r2
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	7c1a      	ldrb	r2, [r3, #16]
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d006      	beq.n	8004f7e <find_volume+0x22e>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d001      	beq.n	8004f7e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8004f7a:	230d      	movs	r3, #13
 8004f7c:	e1a4      	b.n	80052c8 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004f84:	461a      	mov	r2, r3
 8004f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	7b5a      	ldrb	r2, [r3, #13]
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <find_volume+0x268>
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8004fb8:	230d      	movs	r3, #13
 8004fba:	e185      	b.n	80052c8 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	7c9b      	ldrb	r3, [r3, #18]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	b21a      	sxth	r2, r3
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	7c5b      	ldrb	r3, [r3, #17]
 8004fc8:	b21b      	sxth	r3, r3
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b21b      	sxth	r3, r3
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8004fe6:	230d      	movs	r3, #13
 8004fe8:	e16e      	b.n	80052c8 <find_volume+0x578>
 8004fea:	bf00      	nop
 8004fec:	20000650 	.word	0x20000650

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	7d1b      	ldrb	r3, [r3, #20]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	b21a      	sxth	r2, r3
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	7cdb      	ldrb	r3, [r3, #19]
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	4313      	orrs	r3, r2
 8005000:	b21b      	sxth	r3, r3
 8005002:	b29b      	uxth	r3, r3
 8005004:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005008:	2b00      	cmp	r3, #0
 800500a:	d112      	bne.n	8005032 <find_volume+0x2e2>
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005012:	061a      	lsls	r2, r3, #24
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	4313      	orrs	r3, r2
 800501e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005020:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005024:	0212      	lsls	r2, r2, #8
 8005026:	4313      	orrs	r3, r2
 8005028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800502a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800502e:	4313      	orrs	r3, r2
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	7bdb      	ldrb	r3, [r3, #15]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	b21a      	sxth	r2, r3
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	7b9b      	ldrb	r3, [r3, #14]
 800503e:	b21b      	sxth	r3, r3
 8005040:	4313      	orrs	r3, r2
 8005042:	b21b      	sxth	r3, r3
 8005044:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <find_volume+0x300>
 800504c:	230d      	movs	r3, #13
 800504e:	e13b      	b.n	80052c8 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005050:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	4413      	add	r3, r2
 8005056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005058:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800505c:	0912      	lsrs	r2, r2, #4
 800505e:	b292      	uxth	r2, r2
 8005060:	4413      	add	r3, r2
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	429a      	cmp	r2, r3
 800506a:	d201      	bcs.n	8005070 <find_volume+0x320>
 800506c:	230d      	movs	r3, #13
 800506e:	e12b      	b.n	80052c8 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005078:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800507c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <find_volume+0x33c>
 8005088:	230d      	movs	r3, #13
 800508a:	e11d      	b.n	80052c8 <find_volume+0x578>
	fmt = FS_FAT12;
 800508c:	2301      	movs	r3, #1
 800508e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005098:	4293      	cmp	r3, r2
 800509a:	d902      	bls.n	80050a2 <find_volume+0x352>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d902      	bls.n	80050b2 <find_volume+0x362>
 80050ac:	2303      	movs	r3, #3
 80050ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80050c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	441a      	add	r2, r3
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80050d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	441a      	add	r2, r3
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80050dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d121      	bne.n	8005128 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <find_volume+0x3a2>
 80050ee:	230d      	movs	r3, #13
 80050f0:	e0ea      	b.n	80052c8 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80050f8:	061a      	lsls	r2, r3, #24
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	4313      	orrs	r3, r2
 8005104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005106:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800510a:	0212      	lsls	r2, r2, #8
 800510c:	4313      	orrs	r3, r2
 800510e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005110:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005114:	431a      	orrs	r2, r3
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	647b      	str	r3, [r7, #68]	; 0x44
 8005126:	e025      	b.n	8005174 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <find_volume+0x3e6>
 8005132:	230d      	movs	r3, #13
 8005134:	e0c8      	b.n	80052c8 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800513c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513e:	441a      	add	r2, r3
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005146:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800514a:	2b02      	cmp	r3, #2
 800514c:	d104      	bne.n	8005158 <find_volume+0x408>
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	e00c      	b.n	8005172 <find_volume+0x422>
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	085a      	lsrs	r2, r3, #1
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005172:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800517a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005180:	0a5b      	lsrs	r3, r3, #9
 8005182:	429a      	cmp	r2, r3
 8005184:	d201      	bcs.n	800518a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8005186:	230d      	movs	r3, #13
 8005188:	e09e      	b.n	80052c8 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	2280      	movs	r2, #128	; 0x80
 80051a4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80051a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d177      	bne.n	80052a0 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	b21a      	sxth	r2, r3
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b21b      	sxth	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d16a      	bne.n	80052a0 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	3301      	adds	r3, #1
 80051ce:	4619      	mov	r1, r3
 80051d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051d2:	f7fe fcac 	bl	8003b2e <move_window>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d161      	bne.n	80052a0 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	b21a      	sxth	r2, r3
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80051f4:	b21b      	sxth	r3, r3
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	4a35      	ldr	r2, [pc, #212]	; (80052d0 <find_volume+0x580>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d14f      	bne.n	80052a0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	78db      	ldrb	r3, [r3, #3]
 8005204:	061a      	lsls	r2, r3, #24
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	789b      	ldrb	r3, [r3, #2]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	4313      	orrs	r3, r2
 800520e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005210:	7852      	ldrb	r2, [r2, #1]
 8005212:	0212      	lsls	r2, r2, #8
 8005214:	4313      	orrs	r3, r2
 8005216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <find_volume+0x584>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d13e      	bne.n	80052a0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005228:	061a      	lsls	r2, r3, #24
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	4313      	orrs	r3, r2
 8005234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005236:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800523a:	0212      	lsls	r2, r2, #8
 800523c:	4313      	orrs	r3, r2
 800523e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005240:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005244:	4313      	orrs	r3, r2
 8005246:	4a24      	ldr	r2, [pc, #144]	; (80052d8 <find_volume+0x588>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d129      	bne.n	80052a0 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005252:	061a      	lsls	r2, r3, #24
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	4313      	orrs	r3, r2
 800525e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005260:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005264:	0212      	lsls	r2, r2, #8
 8005266:	4313      	orrs	r3, r2
 8005268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800526a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800526e:	431a      	orrs	r2, r3
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800527c:	061a      	lsls	r2, r3, #24
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	4313      	orrs	r3, r2
 8005288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800528e:	0212      	lsls	r2, r2, #8
 8005290:	4313      	orrs	r3, r2
 8005292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005294:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005298:	431a      	orrs	r2, r3
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80052a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <find_volume+0x58c>)
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <find_volume+0x58c>)
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <find_volume+0x58c>)
 80052b8:	881a      	ldrh	r2, [r3, #0]
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80052c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052c2:	f7fe fbc1 	bl	8003a48 <clear_lock>
#endif

	return FR_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3758      	adds	r7, #88	; 0x58
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	ffffaa55 	.word	0xffffaa55
 80052d4:	41615252 	.word	0x41615252
 80052d8:	61417272 	.word	0x61417272
 80052dc:	20000654 	.word	0x20000654

080052e0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d022      	beq.n	8005338 <validate+0x58>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01d      	beq.n	8005338 <validate+0x58>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005302:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005306:	2b00      	cmp	r3, #0
 8005308:	d016      	beq.n	8005338 <validate+0x58>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005310:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800531a:	429a      	cmp	r2, r3
 800531c:	d10c      	bne.n	8005338 <validate+0x58>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005324:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005328:	4618      	mov	r0, r3
 800532a:	f7fe f8ed 	bl	8003508 <disk_status>
 800532e:	4603      	mov	r3, r0
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005338:	2309      	movs	r3, #9
 800533a:	e000      	b.n	800533e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800535a:	f107 0310 	add.w	r3, r7, #16
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fc48 	bl	8004bf4 <get_ldnumber>
 8005364:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	da01      	bge.n	8005370 <f_mount+0x28>
 800536c:	230b      	movs	r3, #11
 800536e:	e02d      	b.n	80053cc <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005370:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <f_mount+0x8c>)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005378:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005380:	69b8      	ldr	r0, [r7, #24]
 8005382:	f7fe fb61 	bl	8003a48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	490d      	ldr	r1, [pc, #52]	; (80053d4 <f_mount+0x8c>)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <f_mount+0x6a>
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d001      	beq.n	80053b6 <f_mount+0x6e>
 80053b2:	2300      	movs	r3, #0
 80053b4:	e00a      	b.n	80053cc <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80053b6:	f107 0108 	add.w	r1, r7, #8
 80053ba:	f107 030c 	add.w	r3, r7, #12
 80053be:	2200      	movs	r2, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fcc5 	bl	8004d50 <find_volume>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000650 	.word	0x20000650

080053d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80053de:	af00      	add	r7, sp, #0
 80053e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80053e4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80053e8:	6018      	str	r0, [r3, #0]
 80053ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80053ee:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80053f2:	6019      	str	r1, [r3, #0]
 80053f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80053f8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80053fc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80053fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005402:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <f_open+0x38>
 800540c:	2309      	movs	r3, #9
 800540e:	e257      	b.n	80058c0 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8005410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005414:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005424:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005428:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800542c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	f002 021f 	and.w	r2, r2, #31
 8005436:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800543c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	f107 0108 	add.w	r1, r7, #8
 800544c:	f107 0320 	add.w	r3, r7, #32
 8005450:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fc7b 	bl	8004d50 <find_volume>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005460:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005464:	2b00      	cmp	r3, #0
 8005466:	f040 8229 	bne.w	80058bc <f_open+0x4e4>
		INIT_BUF(dj);
 800546a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800546e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005472:	f107 0214 	add.w	r2, r7, #20
 8005476:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800547a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800547e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	f107 0320 	add.w	r3, r7, #32
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fb44 	bl	8004b18 <follow_path>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8005496:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800549a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800549e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054a2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80054a6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11d      	bne.n	80054ea <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80054ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <f_open+0xe6>
				res = FR_INVALID_NAME;
 80054b6:	2306      	movs	r3, #6
 80054b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80054bc:	e015      	b.n	80054ea <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80054be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80054c2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf14      	ite	ne
 80054d0:	2301      	movne	r3, #1
 80054d2:	2300      	moveq	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	f107 0320 	add.w	r3, r7, #32
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe f928 	bl	8003734 <chk_lock>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80054ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80054ee:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f003 031c 	and.w	r3, r3, #28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80e6 	beq.w	80056ca <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80054fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005502:	2b00      	cmp	r3, #0
 8005504:	d027      	beq.n	8005556 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005506:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800550a:	2b04      	cmp	r3, #4
 800550c:	d10e      	bne.n	800552c <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800550e:	f7fe f97d 	bl	800380c <enq_lock>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <f_open+0x14e>
 8005518:	f107 0320 	add.w	r3, r7, #32
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff f9cb 	bl	80048b8 <dir_register>
 8005522:	4603      	mov	r3, r0
 8005524:	e000      	b.n	8005528 <f_open+0x150>
 8005526:	2312      	movs	r3, #18
 8005528:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800552c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005530:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005534:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005538:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	f042 0208 	orr.w	r2, r2, #8
 8005542:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005548:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800554c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005550:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8005554:	e017      	b.n	8005586 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005556:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800555a:	330b      	adds	r3, #11
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f003 0311 	and.w	r3, r3, #17
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <f_open+0x196>
					res = FR_DENIED;
 8005566:	2307      	movs	r3, #7
 8005568:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800556c:	e00b      	b.n	8005586 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800556e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005572:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <f_open+0x1ae>
						res = FR_EXIST;
 8005580:	2308      	movs	r3, #8
 8005582:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005586:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800558a:	2b00      	cmp	r3, #0
 800558c:	f040 80c1 	bne.w	8005712 <f_open+0x33a>
 8005590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005594:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80b7 	beq.w	8005712 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 80055a4:	f7fd ff54 	bl	8003450 <get_fattime>
 80055a8:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80055ac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80055b0:	330e      	adds	r3, #14
 80055b2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80055be:	b29b      	uxth	r3, r3
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80055c8:	330f      	adds	r3, #15
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80055d2:	0c1a      	lsrs	r2, r3, #16
 80055d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80055d8:	3310      	adds	r3, #16
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80055e2:	0e1a      	lsrs	r2, r3, #24
 80055e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80055e8:	3311      	adds	r3, #17
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80055ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80055f2:	330b      	adds	r3, #11
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80055f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80055fc:	331c      	adds	r3, #28
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005606:	331d      	adds	r3, #29
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005610:	331e      	adds	r3, #30
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800561a:	331f      	adds	r3, #31
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005624:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800562c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff f840 	bl	80046b6 <ld_clust>
 8005636:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800563a:	2100      	movs	r1, #0
 800563c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8005640:	f7ff f866 	bl	8004710 <st_clust>
				dj.fs->wflag = 1;
 8005644:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005648:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800564c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005656:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800565a:	2b00      	cmp	r3, #0
 800565c:	d059      	beq.n	8005712 <f_open+0x33a>
					dw = dj.fs->winsect;
 800565e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005662:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005666:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800566a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800566e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8005672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005676:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800567a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800567e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fd17 	bl	80040b6 <remove_chain>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800568e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005692:	2b00      	cmp	r3, #0
 8005694:	d13d      	bne.n	8005712 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800569a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800569e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056a2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80056a6:	3a01      	subs	r2, #1
 80056a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80056ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80056b0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80056b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056b8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fa36 	bl	8003b2e <move_window>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80056c8:	e023      	b.n	8005712 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80056ca:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11f      	bne.n	8005712 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80056d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80056d6:	330b      	adds	r3, #11
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <f_open+0x312>
					res = FR_NO_FILE;
 80056e2:	2304      	movs	r3, #4
 80056e4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80056e8:	e013      	b.n	8005712 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80056ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80056ee:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <f_open+0x33a>
 80056fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005700:	330b      	adds	r3, #11
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <f_open+0x33a>
						res = FR_DENIED;
 800570c:	2307      	movs	r3, #7
 800570e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8005712:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005716:	2b00      	cmp	r3, #0
 8005718:	d153      	bne.n	80057c2 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800571a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800571e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <f_open+0x36c>
				mode |= FA__WRITTEN;
 800572c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005730:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005734:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005738:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	f042 0220 	orr.w	r2, r2, #32
 8005742:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005748:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800574c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005750:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005758:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8005762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005766:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005770:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005778:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	bf14      	ite	ne
 8005786:	2301      	movne	r3, #1
 8005788:	2300      	moveq	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	f107 0320 	add.w	r3, r7, #32
 8005792:	4611      	mov	r1, r2
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe f85d 	bl	8003854 <inc_lock>
 800579a:	4602      	mov	r2, r0
 800579c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057a0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80057aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <f_open+0x3ea>
 80057bc:	2302      	movs	r3, #2
 80057be:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80057c2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d178      	bne.n	80058bc <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80057ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057ce:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80057d8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80057e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057e6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80057f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80057f6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80057fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057fe:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe ff57 	bl	80046b6 <ld_clust>
 8005808:	4602      	mov	r2, r0
 800580a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800580e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005818:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800581c:	331f      	adds	r3, #31
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	061a      	lsls	r2, r3, #24
 8005822:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005826:	331e      	adds	r3, #30
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	4313      	orrs	r3, r2
 800582e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005832:	321d      	adds	r2, #29
 8005834:	7812      	ldrb	r2, [r2, #0]
 8005836:	0212      	lsls	r2, r2, #8
 8005838:	4313      	orrs	r3, r2
 800583a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800583e:	321c      	adds	r2, #28
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	431a      	orrs	r2, r3
 8005844:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005848:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8005852:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005856:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8005862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005866:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2200      	movs	r2, #0
 800586e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005876:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2200      	movs	r2, #0
 800587e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005886:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800588a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800588e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005892:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800589c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058a0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058aa:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80058ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80058b2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80058bc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b08c      	sub	sp, #48	; 0x30
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fcfc 	bl	80052e0 <validate>
 80058e8:	4603      	mov	r3, r0
 80058ea:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80058ec:	7ffb      	ldrb	r3, [r7, #31]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <f_read+0x2c>
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
 80058f4:	e150      	b.n	8005b98 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005906:	e147      	b.n	8005b98 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005916:	2307      	movs	r3, #7
 8005918:	e13e      	b.n	8005b98 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	429a      	cmp	r2, r3
 8005930:	f240 812d 	bls.w	8005b8e <f_read+0x2c4>
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005938:	e129      	b.n	8005b8e <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005944:	2b00      	cmp	r3, #0
 8005946:	f040 80f2 	bne.w	8005b2e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005950:	0a5b      	lsrs	r3, r3, #9
 8005952:	b2da      	uxtb	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800595a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800595e:	3b01      	subs	r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	4013      	ands	r3, r2
 8005964:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005966:	7dfb      	ldrb	r3, [r7, #23]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d139      	bne.n	80059e0 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597e:	e018      	b.n	80059b2 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005990:	4619      	mov	r1, r3
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7fe fc86 	bl	80042a4 <clmt_clust>
 8005998:	62f8      	str	r0, [r7, #44]	; 0x2c
 800599a:	e00a      	b.n	80059b2 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fe f9bb 	bl	8003d26 <get_fat>
 80059b0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d805      	bhi.n	80059c4 <f_read+0xfa>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80059c0:	2302      	movs	r3, #2
 80059c2:	e0e9      	b.n	8005b98 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d105      	bne.n	80059d8 <f_read+0x10e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0df      	b.n	8005b98 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7fe f978 	bl	8003ce4 <clust2sect>
 80059f4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <f_read+0x13e>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005a04:	2302      	movs	r3, #2
 8005a06:	e0c7      	b.n	8005b98 <f_read+0x2ce>
			sect += csect;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0a5b      	lsrs	r3, r3, #9
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d046      	beq.n	8005aaa <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005a1c:	7dfa      	ldrb	r2, [r7, #23]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	4413      	add	r3, r2
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005a28:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d908      	bls.n	8005a42 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a36:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a48:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	6a39      	ldr	r1, [r7, #32]
 8005a52:	f7fd fd99 	bl	8003588 <disk_read>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005a64:	2301      	movs	r3, #1
 8005a66:	e097      	b.n	8005b98 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d015      	beq.n	8005aa2 <f_read+0x1d8>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d90d      	bls.n	8005aa2 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	025b      	lsls	r3, r3, #9
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	4413      	add	r3, r2
 8005a96:	68f9      	ldr	r1, [r7, #12]
 8005a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fd fdd1 	bl	8003644 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	025b      	lsls	r3, r3, #9
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005aa8:	e05b      	b.n	8005b62 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d037      	beq.n	8005b26 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01d      	beq.n	8005b00 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f7fd fd76 	bl	80035c8 <disk_write>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005aea:	2301      	movs	r3, #1
 8005aec:	e054      	b.n	8005b98 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b06:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	f7fd fd3a 	bl	8003588 <disk_read>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005b22:	2301      	movs	r3, #1
 8005b24:	e038      	b.n	8005b98 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d901      	bls.n	8005b4a <f_read+0x280>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6a38      	ldr	r0, [r7, #32]
 8005b5e:	f7fd fd71 	bl	8003644 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005b62:	6a3a      	ldr	r2, [r7, #32]
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	4413      	add	r3, r2
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	441a      	add	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f aed2 	bne.w	800593a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3730      	adds	r7, #48	; 0x30
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff fb91 	bl	80052e0 <validate>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <f_write+0x2c>
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	e192      	b.n	8005ef2 <f_write+0x352>
	if (fp->err)							/* Check error */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005bdc:	e189      	b.n	8005ef2 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005bec:	2307      	movs	r3, #7
 8005bee:	e180      	b.n	8005ef2 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	441a      	add	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c00:	429a      	cmp	r2, r3
 8005c02:	f080 8158 	bcs.w	8005eb6 <f_write+0x316>
 8005c06:	2300      	movs	r3, #0
 8005c08:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005c0a:	e154      	b.n	8005eb6 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 8114 	bne.w	8005e44 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c22:	0a5b      	lsrs	r3, r3, #9
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	4013      	ands	r3, r2
 8005c36:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005c38:	7dbb      	ldrb	r3, [r7, #22]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d151      	bne.n	8005ce2 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10f      	bne.n	8005c68 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d121      	bne.n	8005c9a <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fa83 	bl	800416a <create_chain>
 8005c64:	6278      	str	r0, [r7, #36]	; 0x24
 8005c66:	e018      	b.n	8005c9a <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c78:	4619      	mov	r1, r3
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7fe fb12 	bl	80042a4 <clmt_clust>
 8005c80:	6278      	str	r0, [r7, #36]	; 0x24
 8005c82:	e00a      	b.n	8005c9a <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe fa69 	bl	800416a <create_chain>
 8005c98:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 810f 	beq.w	8005ec0 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <f_write+0x114>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e11e      	b.n	8005ef2 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d105      	bne.n	8005cc8 <f_write+0x128>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e114      	b.n	8005ef2 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <f_write+0x142>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01d      	beq.n	8005d2c <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cf6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005d02:	2301      	movs	r3, #1
 8005d04:	f7fd fc60 	bl	80035c8 <disk_write>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005d16:	2301      	movs	r3, #1
 8005d18:	e0eb      	b.n	8005ef2 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f7fd ffd2 	bl	8003ce4 <clust2sect>
 8005d40:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <f_write+0x1b4>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005d50:	2302      	movs	r3, #2
 8005d52:	e0ce      	b.n	8005ef2 <f_write+0x352>
			sect += csect;
 8005d54:	7dbb      	ldrb	r3, [r7, #22]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4413      	add	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	0a5b      	lsrs	r3, r3, #9
 8005d60:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d048      	beq.n	8005dfa <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005d68:	7dba      	ldrb	r2, [r7, #22]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005d74:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d908      	bls.n	8005d8e <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d82:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005d86:	461a      	mov	r2, r3
 8005d88:	7dbb      	ldrb	r3, [r7, #22]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d94:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	69b9      	ldr	r1, [r7, #24]
 8005d9e:	f7fd fc13 	bl	80035c8 <disk_write>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005db0:	2301      	movs	r3, #1
 8005db2:	e09e      	b.n	8005ef2 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d916      	bls.n	8005df2 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	025b      	lsls	r3, r3, #9
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f7fd fc32 	bl	8003644 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	025b      	lsls	r3, r3, #9
 8005df6:	623b      	str	r3, [r7, #32]
				continue;
 8005df8:	e047      	b.n	8005e8a <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d01a      	beq.n	8005e3c <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d212      	bcs.n	8005e3c <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e1c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005e20:	68f9      	ldr	r1, [r7, #12]
 8005e22:	2301      	movs	r3, #1
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	f7fd fbaf 	bl	8003588 <disk_read>
 8005e2a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e05a      	b.n	8005ef2 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005e52:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d901      	bls.n	8005e60 <f_write+0x2c0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	69b9      	ldr	r1, [r7, #24]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fd fbe6 	bl	8003644 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	4413      	add	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	441a      	add	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	441a      	add	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f aea7 	bne.w	8005c0c <f_write+0x6c>
 8005ebe:	e000      	b.n	8005ec2 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ec0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d905      	bls.n	8005ede <f_write+0x33e>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005ee4:	f043 0320 	orr.w	r3, r3, #32
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3728      	adds	r7, #40	; 0x28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff f9ec 	bl	80052e0 <validate>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 80a8 	bne.w	8006064 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80a0 	beq.w	8006064 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d019      	beq.n	8005f66 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f38:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005f44:	2301      	movs	r3, #1
 8005f46:	f7fd fb3f 	bl	80035c8 <disk_write>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005f50:	2301      	movs	r3, #1
 8005f52:	e088      	b.n	8006066 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7fd fdda 	bl	8003b2e <move_window>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d16f      	bne.n	8006064 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005f8a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	330b      	adds	r3, #11
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	330b      	adds	r3, #11
 8005f96:	f042 0220 	orr.w	r2, r2, #32
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	331c      	adds	r3, #28
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	331d      	adds	r3, #29
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005fc6:	0c1a      	lsrs	r2, r3, #16
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	331e      	adds	r3, #30
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005fd6:	0e1a      	lsrs	r2, r3, #24
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	331f      	adds	r3, #31
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6938      	ldr	r0, [r7, #16]
 8005fea:	f7fe fb91 	bl	8004710 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005fee:	f7fd fa2f 	bl	8003450 <get_fattime>
 8005ff2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	3316      	adds	r3, #22
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	b29b      	uxth	r3, r3
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	b29a      	uxth	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3317      	adds	r3, #23
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0c1a      	lsrs	r2, r3, #16
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3318      	adds	r3, #24
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	0e1a      	lsrs	r2, r3, #24
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3319      	adds	r3, #25
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	3312      	adds	r3, #18
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3313      	adds	r3, #19
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800603c:	f023 0320 	bic.w	r3, r3, #32
 8006040:	b2da      	uxtb	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800605a:	4618      	mov	r0, r3
 800605c:	f7fd fd95 	bl	8003b8a <sync_fs>
 8006060:	4603      	mov	r3, r0
 8006062:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006064:	7dfb      	ldrb	r3, [r7, #23]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff ff3f 	bl	8005efa <f_sync>
 800607c:	4603      	mov	r3, r0
 800607e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d116      	bne.n	80060b4 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff f92a 	bl	80052e0 <validate>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10e      	bne.n	80060b4 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800609c:	4618      	mov	r0, r3
 800609e:	f7fd fc8f 	bl	80039c0 <dec_lock>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b090      	sub	sp, #64	; 0x40
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff f909 	bl	80052e0 <validate>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80060d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <f_lseek+0x24>
 80060dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060e0:	e247      	b.n	8006572 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80060f2:	e23e      	b.n	8006572 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80f2 	beq.w	80062e4 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d164      	bne.n	80061d2 <f_lseek+0x114>
			tbl = fp->cltbl;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	1d1a      	adds	r2, r3, #4
 8006114:	627a      	str	r2, [r7, #36]	; 0x24
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	2302      	movs	r3, #2
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006124:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	2b00      	cmp	r3, #0
 800612a:	d041      	beq.n	80061b0 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	2300      	movs	r3, #0
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	3302      	adds	r3, #2
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	3301      	adds	r3, #1
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800614a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800614c:	4618      	mov	r0, r3
 800614e:	f7fd fdea 	bl	8003d26 <get_fat>
 8006152:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	2b01      	cmp	r3, #1
 8006158:	d805      	bhi.n	8006166 <f_lseek+0xa8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006162:	2302      	movs	r3, #2
 8006164:	e205      	b.n	8006572 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d105      	bne.n	800617a <f_lseek+0xbc>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006176:	2301      	movs	r3, #1
 8006178:	e1fb      	b.n	8006572 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006180:	429a      	cmp	r2, r3
 8006182:	d0da      	beq.n	800613a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	429a      	cmp	r2, r3
 800618a:	d809      	bhi.n	80061a0 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	627a      	str	r2, [r7, #36]	; 0x24
 8006192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	627a      	str	r2, [r7, #36]	; 0x24
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d3bd      	bcc.n	800612c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80061b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80061ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d803      	bhi.n	80061ca <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e1d1      	b.n	800656e <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80061ca:	2311      	movs	r3, #17
 80061cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80061d0:	e1cd      	b.n	800656e <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d903      	bls.n	80061e6 <f_lseek+0x128>
				ofs = fp->fsize;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80061e4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 81bc 	beq.w	800656e <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fe f851 	bl	80042a4 <clmt_clust>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006216:	4619      	mov	r1, r3
 8006218:	4610      	mov	r0, r2
 800621a:	f7fd fd63 	bl	8003ce4 <clust2sect>
 800621e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <f_lseek+0x174>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800622e:	2302      	movs	r3, #2
 8006230:	e19f      	b.n	8006572 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	3b01      	subs	r3, #1
 8006236:	0a5b      	lsrs	r3, r3, #9
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800623e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006242:	3a01      	subs	r2, #1
 8006244:	4013      	ands	r3, r2
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4413      	add	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8189 	beq.w	800656e <f_lseek+0x4b0>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	429a      	cmp	r2, r3
 8006266:	f000 8182 	beq.w	800656e <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01d      	beq.n	80062b4 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800627e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800628a:	2301      	movs	r3, #1
 800628c:	f7fd f99c 	bl	80035c8 <disk_write>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800629e:	2301      	movs	r3, #1
 80062a0:	e167      	b.n	8006572 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80062a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062ba:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	2301      	movs	r3, #1
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	f7fd f960 	bl	8003588 <disk_read>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80062d6:	2301      	movs	r3, #1
 80062d8:	e14b      	b.n	8006572 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80062e2:	e144      	b.n	800656e <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d90a      	bls.n	8006306 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006304:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800630c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006316:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80c6 	beq.w	80064ae <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006328:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800632c:	025b      	lsls	r3, r3, #9
 800632e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01e      	beq.n	8006374 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	1e5a      	subs	r2, r3, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	1e59      	subs	r1, r3, #1
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800634a:	429a      	cmp	r2, r3
 800634c:	d312      	bcc.n	8006374 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	425b      	negs	r3, r3
 8006356:	401a      	ands	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
 8006372:	e029      	b.n	80063c8 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800637a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	2b00      	cmp	r3, #0
 8006380:	d11e      	bne.n	80063c0 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f7fd feed 	bl	800416a <create_chain>
 8006390:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	2b01      	cmp	r3, #1
 8006396:	d105      	bne.n	80063a4 <f_lseek+0x2e6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80063a0:	2302      	movs	r3, #2
 80063a2:	e0e6      	b.n	8006572 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d105      	bne.n	80063b8 <f_lseek+0x2fa>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0dc      	b.n	8006572 <f_lseek+0x4b4>
					fp->sclust = clst;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d06f      	beq.n	80064ae <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 80063ce:	e047      	b.n	8006460 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fd febf 	bl	800416a <create_chain>
 80063ec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <f_lseek+0x34c>
							ofs = bcs; break;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	e036      	b.n	8006468 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006402:	4618      	mov	r0, r3
 8006404:	f7fd fc8f 	bl	8003d26 <get_fat>
 8006408:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d105      	bne.n	800641e <f_lseek+0x360>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800641a:	2301      	movs	r3, #1
 800641c:	e0a9      	b.n	8006572 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	2b01      	cmp	r3, #1
 8006422:	d907      	bls.n	8006434 <f_lseek+0x376>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800642a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800642e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006430:	429a      	cmp	r2, r3
 8006432:	d305      	bcc.n	8006440 <f_lseek+0x382>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800643c:	2302      	movs	r3, #2
 800643e:	e098      	b.n	8006572 <f_lseek+0x4b4>
					fp->clust = clst;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006444:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	441a      	add	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	429a      	cmp	r2, r3
 8006466:	d8b3      	bhi.n	80063d0 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	441a      	add	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	2b00      	cmp	r3, #0
 8006480:	d015      	beq.n	80064ae <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006488:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800648a:	4618      	mov	r0, r3
 800648c:	f7fd fc2a 	bl	8003ce4 <clust2sect>
 8006490:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <f_lseek+0x3e6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80064a0:	2302      	movs	r3, #2
 80064a2:	e066      	b.n	8006572 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	0a5b      	lsrs	r3, r3, #9
 80064a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064aa:	4413      	add	r3, r2
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80064b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d041      	beq.n	8006540 <f_lseek+0x482>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80064c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d03b      	beq.n	8006540 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01d      	beq.n	8006512 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064dc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80064e8:	2301      	movs	r3, #1
 80064ea:	f7fd f86d 	bl	80035c8 <disk_write>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80064fc:	2301      	movs	r3, #1
 80064fe:	e038      	b.n	8006572 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800650a:	b2da      	uxtb	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006518:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	2301      	movs	r3, #1
 8006520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006522:	f7fd f831 	bl	8003588 <disk_read>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006534:	2301      	movs	r3, #1
 8006536:	e01c      	b.n	8006572 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800653c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800654c:	429a      	cmp	r2, r3
 800654e:	d90e      	bls.n	800656e <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006562:	f043 0320 	orr.w	r3, r3, #32
 8006566:	b2da      	uxtb	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800656e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006572:	4618      	mov	r0, r3
 8006574:	3740      	adds	r7, #64	; 0x40
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b08e      	sub	sp, #56	; 0x38
 800657e:	af00      	add	r7, sp, #0
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	2200      	movs	r2, #0
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fe fbde 	bl	8004d50 <find_volume>
 8006594:	4603      	mov	r3, r0
 8006596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80065a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 80af 	bne.w	8006708 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065b6:	3b02      	subs	r3, #2
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d805      	bhi.n	80065c8 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e09f      	b.n	8006708 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065ce:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80065d4:	7efb      	ldrb	r3, [r7, #27]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d125      	bne.n	8006626 <f_getfree+0xac>
				clst = 2;
 80065da:	2302      	movs	r3, #2
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80065de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e0:	69f8      	ldr	r0, [r7, #28]
 80065e2:	f7fd fba0 	bl	8003d26 <get_fat>
 80065e6:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d103      	bne.n	80065f8 <f_getfree+0x7e>
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80065f6:	e077      	b.n	80066e8 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d103      	bne.n	8006606 <f_getfree+0x8c>
 80065fe:	2302      	movs	r3, #2
 8006600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006604:	e070      	b.n	80066e8 <f_getfree+0x16e>
					if (stat == 0) n++;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <f_getfree+0x98>
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	3301      	adds	r3, #1
 8006610:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	3301      	adds	r3, #1
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800661e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d3dc      	bcc.n	80065de <f_getfree+0x64>
 8006624:	e060      	b.n	80066e8 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	2300      	movs	r3, #0
 800663c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d112      	bne.n	800666a <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	62ba      	str	r2, [r7, #40]	; 0x28
 800664a:	4619      	mov	r1, r3
 800664c:	69f8      	ldr	r0, [r7, #28]
 800664e:	f7fd fa6e 	bl	8003b2e <move_window>
 8006652:	4603      	mov	r3, r0
 8006654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8006658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800665c:	2b00      	cmp	r3, #0
 800665e:	d142      	bne.n	80066e6 <f_getfree+0x16c>
						p = fs->win.d8;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800666a:	7efb      	ldrb	r3, [r7, #27]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d115      	bne.n	800669c <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	3301      	adds	r3, #1
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	b21a      	sxth	r2, r3
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b21b      	sxth	r3, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	b21b      	sxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <f_getfree+0x114>
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	3301      	adds	r3, #1
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	3302      	adds	r3, #2
 8006692:	623b      	str	r3, [r7, #32]
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	3b02      	subs	r3, #2
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
 800669a:	e01d      	b.n	80066d8 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	3303      	adds	r3, #3
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	061a      	lsls	r2, r3, #24
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	3302      	adds	r3, #2
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	4313      	orrs	r3, r2
 80066ae:	6a3a      	ldr	r2, [r7, #32]
 80066b0:	3201      	adds	r2, #1
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	0212      	lsls	r2, r2, #8
 80066b6:	4313      	orrs	r3, r2
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d102      	bne.n	80066cc <f_getfree+0x152>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	3301      	adds	r3, #1
 80066ca:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	3304      	adds	r3, #4
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	3b04      	subs	r3, #4
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	3b01      	subs	r3, #1
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1ac      	bne.n	800663e <f_getfree+0xc4>
 80066e4:	e000      	b.n	80066e8 <f_getfree+0x16e>
						if (res != FR_OK) break;
 80066e6:	bf00      	nop
			}
			fs->free_clust = n;
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006706:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800670c:	4618      	mov	r0, r3
 800670e:	3738      	adds	r7, #56	; 0x38
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 800671a:	af00      	add	r7, sp, #0
 800671c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006720:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8006724:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800672c:	1d39      	adds	r1, r7, #4
 800672e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006732:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006736:	2201      	movs	r2, #1
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fb09 	bl	8004d50 <find_volume>
 800673e:	4603      	mov	r3, r0
 8006740:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	if (res == FR_OK) {
 8006744:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006748:	2b00      	cmp	r3, #0
 800674a:	f040 80c7 	bne.w	80068dc <f_unlink+0x1c8>
		INIT_BUF(dj);
 800674e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006752:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006756:	f107 0208 	add.w	r2, r7, #8
 800675a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);		/* Follow the file path */
 800675e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006762:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800676c:	4611      	mov	r1, r2
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe f9d2 	bl	8004b18 <follow_path>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800677a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800677e:	2b00      	cmp	r3, #0
 8006780:	d108      	bne.n	8006794 <f_unlink+0x80>
 8006782:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006786:	2102      	movs	r1, #2
 8006788:	4618      	mov	r0, r3
 800678a:	f7fc ffd3 	bl	8003734 <chk_lock>
 800678e:	4603      	mov	r3, r0
 8006790:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006794:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 809f 	bne.w	80068dc <f_unlink+0x1c8>
			dir = dj.dir;
 800679e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80067a2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80067a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067aa:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
			if (!dir) {
 80067ae:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <f_unlink+0xaa>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80067b6:	2306      	movs	r3, #6
 80067b8:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80067bc:	e00a      	b.n	80067d4 <f_unlink+0xc0>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 80067be:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80067c2:	330b      	adds	r3, #11
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <f_unlink+0xc0>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80067ce:	2307      	movs	r3, #7
 80067d0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
			if (res == FR_OK) {
 80067d4:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d14d      	bne.n	8006878 <f_unlink+0x164>
				dclst = ld_clust(dj.fs, dir);
 80067dc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80067e0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80067e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067e8:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fd ff62 	bl	80046b6 <ld_clust>
 80067f2:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 80067f6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d03c      	beq.n	8006878 <f_unlink+0x164>
 80067fe:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8006802:	330b      	adds	r3, #11
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	d034      	beq.n	8006878 <f_unlink+0x164>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800680e:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	f44f 7208 	mov.w	r2, #544	; 0x220
 800681a:	4618      	mov	r0, r3
 800681c:	f7fc ff12 	bl	8003644 <mem_cpy>
						sdj.sclust = dclst;
 8006820:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006824:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8006828:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800682c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
						res = dir_sdi(&sdj, 2);
 8006830:	f107 0314 	add.w	r3, r7, #20
 8006834:	2102      	movs	r1, #2
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd fd68 	bl	800430c <dir_sdi>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						if (res == FR_OK) {
 8006842:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006846:	2b00      	cmp	r3, #0
 8006848:	d116      	bne.n	8006878 <f_unlink+0x164>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800684a:	f107 0314 	add.w	r3, r7, #20
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f7fd ffd2 	bl	80047fa <dir_read>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800685c:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <f_unlink+0x156>
 8006864:	2307      	movs	r3, #7
 8006866:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800686a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800686e:	2b04      	cmp	r3, #4
 8006870:	d102      	bne.n	8006878 <f_unlink+0x164>
 8006872:	2300      	movs	r3, #0
 8006874:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						}
					}
				}
			}
			if (res == FR_OK) {
 8006878:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800687c:	2b00      	cmp	r3, #0
 800687e:	d12d      	bne.n	80068dc <f_unlink+0x1c8>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8006880:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe f850 	bl	800492a <dir_remove>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8006890:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8006894:	2b00      	cmp	r3, #0
 8006896:	d111      	bne.n	80068bc <f_unlink+0x1a8>
 8006898:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00d      	beq.n	80068bc <f_unlink+0x1a8>
					res = remove_chain(dj.fs, dclst);
 80068a0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80068a4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80068a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068ac:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fd fc00 	bl	80040b6 <remove_chain>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK) res = sync_fs(dj.fs);
 80068bc:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <f_unlink+0x1c8>
 80068c4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80068c8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80068cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fd f95a 	bl	8003b8a <sync_fs>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 80068dc:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b088      	sub	sp, #32
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80068fe:	e01b      	b.n	8006938 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006900:	f107 0310 	add.w	r3, r7, #16
 8006904:	f107 0114 	add.w	r1, r7, #20
 8006908:	2201      	movs	r2, #1
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe ffdd 	bl	80058ca <f_read>
		if (rc != 1) break;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d116      	bne.n	8006944 <f_gets+0x5a>
		c = s[0];
 8006916:	7d3b      	ldrb	r3, [r7, #20]
 8006918:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	2b0d      	cmp	r3, #13
 800691e:	d100      	bne.n	8006922 <f_gets+0x38>
 8006920:	e00a      	b.n	8006938 <f_gets+0x4e>
		*p++ = c;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	61ba      	str	r2, [r7, #24]
 8006928:	7dfa      	ldrb	r2, [r7, #23]
 800692a:	701a      	strb	r2, [r3, #0]
		n++;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	3301      	adds	r3, #1
 8006930:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b0a      	cmp	r3, #10
 8006936:	d007      	beq.n	8006948 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3b01      	subs	r3, #1
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	429a      	cmp	r2, r3
 8006940:	dbde      	blt.n	8006900 <f_gets+0x16>
 8006942:	e002      	b.n	800694a <f_gets+0x60>
		if (rc != 1) break;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006948:	bf00      	nop
	}
	*p = 0;
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <f_gets+0x70>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	e000      	b.n	800695c <f_gets+0x72>
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	2b0a      	cmp	r3, #10
 8006974:	d103      	bne.n	800697e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006976:	210d      	movs	r1, #13
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fff3 	bl	8006964 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	db25      	blt.n	80069d6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	60fa      	str	r2, [r7, #12]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4413      	add	r3, r2
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b3c      	cmp	r3, #60	; 0x3c
 800699c:	dd12      	ble.n	80069c4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f103 010c 	add.w	r1, r3, #12
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f107 0308 	add.w	r3, r7, #8
 80069ae:	f7ff f8f7 	bl	8005ba0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d101      	bne.n	80069be <putc_bfd+0x5a>
 80069ba:	2300      	movs	r3, #0
 80069bc:	e001      	b.n	80069c2 <putc_bfd+0x5e>
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	609a      	str	r2, [r3, #8]
 80069d4:	e000      	b.n	80069d8 <putc_bfd+0x74>
	if (i < 0) return;
 80069d6:	bf00      	nop
}
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80069de:	b590      	push	{r4, r7, lr}
 80069e0:	b097      	sub	sp, #92	; 0x5c
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80069f4:	e009      	b.n	8006a0a <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	781a      	ldrb	r2, [r3, #0]
 80069fe:	f107 030c 	add.w	r3, r7, #12
 8006a02:	4611      	mov	r1, r2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff ffad 	bl	8006964 <putc_bfd>
	while (*str)			/* Put the string */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f1      	bne.n	80069f6 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db15      	blt.n	8006a44 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	461c      	mov	r4, r3
 8006a1e:	f107 0208 	add.w	r2, r7, #8
 8006a22:	f107 030c 	add.w	r3, r7, #12
 8006a26:	f103 010c 	add.w	r1, r3, #12
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	f7ff f8b7 	bl	8005ba0 <f_write>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d101      	bne.n	8006a44 <f_puts+0x66>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	e001      	b.n	8006a48 <f_puts+0x6a>
	return EOF;
 8006a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	375c      	adds	r7, #92	; 0x5c
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd90      	pop	{r4, r7, pc}

08006a50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006a66:	4b1e      	ldr	r3, [pc, #120]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006a68:	7a5b      	ldrb	r3, [r3, #9]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d831      	bhi.n	8006ad4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a70:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006a72:	7a5b      	ldrb	r3, [r3, #9]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006a7e:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006a80:	7a5b      	ldrb	r3, [r3, #9]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006a8e:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006a90:	7a5b      	ldrb	r3, [r3, #9]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006a98:	4413      	add	r3, r2
 8006a9a:	79fa      	ldrb	r2, [r7, #7]
 8006a9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a9e:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006aa0:	7a5b      	ldrb	r3, [r3, #9]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	b2d1      	uxtb	r1, r2
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <FATFS_LinkDriverEx+0x90>)
 8006aaa:	7251      	strb	r1, [r2, #9]
 8006aac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006aae:	7dbb      	ldrb	r3, [r7, #22]
 8006ab0:	3330      	adds	r3, #48	; 0x30
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3301      	adds	r3, #1
 8006abc:	223a      	movs	r2, #58	; 0x3a
 8006abe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	222f      	movs	r2, #47	; 0x2f
 8006ac6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	3303      	adds	r3, #3
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	20000670 	.word	0x20000670

08006ae4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006aee:	2200      	movs	r2, #0
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ffac 	bl	8006a50 <FATFS_LinkDriverEx>
 8006af8:	4603      	mov	r3, r0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <__errno>:
 8006b04:	4b01      	ldr	r3, [pc, #4]	; (8006b0c <__errno+0x8>)
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000024 	.word	0x20000024

08006b10 <__libc_init_array>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	2600      	movs	r6, #0
 8006b14:	4d0c      	ldr	r5, [pc, #48]	; (8006b48 <__libc_init_array+0x38>)
 8006b16:	4c0d      	ldr	r4, [pc, #52]	; (8006b4c <__libc_init_array+0x3c>)
 8006b18:	1b64      	subs	r4, r4, r5
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	42a6      	cmp	r6, r4
 8006b1e:	d109      	bne.n	8006b34 <__libc_init_array+0x24>
 8006b20:	f000 fc9c 	bl	800745c <_init>
 8006b24:	2600      	movs	r6, #0
 8006b26:	4d0a      	ldr	r5, [pc, #40]	; (8006b50 <__libc_init_array+0x40>)
 8006b28:	4c0a      	ldr	r4, [pc, #40]	; (8006b54 <__libc_init_array+0x44>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	42a6      	cmp	r6, r4
 8006b30:	d105      	bne.n	8006b3e <__libc_init_array+0x2e>
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b38:	4798      	blx	r3
 8006b3a:	3601      	adds	r6, #1
 8006b3c:	e7ee      	b.n	8006b1c <__libc_init_array+0xc>
 8006b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b42:	4798      	blx	r3
 8006b44:	3601      	adds	r6, #1
 8006b46:	e7f2      	b.n	8006b2e <__libc_init_array+0x1e>
 8006b48:	080078a0 	.word	0x080078a0
 8006b4c:	080078a0 	.word	0x080078a0
 8006b50:	080078a0 	.word	0x080078a0
 8006b54:	080078a4 	.word	0x080078a4

08006b58 <memcpy>:
 8006b58:	440a      	add	r2, r1
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b60:	d100      	bne.n	8006b64 <memcpy+0xc>
 8006b62:	4770      	bx	lr
 8006b64:	b510      	push	{r4, lr}
 8006b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b6a:	4291      	cmp	r1, r2
 8006b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b70:	d1f9      	bne.n	8006b66 <memcpy+0xe>
 8006b72:	bd10      	pop	{r4, pc}

08006b74 <memset>:
 8006b74:	4603      	mov	r3, r0
 8006b76:	4402      	add	r2, r0
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <memset+0xa>
 8006b7c:	4770      	bx	lr
 8006b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b82:	e7f9      	b.n	8006b78 <memset+0x4>

08006b84 <siprintf>:
 8006b84:	b40e      	push	{r1, r2, r3}
 8006b86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b8a:	b500      	push	{lr}
 8006b8c:	b09c      	sub	sp, #112	; 0x70
 8006b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	9107      	str	r1, [sp, #28]
 8006b96:	9104      	str	r1, [sp, #16]
 8006b98:	4808      	ldr	r0, [pc, #32]	; (8006bbc <siprintf+0x38>)
 8006b9a:	4909      	ldr	r1, [pc, #36]	; (8006bc0 <siprintf+0x3c>)
 8006b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba0:	9105      	str	r1, [sp, #20]
 8006ba2:	6800      	ldr	r0, [r0, #0]
 8006ba4:	a902      	add	r1, sp, #8
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	f000 f868 	bl	8006c7c <_svfiprintf_r>
 8006bac:	2200      	movs	r2, #0
 8006bae:	9b02      	ldr	r3, [sp, #8]
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	b01c      	add	sp, #112	; 0x70
 8006bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb8:	b003      	add	sp, #12
 8006bba:	4770      	bx	lr
 8006bbc:	20000024 	.word	0x20000024
 8006bc0:	ffff0208 	.word	0xffff0208

08006bc4 <__ssputs_r>:
 8006bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	688e      	ldr	r6, [r1, #8]
 8006bca:	4682      	mov	sl, r0
 8006bcc:	429e      	cmp	r6, r3
 8006bce:	460c      	mov	r4, r1
 8006bd0:	4690      	mov	r8, r2
 8006bd2:	461f      	mov	r7, r3
 8006bd4:	d838      	bhi.n	8006c48 <__ssputs_r+0x84>
 8006bd6:	898a      	ldrh	r2, [r1, #12]
 8006bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bdc:	d032      	beq.n	8006c44 <__ssputs_r+0x80>
 8006bde:	6825      	ldr	r5, [r4, #0]
 8006be0:	6909      	ldr	r1, [r1, #16]
 8006be2:	3301      	adds	r3, #1
 8006be4:	eba5 0901 	sub.w	r9, r5, r1
 8006be8:	6965      	ldr	r5, [r4, #20]
 8006bea:	444b      	add	r3, r9
 8006bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bf4:	106d      	asrs	r5, r5, #1
 8006bf6:	429d      	cmp	r5, r3
 8006bf8:	bf38      	it	cc
 8006bfa:	461d      	movcc	r5, r3
 8006bfc:	0553      	lsls	r3, r2, #21
 8006bfe:	d531      	bpl.n	8006c64 <__ssputs_r+0xa0>
 8006c00:	4629      	mov	r1, r5
 8006c02:	f000 fb61 	bl	80072c8 <_malloc_r>
 8006c06:	4606      	mov	r6, r0
 8006c08:	b950      	cbnz	r0, 8006c20 <__ssputs_r+0x5c>
 8006c0a:	230c      	movs	r3, #12
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	f8ca 3000 	str.w	r3, [sl]
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c20:	464a      	mov	r2, r9
 8006c22:	6921      	ldr	r1, [r4, #16]
 8006c24:	f7ff ff98 	bl	8006b58 <memcpy>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c32:	81a3      	strh	r3, [r4, #12]
 8006c34:	6126      	str	r6, [r4, #16]
 8006c36:	444e      	add	r6, r9
 8006c38:	6026      	str	r6, [r4, #0]
 8006c3a:	463e      	mov	r6, r7
 8006c3c:	6165      	str	r5, [r4, #20]
 8006c3e:	eba5 0509 	sub.w	r5, r5, r9
 8006c42:	60a5      	str	r5, [r4, #8]
 8006c44:	42be      	cmp	r6, r7
 8006c46:	d900      	bls.n	8006c4a <__ssputs_r+0x86>
 8006c48:	463e      	mov	r6, r7
 8006c4a:	4632      	mov	r2, r6
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	f000 fab8 	bl	80071c4 <memmove>
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	2000      	movs	r0, #0
 8006c58:	1b9b      	subs	r3, r3, r6
 8006c5a:	60a3      	str	r3, [r4, #8]
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	4433      	add	r3, r6
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	e7db      	b.n	8006c1c <__ssputs_r+0x58>
 8006c64:	462a      	mov	r2, r5
 8006c66:	f000 fba3 	bl	80073b0 <_realloc_r>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d1e1      	bne.n	8006c34 <__ssputs_r+0x70>
 8006c70:	4650      	mov	r0, sl
 8006c72:	6921      	ldr	r1, [r4, #16]
 8006c74:	f000 fac0 	bl	80071f8 <_free_r>
 8006c78:	e7c7      	b.n	8006c0a <__ssputs_r+0x46>
	...

08006c7c <_svfiprintf_r>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	4698      	mov	r8, r3
 8006c82:	898b      	ldrh	r3, [r1, #12]
 8006c84:	4607      	mov	r7, r0
 8006c86:	061b      	lsls	r3, r3, #24
 8006c88:	460d      	mov	r5, r1
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	b09d      	sub	sp, #116	; 0x74
 8006c8e:	d50e      	bpl.n	8006cae <_svfiprintf_r+0x32>
 8006c90:	690b      	ldr	r3, [r1, #16]
 8006c92:	b963      	cbnz	r3, 8006cae <_svfiprintf_r+0x32>
 8006c94:	2140      	movs	r1, #64	; 0x40
 8006c96:	f000 fb17 	bl	80072c8 <_malloc_r>
 8006c9a:	6028      	str	r0, [r5, #0]
 8006c9c:	6128      	str	r0, [r5, #16]
 8006c9e:	b920      	cbnz	r0, 8006caa <_svfiprintf_r+0x2e>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca8:	e0d1      	b.n	8006e4e <_svfiprintf_r+0x1d2>
 8006caa:	2340      	movs	r3, #64	; 0x40
 8006cac:	616b      	str	r3, [r5, #20]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb2:	2320      	movs	r3, #32
 8006cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cb8:	2330      	movs	r3, #48	; 0x30
 8006cba:	f04f 0901 	mov.w	r9, #1
 8006cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e68 <_svfiprintf_r+0x1ec>
 8006cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cca:	4623      	mov	r3, r4
 8006ccc:	469a      	mov	sl, r3
 8006cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cd2:	b10a      	cbz	r2, 8006cd8 <_svfiprintf_r+0x5c>
 8006cd4:	2a25      	cmp	r2, #37	; 0x25
 8006cd6:	d1f9      	bne.n	8006ccc <_svfiprintf_r+0x50>
 8006cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cdc:	d00b      	beq.n	8006cf6 <_svfiprintf_r+0x7a>
 8006cde:	465b      	mov	r3, fp
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f7ff ff6d 	bl	8006bc4 <__ssputs_r>
 8006cea:	3001      	adds	r0, #1
 8006cec:	f000 80aa 	beq.w	8006e44 <_svfiprintf_r+0x1c8>
 8006cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cf2:	445a      	add	r2, fp
 8006cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 80a2 	beq.w	8006e44 <_svfiprintf_r+0x1c8>
 8006d00:	2300      	movs	r3, #0
 8006d02:	f04f 32ff 	mov.w	r2, #4294967295
 8006d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d0a:	f10a 0a01 	add.w	sl, sl, #1
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	9307      	str	r3, [sp, #28]
 8006d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d16:	931a      	str	r3, [sp, #104]	; 0x68
 8006d18:	4654      	mov	r4, sl
 8006d1a:	2205      	movs	r2, #5
 8006d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d20:	4851      	ldr	r0, [pc, #324]	; (8006e68 <_svfiprintf_r+0x1ec>)
 8006d22:	f000 fa41 	bl	80071a8 <memchr>
 8006d26:	9a04      	ldr	r2, [sp, #16]
 8006d28:	b9d8      	cbnz	r0, 8006d62 <_svfiprintf_r+0xe6>
 8006d2a:	06d0      	lsls	r0, r2, #27
 8006d2c:	bf44      	itt	mi
 8006d2e:	2320      	movmi	r3, #32
 8006d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d34:	0711      	lsls	r1, r2, #28
 8006d36:	bf44      	itt	mi
 8006d38:	232b      	movmi	r3, #43	; 0x2b
 8006d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d015      	beq.n	8006d72 <_svfiprintf_r+0xf6>
 8006d46:	4654      	mov	r4, sl
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f04f 0c0a 	mov.w	ip, #10
 8006d4e:	9a07      	ldr	r2, [sp, #28]
 8006d50:	4621      	mov	r1, r4
 8006d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d56:	3b30      	subs	r3, #48	; 0x30
 8006d58:	2b09      	cmp	r3, #9
 8006d5a:	d94e      	bls.n	8006dfa <_svfiprintf_r+0x17e>
 8006d5c:	b1b0      	cbz	r0, 8006d8c <_svfiprintf_r+0x110>
 8006d5e:	9207      	str	r2, [sp, #28]
 8006d60:	e014      	b.n	8006d8c <_svfiprintf_r+0x110>
 8006d62:	eba0 0308 	sub.w	r3, r0, r8
 8006d66:	fa09 f303 	lsl.w	r3, r9, r3
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	46a2      	mov	sl, r4
 8006d6e:	9304      	str	r3, [sp, #16]
 8006d70:	e7d2      	b.n	8006d18 <_svfiprintf_r+0x9c>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	1d19      	adds	r1, r3, #4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	9103      	str	r1, [sp, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bfbb      	ittet	lt
 8006d7e:	425b      	neglt	r3, r3
 8006d80:	f042 0202 	orrlt.w	r2, r2, #2
 8006d84:	9307      	strge	r3, [sp, #28]
 8006d86:	9307      	strlt	r3, [sp, #28]
 8006d88:	bfb8      	it	lt
 8006d8a:	9204      	strlt	r2, [sp, #16]
 8006d8c:	7823      	ldrb	r3, [r4, #0]
 8006d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d90:	d10c      	bne.n	8006dac <_svfiprintf_r+0x130>
 8006d92:	7863      	ldrb	r3, [r4, #1]
 8006d94:	2b2a      	cmp	r3, #42	; 0x2a
 8006d96:	d135      	bne.n	8006e04 <_svfiprintf_r+0x188>
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	3402      	adds	r4, #2
 8006d9c:	1d1a      	adds	r2, r3, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	9203      	str	r2, [sp, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bfb8      	it	lt
 8006da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006e6c <_svfiprintf_r+0x1f0>
 8006db0:	2203      	movs	r2, #3
 8006db2:	4650      	mov	r0, sl
 8006db4:	7821      	ldrb	r1, [r4, #0]
 8006db6:	f000 f9f7 	bl	80071a8 <memchr>
 8006dba:	b140      	cbz	r0, 8006dce <_svfiprintf_r+0x152>
 8006dbc:	2340      	movs	r3, #64	; 0x40
 8006dbe:	eba0 000a 	sub.w	r0, r0, sl
 8006dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006dc6:	9b04      	ldr	r3, [sp, #16]
 8006dc8:	3401      	adds	r4, #1
 8006dca:	4303      	orrs	r3, r0
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd2:	2206      	movs	r2, #6
 8006dd4:	4826      	ldr	r0, [pc, #152]	; (8006e70 <_svfiprintf_r+0x1f4>)
 8006dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dda:	f000 f9e5 	bl	80071a8 <memchr>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d038      	beq.n	8006e54 <_svfiprintf_r+0x1d8>
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <_svfiprintf_r+0x1f8>)
 8006de4:	bb1b      	cbnz	r3, 8006e2e <_svfiprintf_r+0x1b2>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	3307      	adds	r3, #7
 8006dea:	f023 0307 	bic.w	r3, r3, #7
 8006dee:	3308      	adds	r3, #8
 8006df0:	9303      	str	r3, [sp, #12]
 8006df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df4:	4433      	add	r3, r6
 8006df6:	9309      	str	r3, [sp, #36]	; 0x24
 8006df8:	e767      	b.n	8006cca <_svfiprintf_r+0x4e>
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e02:	e7a5      	b.n	8006d50 <_svfiprintf_r+0xd4>
 8006e04:	2300      	movs	r3, #0
 8006e06:	f04f 0c0a 	mov.w	ip, #10
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	9305      	str	r3, [sp, #20]
 8006e10:	4620      	mov	r0, r4
 8006e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e16:	3a30      	subs	r2, #48	; 0x30
 8006e18:	2a09      	cmp	r2, #9
 8006e1a:	d903      	bls.n	8006e24 <_svfiprintf_r+0x1a8>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0c5      	beq.n	8006dac <_svfiprintf_r+0x130>
 8006e20:	9105      	str	r1, [sp, #20]
 8006e22:	e7c3      	b.n	8006dac <_svfiprintf_r+0x130>
 8006e24:	4604      	mov	r4, r0
 8006e26:	2301      	movs	r3, #1
 8006e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e2c:	e7f0      	b.n	8006e10 <_svfiprintf_r+0x194>
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	462a      	mov	r2, r5
 8006e34:	4638      	mov	r0, r7
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <_svfiprintf_r+0x1fc>)
 8006e38:	a904      	add	r1, sp, #16
 8006e3a:	f3af 8000 	nop.w
 8006e3e:	1c42      	adds	r2, r0, #1
 8006e40:	4606      	mov	r6, r0
 8006e42:	d1d6      	bne.n	8006df2 <_svfiprintf_r+0x176>
 8006e44:	89ab      	ldrh	r3, [r5, #12]
 8006e46:	065b      	lsls	r3, r3, #25
 8006e48:	f53f af2c 	bmi.w	8006ca4 <_svfiprintf_r+0x28>
 8006e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e4e:	b01d      	add	sp, #116	; 0x74
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	ab03      	add	r3, sp, #12
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	462a      	mov	r2, r5
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <_svfiprintf_r+0x1fc>)
 8006e5e:	a904      	add	r1, sp, #16
 8006e60:	f000 f87c 	bl	8006f5c <_printf_i>
 8006e64:	e7eb      	b.n	8006e3e <_svfiprintf_r+0x1c2>
 8006e66:	bf00      	nop
 8006e68:	0800786c 	.word	0x0800786c
 8006e6c:	08007872 	.word	0x08007872
 8006e70:	08007876 	.word	0x08007876
 8006e74:	00000000 	.word	0x00000000
 8006e78:	08006bc5 	.word	0x08006bc5

08006e7c <_printf_common>:
 8006e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e80:	4616      	mov	r6, r2
 8006e82:	4699      	mov	r9, r3
 8006e84:	688a      	ldr	r2, [r1, #8]
 8006e86:	690b      	ldr	r3, [r1, #16]
 8006e88:	4607      	mov	r7, r0
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	bfb8      	it	lt
 8006e8e:	4613      	movlt	r3, r2
 8006e90:	6033      	str	r3, [r6, #0]
 8006e92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e96:	460c      	mov	r4, r1
 8006e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e9c:	b10a      	cbz	r2, 8006ea2 <_printf_common+0x26>
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	0699      	lsls	r1, r3, #26
 8006ea6:	bf42      	ittt	mi
 8006ea8:	6833      	ldrmi	r3, [r6, #0]
 8006eaa:	3302      	addmi	r3, #2
 8006eac:	6033      	strmi	r3, [r6, #0]
 8006eae:	6825      	ldr	r5, [r4, #0]
 8006eb0:	f015 0506 	ands.w	r5, r5, #6
 8006eb4:	d106      	bne.n	8006ec4 <_printf_common+0x48>
 8006eb6:	f104 0a19 	add.w	sl, r4, #25
 8006eba:	68e3      	ldr	r3, [r4, #12]
 8006ebc:	6832      	ldr	r2, [r6, #0]
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	42ab      	cmp	r3, r5
 8006ec2:	dc28      	bgt.n	8006f16 <_printf_common+0x9a>
 8006ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ec8:	1e13      	subs	r3, r2, #0
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	bf18      	it	ne
 8006ece:	2301      	movne	r3, #1
 8006ed0:	0692      	lsls	r2, r2, #26
 8006ed2:	d42d      	bmi.n	8006f30 <_printf_common+0xb4>
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006edc:	47c0      	blx	r8
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d020      	beq.n	8006f24 <_printf_common+0xa8>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	68e5      	ldr	r5, [r4, #12]
 8006ee6:	f003 0306 	and.w	r3, r3, #6
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	bf18      	it	ne
 8006eee:	2500      	movne	r5, #0
 8006ef0:	6832      	ldr	r2, [r6, #0]
 8006ef2:	f04f 0600 	mov.w	r6, #0
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	bf08      	it	eq
 8006efa:	1aad      	subeq	r5, r5, r2
 8006efc:	6922      	ldr	r2, [r4, #16]
 8006efe:	bf08      	it	eq
 8006f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f04:	4293      	cmp	r3, r2
 8006f06:	bfc4      	itt	gt
 8006f08:	1a9b      	subgt	r3, r3, r2
 8006f0a:	18ed      	addgt	r5, r5, r3
 8006f0c:	341a      	adds	r4, #26
 8006f0e:	42b5      	cmp	r5, r6
 8006f10:	d11a      	bne.n	8006f48 <_printf_common+0xcc>
 8006f12:	2000      	movs	r0, #0
 8006f14:	e008      	b.n	8006f28 <_printf_common+0xac>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4652      	mov	r2, sl
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	47c0      	blx	r8
 8006f20:	3001      	adds	r0, #1
 8006f22:	d103      	bne.n	8006f2c <_printf_common+0xb0>
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295
 8006f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2c:	3501      	adds	r5, #1
 8006f2e:	e7c4      	b.n	8006eba <_printf_common+0x3e>
 8006f30:	2030      	movs	r0, #48	; 0x30
 8006f32:	18e1      	adds	r1, r4, r3
 8006f34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f3e:	4422      	add	r2, r4
 8006f40:	3302      	adds	r3, #2
 8006f42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f46:	e7c5      	b.n	8006ed4 <_printf_common+0x58>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c0      	blx	r8
 8006f52:	3001      	adds	r0, #1
 8006f54:	d0e6      	beq.n	8006f24 <_printf_common+0xa8>
 8006f56:	3601      	adds	r6, #1
 8006f58:	e7d9      	b.n	8006f0e <_printf_common+0x92>
	...

08006f5c <_printf_i>:
 8006f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	7e0f      	ldrb	r7, [r1, #24]
 8006f62:	4691      	mov	r9, r2
 8006f64:	2f78      	cmp	r7, #120	; 0x78
 8006f66:	4680      	mov	r8, r0
 8006f68:	460c      	mov	r4, r1
 8006f6a:	469a      	mov	sl, r3
 8006f6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f72:	d807      	bhi.n	8006f84 <_printf_i+0x28>
 8006f74:	2f62      	cmp	r7, #98	; 0x62
 8006f76:	d80a      	bhi.n	8006f8e <_printf_i+0x32>
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	f000 80d9 	beq.w	8007130 <_printf_i+0x1d4>
 8006f7e:	2f58      	cmp	r7, #88	; 0x58
 8006f80:	f000 80a4 	beq.w	80070cc <_printf_i+0x170>
 8006f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f8c:	e03a      	b.n	8007004 <_printf_i+0xa8>
 8006f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f92:	2b15      	cmp	r3, #21
 8006f94:	d8f6      	bhi.n	8006f84 <_printf_i+0x28>
 8006f96:	a101      	add	r1, pc, #4	; (adr r1, 8006f9c <_printf_i+0x40>)
 8006f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f9c:	08006ff5 	.word	0x08006ff5
 8006fa0:	08007009 	.word	0x08007009
 8006fa4:	08006f85 	.word	0x08006f85
 8006fa8:	08006f85 	.word	0x08006f85
 8006fac:	08006f85 	.word	0x08006f85
 8006fb0:	08006f85 	.word	0x08006f85
 8006fb4:	08007009 	.word	0x08007009
 8006fb8:	08006f85 	.word	0x08006f85
 8006fbc:	08006f85 	.word	0x08006f85
 8006fc0:	08006f85 	.word	0x08006f85
 8006fc4:	08006f85 	.word	0x08006f85
 8006fc8:	08007117 	.word	0x08007117
 8006fcc:	08007039 	.word	0x08007039
 8006fd0:	080070f9 	.word	0x080070f9
 8006fd4:	08006f85 	.word	0x08006f85
 8006fd8:	08006f85 	.word	0x08006f85
 8006fdc:	08007139 	.word	0x08007139
 8006fe0:	08006f85 	.word	0x08006f85
 8006fe4:	08007039 	.word	0x08007039
 8006fe8:	08006f85 	.word	0x08006f85
 8006fec:	08006f85 	.word	0x08006f85
 8006ff0:	08007101 	.word	0x08007101
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	1d1a      	adds	r2, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	602a      	str	r2, [r5, #0]
 8006ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007004:	2301      	movs	r3, #1
 8007006:	e0a4      	b.n	8007152 <_printf_i+0x1f6>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	6829      	ldr	r1, [r5, #0]
 800700c:	0606      	lsls	r6, r0, #24
 800700e:	f101 0304 	add.w	r3, r1, #4
 8007012:	d50a      	bpl.n	800702a <_printf_i+0xce>
 8007014:	680e      	ldr	r6, [r1, #0]
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	2e00      	cmp	r6, #0
 800701a:	da03      	bge.n	8007024 <_printf_i+0xc8>
 800701c:	232d      	movs	r3, #45	; 0x2d
 800701e:	4276      	negs	r6, r6
 8007020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007024:	230a      	movs	r3, #10
 8007026:	485e      	ldr	r0, [pc, #376]	; (80071a0 <_printf_i+0x244>)
 8007028:	e019      	b.n	800705e <_printf_i+0x102>
 800702a:	680e      	ldr	r6, [r1, #0]
 800702c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	bf18      	it	ne
 8007034:	b236      	sxthne	r6, r6
 8007036:	e7ef      	b.n	8007018 <_printf_i+0xbc>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	1d19      	adds	r1, r3, #4
 800703e:	6029      	str	r1, [r5, #0]
 8007040:	0601      	lsls	r1, r0, #24
 8007042:	d501      	bpl.n	8007048 <_printf_i+0xec>
 8007044:	681e      	ldr	r6, [r3, #0]
 8007046:	e002      	b.n	800704e <_printf_i+0xf2>
 8007048:	0646      	lsls	r6, r0, #25
 800704a:	d5fb      	bpl.n	8007044 <_printf_i+0xe8>
 800704c:	881e      	ldrh	r6, [r3, #0]
 800704e:	2f6f      	cmp	r7, #111	; 0x6f
 8007050:	bf0c      	ite	eq
 8007052:	2308      	moveq	r3, #8
 8007054:	230a      	movne	r3, #10
 8007056:	4852      	ldr	r0, [pc, #328]	; (80071a0 <_printf_i+0x244>)
 8007058:	2100      	movs	r1, #0
 800705a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800705e:	6865      	ldr	r5, [r4, #4]
 8007060:	2d00      	cmp	r5, #0
 8007062:	bfa8      	it	ge
 8007064:	6821      	ldrge	r1, [r4, #0]
 8007066:	60a5      	str	r5, [r4, #8]
 8007068:	bfa4      	itt	ge
 800706a:	f021 0104 	bicge.w	r1, r1, #4
 800706e:	6021      	strge	r1, [r4, #0]
 8007070:	b90e      	cbnz	r6, 8007076 <_printf_i+0x11a>
 8007072:	2d00      	cmp	r5, #0
 8007074:	d04d      	beq.n	8007112 <_printf_i+0x1b6>
 8007076:	4615      	mov	r5, r2
 8007078:	fbb6 f1f3 	udiv	r1, r6, r3
 800707c:	fb03 6711 	mls	r7, r3, r1, r6
 8007080:	5dc7      	ldrb	r7, [r0, r7]
 8007082:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007086:	4637      	mov	r7, r6
 8007088:	42bb      	cmp	r3, r7
 800708a:	460e      	mov	r6, r1
 800708c:	d9f4      	bls.n	8007078 <_printf_i+0x11c>
 800708e:	2b08      	cmp	r3, #8
 8007090:	d10b      	bne.n	80070aa <_printf_i+0x14e>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	07de      	lsls	r6, r3, #31
 8007096:	d508      	bpl.n	80070aa <_printf_i+0x14e>
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	6861      	ldr	r1, [r4, #4]
 800709c:	4299      	cmp	r1, r3
 800709e:	bfde      	ittt	le
 80070a0:	2330      	movle	r3, #48	; 0x30
 80070a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070aa:	1b52      	subs	r2, r2, r5
 80070ac:	6122      	str	r2, [r4, #16]
 80070ae:	464b      	mov	r3, r9
 80070b0:	4621      	mov	r1, r4
 80070b2:	4640      	mov	r0, r8
 80070b4:	f8cd a000 	str.w	sl, [sp]
 80070b8:	aa03      	add	r2, sp, #12
 80070ba:	f7ff fedf 	bl	8006e7c <_printf_common>
 80070be:	3001      	adds	r0, #1
 80070c0:	d14c      	bne.n	800715c <_printf_i+0x200>
 80070c2:	f04f 30ff 	mov.w	r0, #4294967295
 80070c6:	b004      	add	sp, #16
 80070c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070cc:	4834      	ldr	r0, [pc, #208]	; (80071a0 <_printf_i+0x244>)
 80070ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070d2:	6829      	ldr	r1, [r5, #0]
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80070da:	6029      	str	r1, [r5, #0]
 80070dc:	061d      	lsls	r5, r3, #24
 80070de:	d514      	bpl.n	800710a <_printf_i+0x1ae>
 80070e0:	07df      	lsls	r7, r3, #31
 80070e2:	bf44      	itt	mi
 80070e4:	f043 0320 	orrmi.w	r3, r3, #32
 80070e8:	6023      	strmi	r3, [r4, #0]
 80070ea:	b91e      	cbnz	r6, 80070f4 <_printf_i+0x198>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	f023 0320 	bic.w	r3, r3, #32
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	2310      	movs	r3, #16
 80070f6:	e7af      	b.n	8007058 <_printf_i+0xfc>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	f043 0320 	orr.w	r3, r3, #32
 80070fe:	6023      	str	r3, [r4, #0]
 8007100:	2378      	movs	r3, #120	; 0x78
 8007102:	4828      	ldr	r0, [pc, #160]	; (80071a4 <_printf_i+0x248>)
 8007104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007108:	e7e3      	b.n	80070d2 <_printf_i+0x176>
 800710a:	0659      	lsls	r1, r3, #25
 800710c:	bf48      	it	mi
 800710e:	b2b6      	uxthmi	r6, r6
 8007110:	e7e6      	b.n	80070e0 <_printf_i+0x184>
 8007112:	4615      	mov	r5, r2
 8007114:	e7bb      	b.n	800708e <_printf_i+0x132>
 8007116:	682b      	ldr	r3, [r5, #0]
 8007118:	6826      	ldr	r6, [r4, #0]
 800711a:	1d18      	adds	r0, r3, #4
 800711c:	6961      	ldr	r1, [r4, #20]
 800711e:	6028      	str	r0, [r5, #0]
 8007120:	0635      	lsls	r5, r6, #24
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	d501      	bpl.n	800712a <_printf_i+0x1ce>
 8007126:	6019      	str	r1, [r3, #0]
 8007128:	e002      	b.n	8007130 <_printf_i+0x1d4>
 800712a:	0670      	lsls	r0, r6, #25
 800712c:	d5fb      	bpl.n	8007126 <_printf_i+0x1ca>
 800712e:	8019      	strh	r1, [r3, #0]
 8007130:	2300      	movs	r3, #0
 8007132:	4615      	mov	r5, r2
 8007134:	6123      	str	r3, [r4, #16]
 8007136:	e7ba      	b.n	80070ae <_printf_i+0x152>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	2100      	movs	r1, #0
 800713c:	1d1a      	adds	r2, r3, #4
 800713e:	602a      	str	r2, [r5, #0]
 8007140:	681d      	ldr	r5, [r3, #0]
 8007142:	6862      	ldr	r2, [r4, #4]
 8007144:	4628      	mov	r0, r5
 8007146:	f000 f82f 	bl	80071a8 <memchr>
 800714a:	b108      	cbz	r0, 8007150 <_printf_i+0x1f4>
 800714c:	1b40      	subs	r0, r0, r5
 800714e:	6060      	str	r0, [r4, #4]
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	2300      	movs	r3, #0
 8007156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715a:	e7a8      	b.n	80070ae <_printf_i+0x152>
 800715c:	462a      	mov	r2, r5
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	6923      	ldr	r3, [r4, #16]
 8007164:	47d0      	blx	sl
 8007166:	3001      	adds	r0, #1
 8007168:	d0ab      	beq.n	80070c2 <_printf_i+0x166>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	079b      	lsls	r3, r3, #30
 800716e:	d413      	bmi.n	8007198 <_printf_i+0x23c>
 8007170:	68e0      	ldr	r0, [r4, #12]
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	4298      	cmp	r0, r3
 8007176:	bfb8      	it	lt
 8007178:	4618      	movlt	r0, r3
 800717a:	e7a4      	b.n	80070c6 <_printf_i+0x16a>
 800717c:	2301      	movs	r3, #1
 800717e:	4632      	mov	r2, r6
 8007180:	4649      	mov	r1, r9
 8007182:	4640      	mov	r0, r8
 8007184:	47d0      	blx	sl
 8007186:	3001      	adds	r0, #1
 8007188:	d09b      	beq.n	80070c2 <_printf_i+0x166>
 800718a:	3501      	adds	r5, #1
 800718c:	68e3      	ldr	r3, [r4, #12]
 800718e:	9903      	ldr	r1, [sp, #12]
 8007190:	1a5b      	subs	r3, r3, r1
 8007192:	42ab      	cmp	r3, r5
 8007194:	dcf2      	bgt.n	800717c <_printf_i+0x220>
 8007196:	e7eb      	b.n	8007170 <_printf_i+0x214>
 8007198:	2500      	movs	r5, #0
 800719a:	f104 0619 	add.w	r6, r4, #25
 800719e:	e7f5      	b.n	800718c <_printf_i+0x230>
 80071a0:	0800787d 	.word	0x0800787d
 80071a4:	0800788e 	.word	0x0800788e

080071a8 <memchr>:
 80071a8:	4603      	mov	r3, r0
 80071aa:	b510      	push	{r4, lr}
 80071ac:	b2c9      	uxtb	r1, r1
 80071ae:	4402      	add	r2, r0
 80071b0:	4293      	cmp	r3, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	d101      	bne.n	80071ba <memchr+0x12>
 80071b6:	2000      	movs	r0, #0
 80071b8:	e003      	b.n	80071c2 <memchr+0x1a>
 80071ba:	7804      	ldrb	r4, [r0, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	428c      	cmp	r4, r1
 80071c0:	d1f6      	bne.n	80071b0 <memchr+0x8>
 80071c2:	bd10      	pop	{r4, pc}

080071c4 <memmove>:
 80071c4:	4288      	cmp	r0, r1
 80071c6:	b510      	push	{r4, lr}
 80071c8:	eb01 0402 	add.w	r4, r1, r2
 80071cc:	d902      	bls.n	80071d4 <memmove+0x10>
 80071ce:	4284      	cmp	r4, r0
 80071d0:	4623      	mov	r3, r4
 80071d2:	d807      	bhi.n	80071e4 <memmove+0x20>
 80071d4:	1e43      	subs	r3, r0, #1
 80071d6:	42a1      	cmp	r1, r4
 80071d8:	d008      	beq.n	80071ec <memmove+0x28>
 80071da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071e2:	e7f8      	b.n	80071d6 <memmove+0x12>
 80071e4:	4601      	mov	r1, r0
 80071e6:	4402      	add	r2, r0
 80071e8:	428a      	cmp	r2, r1
 80071ea:	d100      	bne.n	80071ee <memmove+0x2a>
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071f6:	e7f7      	b.n	80071e8 <memmove+0x24>

080071f8 <_free_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4605      	mov	r5, r0
 80071fc:	2900      	cmp	r1, #0
 80071fe:	d040      	beq.n	8007282 <_free_r+0x8a>
 8007200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007204:	1f0c      	subs	r4, r1, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	bfb8      	it	lt
 800720a:	18e4      	addlt	r4, r4, r3
 800720c:	f000 f910 	bl	8007430 <__malloc_lock>
 8007210:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <_free_r+0x8c>)
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	b933      	cbnz	r3, 8007224 <_free_r+0x2c>
 8007216:	6063      	str	r3, [r4, #4]
 8007218:	6014      	str	r4, [r2, #0]
 800721a:	4628      	mov	r0, r5
 800721c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007220:	f000 b90c 	b.w	800743c <__malloc_unlock>
 8007224:	42a3      	cmp	r3, r4
 8007226:	d908      	bls.n	800723a <_free_r+0x42>
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	1821      	adds	r1, r4, r0
 800722c:	428b      	cmp	r3, r1
 800722e:	bf01      	itttt	eq
 8007230:	6819      	ldreq	r1, [r3, #0]
 8007232:	685b      	ldreq	r3, [r3, #4]
 8007234:	1809      	addeq	r1, r1, r0
 8007236:	6021      	streq	r1, [r4, #0]
 8007238:	e7ed      	b.n	8007216 <_free_r+0x1e>
 800723a:	461a      	mov	r2, r3
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b10b      	cbz	r3, 8007244 <_free_r+0x4c>
 8007240:	42a3      	cmp	r3, r4
 8007242:	d9fa      	bls.n	800723a <_free_r+0x42>
 8007244:	6811      	ldr	r1, [r2, #0]
 8007246:	1850      	adds	r0, r2, r1
 8007248:	42a0      	cmp	r0, r4
 800724a:	d10b      	bne.n	8007264 <_free_r+0x6c>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	4401      	add	r1, r0
 8007250:	1850      	adds	r0, r2, r1
 8007252:	4283      	cmp	r3, r0
 8007254:	6011      	str	r1, [r2, #0]
 8007256:	d1e0      	bne.n	800721a <_free_r+0x22>
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	4401      	add	r1, r0
 800725e:	6011      	str	r1, [r2, #0]
 8007260:	6053      	str	r3, [r2, #4]
 8007262:	e7da      	b.n	800721a <_free_r+0x22>
 8007264:	d902      	bls.n	800726c <_free_r+0x74>
 8007266:	230c      	movs	r3, #12
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	e7d6      	b.n	800721a <_free_r+0x22>
 800726c:	6820      	ldr	r0, [r4, #0]
 800726e:	1821      	adds	r1, r4, r0
 8007270:	428b      	cmp	r3, r1
 8007272:	bf01      	itttt	eq
 8007274:	6819      	ldreq	r1, [r3, #0]
 8007276:	685b      	ldreq	r3, [r3, #4]
 8007278:	1809      	addeq	r1, r1, r0
 800727a:	6021      	streq	r1, [r4, #0]
 800727c:	6063      	str	r3, [r4, #4]
 800727e:	6054      	str	r4, [r2, #4]
 8007280:	e7cb      	b.n	800721a <_free_r+0x22>
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	2000067c 	.word	0x2000067c

08007288 <sbrk_aligned>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4e0e      	ldr	r6, [pc, #56]	; (80072c4 <sbrk_aligned+0x3c>)
 800728c:	460c      	mov	r4, r1
 800728e:	6831      	ldr	r1, [r6, #0]
 8007290:	4605      	mov	r5, r0
 8007292:	b911      	cbnz	r1, 800729a <sbrk_aligned+0x12>
 8007294:	f000 f8bc 	bl	8007410 <_sbrk_r>
 8007298:	6030      	str	r0, [r6, #0]
 800729a:	4621      	mov	r1, r4
 800729c:	4628      	mov	r0, r5
 800729e:	f000 f8b7 	bl	8007410 <_sbrk_r>
 80072a2:	1c43      	adds	r3, r0, #1
 80072a4:	d00a      	beq.n	80072bc <sbrk_aligned+0x34>
 80072a6:	1cc4      	adds	r4, r0, #3
 80072a8:	f024 0403 	bic.w	r4, r4, #3
 80072ac:	42a0      	cmp	r0, r4
 80072ae:	d007      	beq.n	80072c0 <sbrk_aligned+0x38>
 80072b0:	1a21      	subs	r1, r4, r0
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 f8ac 	bl	8007410 <_sbrk_r>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d101      	bne.n	80072c0 <sbrk_aligned+0x38>
 80072bc:	f04f 34ff 	mov.w	r4, #4294967295
 80072c0:	4620      	mov	r0, r4
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	20000680 	.word	0x20000680

080072c8 <_malloc_r>:
 80072c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072cc:	1ccd      	adds	r5, r1, #3
 80072ce:	f025 0503 	bic.w	r5, r5, #3
 80072d2:	3508      	adds	r5, #8
 80072d4:	2d0c      	cmp	r5, #12
 80072d6:	bf38      	it	cc
 80072d8:	250c      	movcc	r5, #12
 80072da:	2d00      	cmp	r5, #0
 80072dc:	4607      	mov	r7, r0
 80072de:	db01      	blt.n	80072e4 <_malloc_r+0x1c>
 80072e0:	42a9      	cmp	r1, r5
 80072e2:	d905      	bls.n	80072f0 <_malloc_r+0x28>
 80072e4:	230c      	movs	r3, #12
 80072e6:	2600      	movs	r6, #0
 80072e8:	603b      	str	r3, [r7, #0]
 80072ea:	4630      	mov	r0, r6
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	4e2e      	ldr	r6, [pc, #184]	; (80073ac <_malloc_r+0xe4>)
 80072f2:	f000 f89d 	bl	8007430 <__malloc_lock>
 80072f6:	6833      	ldr	r3, [r6, #0]
 80072f8:	461c      	mov	r4, r3
 80072fa:	bb34      	cbnz	r4, 800734a <_malloc_r+0x82>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4638      	mov	r0, r7
 8007300:	f7ff ffc2 	bl	8007288 <sbrk_aligned>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	4604      	mov	r4, r0
 8007308:	d14d      	bne.n	80073a6 <_malloc_r+0xde>
 800730a:	6834      	ldr	r4, [r6, #0]
 800730c:	4626      	mov	r6, r4
 800730e:	2e00      	cmp	r6, #0
 8007310:	d140      	bne.n	8007394 <_malloc_r+0xcc>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	4631      	mov	r1, r6
 8007316:	4638      	mov	r0, r7
 8007318:	eb04 0803 	add.w	r8, r4, r3
 800731c:	f000 f878 	bl	8007410 <_sbrk_r>
 8007320:	4580      	cmp	r8, r0
 8007322:	d13a      	bne.n	800739a <_malloc_r+0xd2>
 8007324:	6821      	ldr	r1, [r4, #0]
 8007326:	3503      	adds	r5, #3
 8007328:	1a6d      	subs	r5, r5, r1
 800732a:	f025 0503 	bic.w	r5, r5, #3
 800732e:	3508      	adds	r5, #8
 8007330:	2d0c      	cmp	r5, #12
 8007332:	bf38      	it	cc
 8007334:	250c      	movcc	r5, #12
 8007336:	4638      	mov	r0, r7
 8007338:	4629      	mov	r1, r5
 800733a:	f7ff ffa5 	bl	8007288 <sbrk_aligned>
 800733e:	3001      	adds	r0, #1
 8007340:	d02b      	beq.n	800739a <_malloc_r+0xd2>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	442b      	add	r3, r5
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	e00e      	b.n	8007368 <_malloc_r+0xa0>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	1b52      	subs	r2, r2, r5
 800734e:	d41e      	bmi.n	800738e <_malloc_r+0xc6>
 8007350:	2a0b      	cmp	r2, #11
 8007352:	d916      	bls.n	8007382 <_malloc_r+0xba>
 8007354:	1961      	adds	r1, r4, r5
 8007356:	42a3      	cmp	r3, r4
 8007358:	6025      	str	r5, [r4, #0]
 800735a:	bf18      	it	ne
 800735c:	6059      	strne	r1, [r3, #4]
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	bf08      	it	eq
 8007362:	6031      	streq	r1, [r6, #0]
 8007364:	5162      	str	r2, [r4, r5]
 8007366:	604b      	str	r3, [r1, #4]
 8007368:	4638      	mov	r0, r7
 800736a:	f104 060b 	add.w	r6, r4, #11
 800736e:	f000 f865 	bl	800743c <__malloc_unlock>
 8007372:	f026 0607 	bic.w	r6, r6, #7
 8007376:	1d23      	adds	r3, r4, #4
 8007378:	1af2      	subs	r2, r6, r3
 800737a:	d0b6      	beq.n	80072ea <_malloc_r+0x22>
 800737c:	1b9b      	subs	r3, r3, r6
 800737e:	50a3      	str	r3, [r4, r2]
 8007380:	e7b3      	b.n	80072ea <_malloc_r+0x22>
 8007382:	6862      	ldr	r2, [r4, #4]
 8007384:	42a3      	cmp	r3, r4
 8007386:	bf0c      	ite	eq
 8007388:	6032      	streq	r2, [r6, #0]
 800738a:	605a      	strne	r2, [r3, #4]
 800738c:	e7ec      	b.n	8007368 <_malloc_r+0xa0>
 800738e:	4623      	mov	r3, r4
 8007390:	6864      	ldr	r4, [r4, #4]
 8007392:	e7b2      	b.n	80072fa <_malloc_r+0x32>
 8007394:	4634      	mov	r4, r6
 8007396:	6876      	ldr	r6, [r6, #4]
 8007398:	e7b9      	b.n	800730e <_malloc_r+0x46>
 800739a:	230c      	movs	r3, #12
 800739c:	4638      	mov	r0, r7
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	f000 f84c 	bl	800743c <__malloc_unlock>
 80073a4:	e7a1      	b.n	80072ea <_malloc_r+0x22>
 80073a6:	6025      	str	r5, [r4, #0]
 80073a8:	e7de      	b.n	8007368 <_malloc_r+0xa0>
 80073aa:	bf00      	nop
 80073ac:	2000067c 	.word	0x2000067c

080073b0 <_realloc_r>:
 80073b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	4680      	mov	r8, r0
 80073b6:	4614      	mov	r4, r2
 80073b8:	460e      	mov	r6, r1
 80073ba:	b921      	cbnz	r1, 80073c6 <_realloc_r+0x16>
 80073bc:	4611      	mov	r1, r2
 80073be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	f7ff bf81 	b.w	80072c8 <_malloc_r>
 80073c6:	b92a      	cbnz	r2, 80073d4 <_realloc_r+0x24>
 80073c8:	f7ff ff16 	bl	80071f8 <_free_r>
 80073cc:	4625      	mov	r5, r4
 80073ce:	4628      	mov	r0, r5
 80073d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d4:	f000 f838 	bl	8007448 <_malloc_usable_size_r>
 80073d8:	4284      	cmp	r4, r0
 80073da:	4607      	mov	r7, r0
 80073dc:	d802      	bhi.n	80073e4 <_realloc_r+0x34>
 80073de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073e2:	d812      	bhi.n	800740a <_realloc_r+0x5a>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4640      	mov	r0, r8
 80073e8:	f7ff ff6e 	bl	80072c8 <_malloc_r>
 80073ec:	4605      	mov	r5, r0
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d0ed      	beq.n	80073ce <_realloc_r+0x1e>
 80073f2:	42bc      	cmp	r4, r7
 80073f4:	4622      	mov	r2, r4
 80073f6:	4631      	mov	r1, r6
 80073f8:	bf28      	it	cs
 80073fa:	463a      	movcs	r2, r7
 80073fc:	f7ff fbac 	bl	8006b58 <memcpy>
 8007400:	4631      	mov	r1, r6
 8007402:	4640      	mov	r0, r8
 8007404:	f7ff fef8 	bl	80071f8 <_free_r>
 8007408:	e7e1      	b.n	80073ce <_realloc_r+0x1e>
 800740a:	4635      	mov	r5, r6
 800740c:	e7df      	b.n	80073ce <_realloc_r+0x1e>
	...

08007410 <_sbrk_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	2300      	movs	r3, #0
 8007414:	4d05      	ldr	r5, [pc, #20]	; (800742c <_sbrk_r+0x1c>)
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fa fa96 	bl	800194c <_sbrk>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_sbrk_r+0x1a>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_sbrk_r+0x1a>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20000684 	.word	0x20000684

08007430 <__malloc_lock>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__malloc_lock+0x8>)
 8007432:	f000 b811 	b.w	8007458 <__retarget_lock_acquire_recursive>
 8007436:	bf00      	nop
 8007438:	20000688 	.word	0x20000688

0800743c <__malloc_unlock>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__malloc_unlock+0x8>)
 800743e:	f000 b80c 	b.w	800745a <__retarget_lock_release_recursive>
 8007442:	bf00      	nop
 8007444:	20000688 	.word	0x20000688

08007448 <_malloc_usable_size_r>:
 8007448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800744c:	1f18      	subs	r0, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	bfbc      	itt	lt
 8007452:	580b      	ldrlt	r3, [r1, r0]
 8007454:	18c0      	addlt	r0, r0, r3
 8007456:	4770      	bx	lr

08007458 <__retarget_lock_acquire_recursive>:
 8007458:	4770      	bx	lr

0800745a <__retarget_lock_release_recursive>:
 800745a:	4770      	bx	lr

0800745c <_init>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr

08007468 <_fini>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr
