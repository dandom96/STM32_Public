
I2C_Temp_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  080099a0  080099a0  000199a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eac  08009eac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eb4  08009eb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eb4  08009eb4  00019eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb8  08009eb8  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e0  0800a09c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800a09c  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153a5  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e7  00000000  00000000  000355b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00037ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00038ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ad5  00000000  00000000  00039c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014507  00000000  00000000  0005d735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4bf6  00000000  00000000  00071c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005600  00000000  00000000  00146888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009984 	.word	0x08009984

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009984 	.word	0x08009984

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Connection Test Function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart2, sw, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4973      	ldr	r1, [pc, #460]	; (80010b8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000eec:	4873      	ldr	r0, [pc, #460]	; (80010bc <HAL_UART_RxCpltCallback+0x1dc>)
 8000eee:	f005 f8d0 	bl	8006092 <HAL_UART_Receive_IT>
	  if(sw[0]=='1')
 8000ef2:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b31      	cmp	r3, #49	; 0x31
 8000ef8:	d13f      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x9a>
	  		  {
	  	  	  		  //Temperature and Humidity Receive
	  	  	  		  buf[0] = (uint8_t)(READ_TEMP_REG >> 8);
 8000efa:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000efc:	22e0      	movs	r2, #224	; 0xe0
 8000efe:	701a      	strb	r2, [r3, #0]
	  	  	  		  buf[1] = (uint8_t)READ_TEMP_REG;
 8000f00:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	705a      	strb	r2, [r3, #1]
	  	  	  		  ret = HAL_I2C_Master_Transmit(&hi2c1, SHT_ADDR, buf, 2, 100);
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	4a6c      	ldr	r2, [pc, #432]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f0e:	2188      	movs	r1, #136	; 0x88
 8000f10:	486c      	ldr	r0, [pc, #432]	; (80010c4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000f12:	f001 fad1 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b6b      	ldr	r3, [pc, #428]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000f1c:	701a      	strb	r2, [r3, #0]
	  	  	  		  if (ret != HAL_OK)
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_UART_RxCpltCallback+0x4e>
	  	  	  		  {
			  			  printf("Sensor connection ERROR\r\n\n");
 8000f26:	4869      	ldr	r0, [pc, #420]	; (80010cc <HAL_UART_RxCpltCallback+0x1ec>)
 8000f28:	f006 fcbe 	bl	80078a8 <puts>
 8000f2c:	e025      	b.n	8000f7a <HAL_UART_RxCpltCallback+0x9a>
	  	  	  		  }
	  	  	  		  else
	  	  	  		  {
	  	  	  			  HAL_I2C_Master_Receive(&hi2c1, SHT_ADDR, buf, 6, 100);
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2306      	movs	r3, #6
 8000f34:	4a62      	ldr	r2, [pc, #392]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f36:	2188      	movs	r1, #136	; 0x88
 8000f38:	4862      	ldr	r0, [pc, #392]	; (80010c4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000f3a:	f001 fbbb 	bl	80026b4 <HAL_I2C_Master_Receive>

	  	  	  			  hum = humidity(buf);
 8000f3e:	4860      	ldr	r0, [pc, #384]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f40:	f000 fd30 	bl	80019a4 <humidity>
 8000f44:	eef0 7a40 	vmov.f32	s15, s0
 8000f48:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]

	  	  	  			  printf("Humidity is %.2f %%\r\n", hum);
 8000f4e:	4b60      	ldr	r3, [pc, #384]	; (80010d0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fb18 	bl	8000588 <__aeabi_f2d>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	485d      	ldr	r0, [pc, #372]	; (80010d4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000f5e:	f006 fc1d 	bl	800779c <iprintf>
	  	  	  			  printf("Enter 1 to get humidity data\r\n");
 8000f62:	485d      	ldr	r0, [pc, #372]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000f64:	f006 fca0 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 2 to get temperature data\r\n");
 8000f68:	485c      	ldr	r0, [pc, #368]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000f6a:	f006 fc9d 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 3 to Enable Heater\r\n");
 8000f6e:	485c      	ldr	r0, [pc, #368]	; (80010e0 <HAL_UART_RxCpltCallback+0x200>)
 8000f70:	f006 fc9a 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 4 to Disable Heater\r\n\n");
 8000f74:	485b      	ldr	r0, [pc, #364]	; (80010e4 <HAL_UART_RxCpltCallback+0x204>)
 8000f76:	f006 fc97 	bl	80078a8 <puts>
	  	  	  		  }
	  		  }

	  if(sw[0]=='2')
 8000f7a:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b32      	cmp	r3, #50	; 0x32
 8000f80:	d13f      	bne.n	8001002 <HAL_UART_RxCpltCallback+0x122>
	  		  {
	  	  	  		  //Temperature and Humidity Receive
	  	  	  		  buf[0] = (uint8_t)(READ_TEMP_REG >> 8);
 8000f82:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f84:	22e0      	movs	r2, #224	; 0xe0
 8000f86:	701a      	strb	r2, [r3, #0]
	  	  	  		  buf[1] = (uint8_t)READ_TEMP_REG;
 8000f88:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	705a      	strb	r2, [r3, #1]
	  	  	  		  ret = HAL_I2C_Master_Transmit(&hi2c1, SHT_ADDR, buf, 2, 100);
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000f96:	2188      	movs	r1, #136	; 0x88
 8000f98:	484a      	ldr	r0, [pc, #296]	; (80010c4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000f9a:	f001 fa8d 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	  	  	  		  if (ret != HAL_OK)
 8000fa6:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_UART_RxCpltCallback+0xd6>
	  	  	  		  {
			  			  printf("Sensor connection ERROR\r\n\n");
 8000fae:	4847      	ldr	r0, [pc, #284]	; (80010cc <HAL_UART_RxCpltCallback+0x1ec>)
 8000fb0:	f006 fc7a 	bl	80078a8 <puts>
 8000fb4:	e025      	b.n	8001002 <HAL_UART_RxCpltCallback+0x122>
	  	  	  		  }
	  	  	  		  else
	  	  	  		  {
	  	  	  			  HAL_I2C_Master_Receive(&hi2c1, SHT_ADDR, buf, 6, 100);
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2306      	movs	r3, #6
 8000fbc:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000fbe:	2188      	movs	r1, #136	; 0x88
 8000fc0:	4840      	ldr	r0, [pc, #256]	; (80010c4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000fc2:	f001 fb77 	bl	80026b4 <HAL_I2C_Master_Receive>

	  	  	  			  temp = temperature(buf);
 8000fc6:	483e      	ldr	r0, [pc, #248]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000fc8:	f000 fcb6 	bl	8001938 <temperature>
 8000fcc:	eef0 7a40 	vmov.f32	s15, s0
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_UART_RxCpltCallback+0x208>)
 8000fd2:	edc3 7a00 	vstr	s15, [r3]

	  	  	  			  printf("Temperature is %.2f C\r\n", temp);
 8000fd6:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <HAL_UART_RxCpltCallback+0x208>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fad4 	bl	8000588 <__aeabi_f2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4841      	ldr	r0, [pc, #260]	; (80010ec <HAL_UART_RxCpltCallback+0x20c>)
 8000fe6:	f006 fbd9 	bl	800779c <iprintf>
	  	  	  			  printf("Enter 1 to get humidity data\r\n");
 8000fea:	483b      	ldr	r0, [pc, #236]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000fec:	f006 fc5c 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 2 to get temperature data\r\n");
 8000ff0:	483a      	ldr	r0, [pc, #232]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 8000ff2:	f006 fc59 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 3 to Enable Heater\r\n");
 8000ff6:	483a      	ldr	r0, [pc, #232]	; (80010e0 <HAL_UART_RxCpltCallback+0x200>)
 8000ff8:	f006 fc56 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 4 to Disable Heater\r\n\n");
 8000ffc:	4839      	ldr	r0, [pc, #228]	; (80010e4 <HAL_UART_RxCpltCallback+0x204>)
 8000ffe:	f006 fc53 	bl	80078a8 <puts>
	  	  	  		  }
	  		  }
	  if(sw[0]=='3')
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_UART_RxCpltCallback+0x1d8>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b33      	cmp	r3, #51	; 0x33
 8001008:	d125      	bne.n	8001056 <HAL_UART_RxCpltCallback+0x176>
	  		  {
	  	  	  		  //Heater Enable
	  	  	  		  buf[0] = (uint8_t)(HEATER_EN_REG >> 8);
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 800100c:	2230      	movs	r2, #48	; 0x30
 800100e:	701a      	strb	r2, [r3, #0]
	  	  	  		  buf[1] = (uint8_t)HEATER_EN_REG;
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8001012:	226d      	movs	r2, #109	; 0x6d
 8001014:	705a      	strb	r2, [r3, #1]
	  	  	  		  ret = HAL_I2C_Master_Transmit(&hi2c1, SHT_ADDR, buf, 2, 100);
 8001016:	2364      	movs	r3, #100	; 0x64
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2302      	movs	r3, #2
 800101c:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 800101e:	2188      	movs	r1, #136	; 0x88
 8001020:	4828      	ldr	r0, [pc, #160]	; (80010c4 <HAL_UART_RxCpltCallback+0x1e4>)
 8001022:	f001 fa49 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 800102c:	701a      	strb	r2, [r3, #0]
	  	  	  		  if (ret != HAL_OK)
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_UART_RxCpltCallback+0x15e>
	  	  	  		  {
			  			  printf("Sensor connection ERROR\r\n\n");
 8001036:	4825      	ldr	r0, [pc, #148]	; (80010cc <HAL_UART_RxCpltCallback+0x1ec>)
 8001038:	f006 fc36 	bl	80078a8 <puts>
 800103c:	e00b      	b.n	8001056 <HAL_UART_RxCpltCallback+0x176>
	  	  	  		  }
	  	  	  		  else
	  	  	  		  {
	  	  	  			  printf("The Heater is Enabled\r\n");
 800103e:	482c      	ldr	r0, [pc, #176]	; (80010f0 <HAL_UART_RxCpltCallback+0x210>)
 8001040:	f006 fc32 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 1 to get humidity data\r\n");
 8001044:	4824      	ldr	r0, [pc, #144]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 8001046:	f006 fc2f 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 2 to get temperature data\r\n");
 800104a:	4824      	ldr	r0, [pc, #144]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 800104c:	f006 fc2c 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 4 to Disable Heater\r\n\n");
 8001050:	4824      	ldr	r0, [pc, #144]	; (80010e4 <HAL_UART_RxCpltCallback+0x204>)
 8001052:	f006 fc29 	bl	80078a8 <puts>
	  	  	  		  }
	  		  }
	  if(sw[0]=='4')
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_UART_RxCpltCallback+0x1d8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b34      	cmp	r3, #52	; 0x34
 800105c:	d126      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x1cc>
	  		  {
	  	  	  		  //Heater Enable
	  	  	  		  buf[0] = (uint8_t)(HEATER_DIS_REG >> 8);
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8001060:	2230      	movs	r2, #48	; 0x30
 8001062:	701a      	strb	r2, [r3, #0]
	  	  	  		  buf[1] = (uint8_t)HEATER_DIS_REG;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8001066:	2266      	movs	r2, #102	; 0x66
 8001068:	705a      	strb	r2, [r3, #1]
	  	  	  		  ret = HAL_I2C_Master_Transmit(&hi2c1, SHT_ADDR, buf, 2, 100);
 800106a:	2364      	movs	r3, #100	; 0x64
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2302      	movs	r3, #2
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <HAL_UART_RxCpltCallback+0x1e0>)
 8001072:	2188      	movs	r1, #136	; 0x88
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <HAL_UART_RxCpltCallback+0x1e4>)
 8001076:	f001 fa1f 	bl	80024b8 <HAL_I2C_Master_Transmit>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 8001080:	701a      	strb	r2, [r3, #0]
	  	  	  		  if (ret != HAL_OK)
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_UART_RxCpltCallback+0x1e8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_UART_RxCpltCallback+0x1b2>
	  	  	  		  {
			  			  printf("Sensor connection ERROR\r\n\n");
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <HAL_UART_RxCpltCallback+0x1ec>)
 800108c:	f006 fc0c 	bl	80078a8 <puts>
	  		  }
		  else
		  {
		    __NOP();
		  }
}
 8001090:	e00d      	b.n	80010ae <HAL_UART_RxCpltCallback+0x1ce>
	  	  	  			  printf("The Heater is Disabled\r\n");
 8001092:	4818      	ldr	r0, [pc, #96]	; (80010f4 <HAL_UART_RxCpltCallback+0x214>)
 8001094:	f006 fc08 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 1 to get humidity data\r\n");
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <HAL_UART_RxCpltCallback+0x1f8>)
 800109a:	f006 fc05 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 2 to get temperature data\r\n");
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <HAL_UART_RxCpltCallback+0x1fc>)
 80010a0:	f006 fc02 	bl	80078a8 <puts>
	  	  	  			  printf("Enter 3 to Enable Heater\r\n\n");
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <HAL_UART_RxCpltCallback+0x218>)
 80010a6:	f006 fbff 	bl	80078a8 <puts>
}
 80010aa:	e000      	b.n	80010ae <HAL_UART_RxCpltCallback+0x1ce>
		    __NOP();
 80010ac:	bf00      	nop
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000
 80010bc:	200002b4 	.word	0x200002b4
 80010c0:	20000264 	.word	0x20000264
 80010c4:	2000020c 	.word	0x2000020c
 80010c8:	200002f8 	.word	0x200002f8
 80010cc:	080099a0 	.word	0x080099a0
 80010d0:	20000208 	.word	0x20000208
 80010d4:	080099bc 	.word	0x080099bc
 80010d8:	080099d4 	.word	0x080099d4
 80010dc:	080099f4 	.word	0x080099f4
 80010e0:	08009a18 	.word	0x08009a18
 80010e4:	08009a34 	.word	0x08009a34
 80010e8:	20000260 	.word	0x20000260
 80010ec:	08009a50 	.word	0x08009a50
 80010f0:	08009a68 	.word	0x08009a68
 80010f4:	08009a80 	.word	0x08009a80
 80010f8:	08009a98 	.word	0x08009a98

080010fc <_write>:

//Function for printf
int _write(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	b29a      	uxth	r2, r3
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <_write+0x24>)
 8001112:	f004 ff2c 	bl	8005f6e <HAL_UART_Transmit>
	return len;
 8001116:	687b      	ldr	r3, [r7, #4]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200002b4 	.word	0x200002b4

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 fc95 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f863 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 f975 	bl	8001420 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001136:	f000 f949 	bl	80013cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800113a:	f000 f8cb 	bl	80012d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800113e:	f000 f8f7 	bl	8001330 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 //TIM2 Start
  HAL_TIM_Base_Start_IT(&htim2);
 8001142:	4822      	ldr	r0, [pc, #136]	; (80011cc <main+0xa8>)
 8001144:	f004 fa94 	bl	8005670 <HAL_TIM_Base_Start_IT>

  //Get Status;
  buf[0] = (uint8_t)(SHT_STAT_REG >> 8);
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <main+0xac>)
 800114a:	22f3      	movs	r2, #243	; 0xf3
 800114c:	701a      	strb	r2, [r3, #0]
  buf[1] = (uint8_t)SHT_STAT_REG;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <main+0xac>)
 8001150:	222d      	movs	r2, #45	; 0x2d
 8001152:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SHT_ADDR, buf, 2, 100);
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2302      	movs	r3, #2
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <main+0xac>)
 800115c:	2188      	movs	r1, #136	; 0x88
 800115e:	481d      	ldr	r0, [pc, #116]	; (80011d4 <main+0xb0>)
 8001160:	f001 f9aa 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <main+0xb4>)
 800116a:	701a      	strb	r2, [r3, #0]
  if (ret != HAL_OK)
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <main+0xb4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <main+0x58>
  {
	  printf("Sensor connection ERROR\r\n\n");
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <main+0xb8>)
 8001176:	f006 fb97 	bl	80078a8 <puts>
 800117a:	e026      	b.n	80011ca <main+0xa6>
  }
  else
  {
	  HAL_I2C_Master_Receive(&hi2c1, SHT_ADDR, buf, 3, 100);
 800117c:	2364      	movs	r3, #100	; 0x64
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2303      	movs	r3, #3
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <main+0xac>)
 8001184:	2188      	movs	r1, #136	; 0x88
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <main+0xb0>)
 8001188:	f001 fa94 	bl	80026b4 <HAL_I2C_Master_Receive>
	  //Err = con_test();

  //Start Measurement command
	  buf[0] = (uint8_t)(MES_CMD_REG >> 8);
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <main+0xac>)
 800118e:	2221      	movs	r2, #33	; 0x21
 8001190:	701a      	strb	r2, [r3, #0]
	  buf[1] = (uint8_t)MES_CMD_REG;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <main+0xac>)
 8001194:	2230      	movs	r2, #48	; 0x30
 8001196:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit(&hi2c1, SHT_ADDR, buf, 2, 100);
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2302      	movs	r3, #2
 800119e:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <main+0xac>)
 80011a0:	2188      	movs	r1, #136	; 0x88
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <main+0xb0>)
 80011a4:	f001 f988 	bl	80024b8 <HAL_I2C_Master_Transmit>

	  printf("Enter 1 to get humidity data\r\n");
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <main+0xbc>)
 80011aa:	f006 fb7d 	bl	80078a8 <puts>
	  printf("Enter 2 to get temperature data\r\n");
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <main+0xc0>)
 80011b0:	f006 fb7a 	bl	80078a8 <puts>
	  printf("Enter 3 to Enable Heater\r\n");
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <main+0xc4>)
 80011b6:	f006 fb77 	bl	80078a8 <puts>
	  printf("Enter 4 to Disable Heater\r\n\n");
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <main+0xc8>)
 80011bc:	f006 fb74 	bl	80078a8 <puts>

	  //Uart Receive command
	  HAL_UART_Receive_IT(&huart2, sw, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	490b      	ldr	r1, [pc, #44]	; (80011f0 <main+0xcc>)
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <main+0xd0>)
 80011c6:	f004 ff64 	bl	8006092 <HAL_UART_Receive_IT>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <main+0xa6>
 80011cc:	2000026c 	.word	0x2000026c
 80011d0:	20000264 	.word	0x20000264
 80011d4:	2000020c 	.word	0x2000020c
 80011d8:	200002f8 	.word	0x200002f8
 80011dc:	080099a0 	.word	0x080099a0
 80011e0:	080099d4 	.word	0x080099d4
 80011e4:	080099f4 	.word	0x080099f4
 80011e8:	08009a18 	.word	0x08009a18
 80011ec:	08009a34 	.word	0x08009a34
 80011f0:	20000000 	.word	0x20000000
 80011f4:	200002b4 	.word	0x200002b4

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2234      	movs	r2, #52	; 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fe56 	bl	8006eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <SystemClock_Config+0xd4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a29      	ldr	r2, [pc, #164]	; (80012cc <SystemClock_Config+0xd4>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <SystemClock_Config+0xd4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <SystemClock_Config+0xd8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001244:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <SystemClock_Config+0xd8>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <SystemClock_Config+0xd8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800126c:	2310      	movs	r3, #16
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001270:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001276:	2304      	movs	r3, #4
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800127a:	2302      	movs	r3, #2
 800127c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4618      	mov	r0, r3
 8001288:	f003 ff04 	bl	8005094 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001292:	f000 f947 	bl	8001524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2102      	movs	r1, #2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fc22 	bl	8004afc <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012be:	f000 f931 	bl	8001524 <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3750      	adds	r7, #80	; 0x50
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C1_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_I2C1_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_I2C1_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_I2C1_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_I2C1_Init+0x50>)
 8001312:	f000 ff8d 	bl	8002230 <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 f902 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000020c 	.word	0x2000020c
 8001328:	40005400 	.word	0x40005400
 800132c:	000186a0 	.word	0x000186a0

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_TIM2_Init+0x94>)
 800134e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001356:	2253      	movs	r2, #83	; 0x53
 8001358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249999;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <MX_TIM2_Init+0x98>)
 8001364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM2_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001374:	f004 f92c 	bl	80055d0 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800137e:	f000 f8d1 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4619      	mov	r1, r3
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001390:	f004 fae6 	bl	8005960 <HAL_TIM_ConfigClockSource>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800139a:	f000 f8c3 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_TIM2_Init+0x94>)
 80013ac:	f004 fd02 	bl	8005db4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80013b6:	f000 f8b5 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000026c 	.word	0x2000026c
 80013c8:	0003d08f 	.word	0x0003d08f

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART2_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 8001404:	f004 fd66 	bl	8005ed4 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f889 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002b4 	.word	0x200002b4
 800141c:	40004400 	.word	0x40004400

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <MX_GPIO_Init+0xd0>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2120      	movs	r1, #32
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014ac:	f000 fe8c 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_GPIO_Init+0xd8>)
 80014c8:	f000 fcea 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014cc:	2320      	movs	r3, #32
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_GPIO_Init+0xd4>)
 80014e4:	f000 fcdc 	bl	8001ea0 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020800 	.word	0x40020800

080014fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) //If the source is TIM2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d103      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800150e:	2120      	movs	r1, #32
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001512:	f000 fe72 	bl	80021fa <HAL_GPIO_TogglePin>
	}
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40020000 	.word	0x40020000

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>
	...

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_MspInit+0x4c>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x4c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156e:	2007      	movs	r0, #7
 8001570:	f000 fbb4 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <HAL_I2C_MspInit+0xa4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d13c      	bne.n	800161c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_I2C_MspInit+0xa8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_I2C_MspInit+0xa8>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_I2C_MspInit+0xa8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d0:	2304      	movs	r3, #4
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4814      	ldr	r0, [pc, #80]	; (800162c <HAL_I2C_MspInit+0xac>)
 80015dc:	f000 fc60 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_I2C_MspInit+0xa8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_I2C_MspInit+0xa8>)
 80015ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_I2C_MspInit+0xa8>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	201f      	movs	r0, #31
 8001602:	f000 fb76 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001606:	201f      	movs	r0, #31
 8001608:	f000 fb8f 	bl	8001d2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2020      	movs	r0, #32
 8001612:	f000 fb6e 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001616:	2020      	movs	r0, #32
 8001618:	f000 fb87 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40005400 	.word	0x40005400
 8001628:	40023800 	.word	0x40023800
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001640:	d115      	bne.n	800166e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <HAL_TIM_Base_MspInit+0x48>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	201c      	movs	r0, #28
 8001664:	f000 fb45 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001668:	201c      	movs	r0, #28
 800166a:	f000 fb5e 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_UART_MspInit+0x94>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d133      	bne.n	8001706 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_UART_MspInit+0x98>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <HAL_UART_MspInit+0x98>)
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_UART_MspInit+0x98>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_UART_MspInit+0x98>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_UART_MspInit+0x98>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_UART_MspInit+0x98>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d6:	230c      	movs	r3, #12
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e6:	2307      	movs	r3, #7
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <HAL_UART_MspInit+0x9c>)
 80016f2:	f000 fbd5 	bl	8001ea0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2026      	movs	r0, #38	; 0x26
 80016fc:	f000 faf9 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001700:	2026      	movs	r0, #38	; 0x26
 8001702:	f000 fb12 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004400 	.word	0x40004400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <NMI_Handler+0x4>

08001722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <MemManage_Handler+0x4>

0800172e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <UsageFault_Handler+0x4>

0800173a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f9c8 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <TIM2_IRQHandler+0x10>)
 8001776:	f003 ffeb 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000026c 	.word	0x2000026c

08001784 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <I2C1_EV_IRQHandler+0x10>)
 800178a:	f001 f9b9 	bl	8002b00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000020c 	.word	0x2000020c

08001798 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <I2C1_ER_IRQHandler+0x10>)
 800179e:	f001 fb20 	bl	8002de2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000020c 	.word	0x2000020c

080017ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <USART2_IRQHandler+0x10>)
 80017b2:	f004 fc9f 	bl	80060f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200002b4 	.word	0x200002b4

080017c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_kill>:

int _kill(int pid, int sig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017da:	f005 fb43 	bl	8006e64 <__errno>
 80017de:	4603      	mov	r3, r0
 80017e0:	2216      	movs	r2, #22
 80017e2:	601a      	str	r2, [r3, #0]
	return -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_exit>:

void _exit (int status)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ffe7 	bl	80017d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001802:	e7fe      	b.n	8001802 <_exit+0x12>

08001804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001816:	f3af 8000 	nop.w
 800181a:	4601      	mov	r1, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf0      	blt.n	8001816 <_read+0x12>
	}

return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:
	}
	return len;
}

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001866:	605a      	str	r2, [r3, #4]
	return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f005 fac4 	bl	8006e64 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	200001fc 	.word	0x200001fc
 8001910:	20000310 	.word	0x20000310

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <temperature>:
#include <main.h>

//I2C_HandleTypeDef hi2c1;

float temperature(uint8_t buf[6])
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	  float t, t_raw;
	  t_raw = (uint16_t)((((uint16_t)buf[0])<<8) | (uint16_t)buf[1]);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3301      	adds	r3, #1
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195e:	edc7 7a03 	vstr	s15, [r7, #12]
	  t = -45 + 175*t_raw/65535;
 8001962:	edd7 7a03 	vldr	s15, [r7, #12]
 8001966:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001998 <temperature+0x60>
 800196a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800196e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800199c <temperature+0x64>
 8001972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001976:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80019a0 <temperature+0x68>
 800197a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800197e:	edc7 7a02 	vstr	s15, [r7, #8]
	  return t;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	ee07 3a90 	vmov	s15, r3
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	432f0000 	.word	0x432f0000
 800199c:	477fff00 	.word	0x477fff00
 80019a0:	42340000 	.word	0x42340000

080019a4 <humidity>:

float humidity(uint8_t buf[6])
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	  float h, h_raw;
	  h_raw = (uint16_t)((((uint16_t)buf[3])<<8) | (uint16_t)buf[4]);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3303      	adds	r3, #3
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	4313      	orrs	r3, r2
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019cc:	edc7 7a03 	vstr	s15, [r7, #12]
	  h = 100 * h_raw/65535;
 80019d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80019fc <humidity+0x58>
 80019d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019dc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001a00 <humidity+0x5c>
 80019e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e4:	edc7 7a02 	vstr	s15, [r7, #8]
	  return h;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	ee07 3a90 	vmov	s15, r3
}
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	42c80000 	.word	0x42c80000
 8001a00:	477fff00 	.word	0x477fff00

08001a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0a:	490e      	ldr	r1, [pc, #56]	; (8001a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a20:	4c0b      	ldr	r4, [pc, #44]	; (8001a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a2e:	f7ff ff71 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f005 fa1d 	bl	8006e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a36:	f7ff fb75 	bl	8001124 <main>
  bx  lr    
 8001a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a48:	08009ebc 	.word	0x08009ebc
  ldr r2, =_sbss
 8001a4c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a50:	20000310 	.word	0x20000310

08001a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_Init+0x40>)
 8001a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_Init+0x40>)
 8001a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_Init+0x40>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 f92b 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fd50 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f943 	bl	8001d46 <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f90b 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000004 	.word	0x20000004
 8001af4:	2000000c 	.word	0x2000000c
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	200002fc 	.word	0x200002fc

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200002fc 	.word	0x200002fc

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff3e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff8e 	bl	8001c30 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5d 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff31 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff feda 	bl	8001b24 <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d008      	beq.n	8001d90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e052      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0216 	bic.w	r2, r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_DMA_Abort+0x62>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	e013      	b.n	8001e0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de2:	f7ff fe9f 	bl	8001b24 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d90c      	bls.n	8001e0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e015      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e4      	bne.n	8001de2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	223f      	movs	r2, #63	; 0x3f
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00c      	b.n	8001e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e90:	b2db      	uxtb	r3, r3
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e165      	b.n	8002188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8154 	bne.w	8002182 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80ae 	beq.w	8002182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_GPIO_Init+0x300>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_GPIO_Init+0x300>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <HAL_GPIO_Init+0x300>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_GPIO_Init+0x308>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4d      	ldr	r2, [pc, #308]	; (80021b0 <HAL_GPIO_Init+0x310>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <HAL_GPIO_Init+0x314>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4b      	ldr	r2, [pc, #300]	; (80021b8 <HAL_GPIO_Init+0x318>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x20a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4a      	ldr	r2, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x31c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x206>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x320>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x202>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_GPIO_Init+0x324>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fe:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae96 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	041a      	lsls	r2, r3, #16
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43d9      	mvns	r1, r3
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	400b      	ands	r3, r1
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e12b      	b.n	800249a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff f992 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	; 0x24
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002294:	f002 fd24 	bl	8004ce0 <HAL_RCC_GetPCLK1Freq>
 8002298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a81      	ldr	r2, [pc, #516]	; (80024a4 <HAL_I2C_Init+0x274>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d807      	bhi.n	80022b4 <HAL_I2C_Init+0x84>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a80      	ldr	r2, [pc, #512]	; (80024a8 <HAL_I2C_Init+0x278>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e006      	b.n	80022c2 <HAL_I2C_Init+0x92>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a7d      	ldr	r2, [pc, #500]	; (80024ac <HAL_I2C_Init+0x27c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0e7      	b.n	800249a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a78      	ldr	r2, [pc, #480]	; (80024b0 <HAL_I2C_Init+0x280>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a6a      	ldr	r2, [pc, #424]	; (80024a4 <HAL_I2C_Init+0x274>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d802      	bhi.n	8002304 <HAL_I2C_Init+0xd4>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3301      	adds	r3, #1
 8002302:	e009      	b.n	8002318 <HAL_I2C_Init+0xe8>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_I2C_Init+0x284>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	3301      	adds	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	495c      	ldr	r1, [pc, #368]	; (80024a4 <HAL_I2C_Init+0x274>)
 8002334:	428b      	cmp	r3, r1
 8002336:	d819      	bhi.n	800236c <HAL_I2C_Init+0x13c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e59      	subs	r1, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fbb1 f3f3 	udiv	r3, r1, r3
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800234c:	400b      	ands	r3, r1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_I2C_Init+0x138>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e59      	subs	r1, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	e051      	b.n	800240c <HAL_I2C_Init+0x1dc>
 8002368:	2304      	movs	r3, #4
 800236a:	e04f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_I2C_Init+0x168>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e012      	b.n	80023be <HAL_I2C_Init+0x18e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Init+0x196>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e022      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10e      	bne.n	80023ec <HAL_I2C_Init+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e58      	subs	r0, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ea:	e00f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	0099      	lsls	r1, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	6809      	ldr	r1, [r1, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6911      	ldr	r1, [r2, #16]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68d2      	ldr	r2, [r2, #12]
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	000186a0 	.word	0x000186a0
 80024a8:	001e847f 	.word	0x001e847f
 80024ac:	003d08ff 	.word	0x003d08ff
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff fb2a 	bl	8001b24 <HAL_GetTick>
 80024d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	f040 80e0 	bne.w	80026a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2319      	movs	r3, #25
 80024e6:	2201      	movs	r2, #1
 80024e8:	4970      	ldr	r1, [pc, #448]	; (80026ac <HAL_I2C_Master_Transmit+0x1f4>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f002 f8dc 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0d3      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2C_Master_Transmit+0x50>
 8002504:	2302      	movs	r3, #2
 8002506:	e0cc      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d007      	beq.n	800252e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2210      	movs	r2, #16
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	893a      	ldrh	r2, [r7, #8]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f001 fe9e 	bl	80042b8 <I2C_MasterRequestWrite>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e08d      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800259c:	e066      	b.n	800266c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f002 f956 	bl	8004854 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d107      	bne.n	80025c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06b      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <HAL_I2C_Master_Transmit+0x188>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f002 f946 	bl	80048d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b04      	cmp	r3, #4
 8002656:	d107      	bne.n	8002668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01a      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d194      	bne.n	800259e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	00100002 	.word	0x00100002
 80026b0:	ffff0000 	.word	0xffff0000

080026b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	4613      	mov	r3, r2
 80026c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fa2c 	bl	8001b24 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 820b 	bne.w	8002af2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	497c      	ldr	r1, [pc, #496]	; (80028d8 <HAL_I2C_Master_Receive+0x224>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f001 ffde 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e1fe      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_Master_Receive+0x50>
 8002700:	2302      	movs	r3, #2
 8002702:	e1f7      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d007      	beq.n	800272a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2222      	movs	r2, #34	; 0x22
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2210      	movs	r2, #16
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_I2C_Master_Receive+0x228>)
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f001 fe22 	bl	80043bc <I2C_MasterRequestRead>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1b8      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d113      	bne.n	80027b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e18c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d11b      	bne.n	80027f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e16c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d11b      	bne.n	8002832 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	e14c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002858:	e138      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b03      	cmp	r3, #3
 8002860:	f200 80f1 	bhi.w	8002a46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	2b01      	cmp	r3, #1
 800286a:	d123      	bne.n	80028b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f002 f8a3 	bl	80049bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e139      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b2:	e10b      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d14e      	bne.n	800295a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	2200      	movs	r2, #0
 80028c4:	4906      	ldr	r1, [pc, #24]	; (80028e0 <HAL_I2C_Master_Receive+0x22c>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f001 feee 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e10e      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
 80028d6:	bf00      	nop
 80028d8:	00100002 	.word	0x00100002
 80028dc:	ffff0000 	.word	0xffff0000
 80028e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002958:	e0b8      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	2200      	movs	r2, #0
 8002962:	4966      	ldr	r1, [pc, #408]	; (8002afc <HAL_I2C_Master_Receive+0x448>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f001 fe9f 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0bf      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2200      	movs	r2, #0
 80029be:	494f      	ldr	r1, [pc, #316]	; (8002afc <HAL_I2C_Master_Receive+0x448>)
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f001 fe71 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e091      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a44:	e042      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f001 ffb6 	bl	80049bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e04c      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d118      	bne.n	8002acc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f aec2 	bne.w	800285a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	00010004 	.word	0x00010004

08002b00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d003      	beq.n	8002b38 <HAL_I2C_EV_IRQHandler+0x38>
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	f040 80c1 	bne.w	8002cba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <HAL_I2C_EV_IRQHandler+0x6e>
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b58:	d003      	beq.n	8002b62 <HAL_I2C_EV_IRQHandler+0x62>
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_EV_IRQHandler+0x66>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_I2C_EV_IRQHandler+0x68>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	f000 8132 	beq.w	8002dd2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_I2C_EV_IRQHandler+0x92>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	0a5b      	lsrs	r3, r3, #9
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f001 ff9e 	bl	8004ac6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fd79 	bl	8003682 <I2C_Master_SB>
 8002b90:	e092      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	0a5b      	lsrs	r3, r3, #9
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fdef 	bl	800378e <I2C_Master_ADD10>
 8002bb0:	e082      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	0a5b      	lsrs	r3, r3, #9
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fe09 	bl	80037e2 <I2C_Master_ADDR>
 8002bd0:	e072      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d03b      	beq.n	8002c56 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bec:	f000 80f3 	beq.w	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	09db      	lsrs	r3, r3, #7
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00f      	beq.n	8002c1c <HAL_I2C_EV_IRQHandler+0x11c>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	0a9b      	lsrs	r3, r3, #10
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_I2C_EV_IRQHandler+0x11c>
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f9f3 	bl	8003000 <I2C_MasterTransmit_TXE>
 8002c1a:	e04d      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80d6 	beq.w	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	0a5b      	lsrs	r3, r3, #9
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80cf 	beq.w	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	2b21      	cmp	r3, #33	; 0x21
 8002c3c:	d103      	bne.n	8002c46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa7a 	bl	8003138 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c44:	e0c7      	b.n	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	f040 80c4 	bne.w	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fae8 	bl	8003224 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c54:	e0bf      	b.n	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c64:	f000 80b7 	beq.w	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00f      	beq.n	8002c94 <HAL_I2C_EV_IRQHandler+0x194>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	0a9b      	lsrs	r3, r3, #10
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <HAL_I2C_EV_IRQHandler+0x194>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fb5d 	bl	800334c <I2C_MasterReceive_RXNE>
 8002c92:	e011      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 809a 	beq.w	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	0a5b      	lsrs	r3, r3, #9
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8093 	beq.w	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fbfc 	bl	80034ae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cb6:	e08e      	b.n	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002cb8:	e08d      	b.n	8002dd6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	e007      	b.n	8002cdc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x20e>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	0a5b      	lsrs	r3, r3, #9
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 ffba 	bl	8003c80 <I2C_Slave_ADDR>
 8002d0c:	e066      	b.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_I2C_EV_IRQHandler+0x22e>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	0a5b      	lsrs	r3, r3, #9
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fff4 	bl	8003d14 <I2C_Slave_STOPF>
 8002d2c:	e056      	b.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	2b21      	cmp	r3, #33	; 0x21
 8002d32:	d002      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x23a>
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	2b29      	cmp	r3, #41	; 0x29
 8002d38:	d125      	bne.n	8002d86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	09db      	lsrs	r3, r3, #7
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00f      	beq.n	8002d66 <HAL_I2C_EV_IRQHandler+0x266>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	0a9b      	lsrs	r3, r3, #10
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_I2C_EV_IRQHandler+0x266>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fed0 	bl	8003b04 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d64:	e039      	b.n	8002dda <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d033      	beq.n	8002dda <HAL_I2C_EV_IRQHandler+0x2da>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	0a5b      	lsrs	r3, r3, #9
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d02d      	beq.n	8002dda <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fefd 	bl	8003b7e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d84:	e029      	b.n	8002dda <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00f      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	0a9b      	lsrs	r3, r3, #10
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 ff08 	bl	8003bc0 <I2C_SlaveReceive_RXNE>
 8002db0:	e014      	b.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	0a5b      	lsrs	r3, r3, #9
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 ff36 	bl	8003c3c <I2C_SlaveReceive_BTF>
 8002dd0:	e004      	b.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b08a      	sub	sp, #40	; 0x28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e04:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00e      	beq.n	8002e30 <HAL_I2C_ER_IRQHandler+0x4e>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e2e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	0a5b      	lsrs	r3, r3, #9
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <HAL_I2C_ER_IRQHandler+0x78>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002e58:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	0a9b      	lsrs	r3, r3, #10
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03f      	beq.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x104>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d039      	beq.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002e72:	7efb      	ldrb	r3, [r7, #27]
 8002e74:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002e8c:	7ebb      	ldrb	r3, [r7, #26]
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d112      	bne.n	8002eb8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10f      	bne.n	8002eb8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b21      	cmp	r3, #33	; 0x21
 8002e9c:	d008      	beq.n	8002eb0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	2b29      	cmp	r3, #41	; 0x29
 8002ea2:	d005      	beq.n	8002eb0 <HAL_I2C_ER_IRQHandler+0xce>
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b28      	cmp	r3, #40	; 0x28
 8002ea8:	d106      	bne.n	8002eb8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b21      	cmp	r3, #33	; 0x21
 8002eae:	d103      	bne.n	8002eb8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f001 f85f 	bl	8003f74 <I2C_Slave_AF>
 8002eb6:	e016      	b.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002eca:	7efb      	ldrb	r3, [r7, #27]
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d002      	beq.n	8002ed6 <HAL_I2C_ER_IRQHandler+0xf4>
 8002ed0:	7efb      	ldrb	r3, [r7, #27]
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	d107      	bne.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	0adb      	lsrs	r3, r3, #11
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <HAL_I2C_ER_IRQHandler+0x12e>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002f0e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f001 f896 	bl	8004054 <I2C_ITError>
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003016:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d150      	bne.n	80030c8 <I2C_MasterTransmit_TXE+0xc8>
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b21      	cmp	r3, #33	; 0x21
 800302a:	d14d      	bne.n	80030c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d01d      	beq.n	800306e <I2C_MasterTransmit_TXE+0x6e>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b20      	cmp	r3, #32
 8003036:	d01a      	beq.n	800306e <I2C_MasterTransmit_TXE+0x6e>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800303e:	d016      	beq.n	800306e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800304e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2211      	movs	r2, #17
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff62 	bl	8002f30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800306c:	e060      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800307c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	d107      	bne.n	80030b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff7d 	bl	8002fb0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030b6:	e03b      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff35 	bl	8002f30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c6:	e033      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b21      	cmp	r3, #33	; 0x21
 80030cc:	d005      	beq.n	80030da <I2C_MasterTransmit_TXE+0xda>
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d12d      	bne.n	8003130 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b22      	cmp	r3, #34	; 0x22
 80030d8:	d12a      	bne.n	8003130 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80030f4:	e01c      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d103      	bne.n	800310a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f88e 	bl	8003224 <I2C_MemoryTransmit_TXE_BTF>
}
 8003108:	e012      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800312e:	e7ff      	b.n	8003130 <I2C_MasterTransmit_TXE+0x130>
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b21      	cmp	r3, #33	; 0x21
 8003150:	d164      	bne.n	800321c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003180:	e04c      	b.n	800321c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d01d      	beq.n	80031c4 <I2C_MasterTransmit_BTF+0x8c>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b20      	cmp	r3, #32
 800318c:	d01a      	beq.n	80031c4 <I2C_MasterTransmit_BTF+0x8c>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003194:	d016      	beq.n	80031c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2211      	movs	r2, #17
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff feb7 	bl	8002f30 <HAL_I2C_MasterTxCpltCallback>
}
 80031c2:	e02b      	b.n	800321c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d107      	bne.n	800320e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fed2 	bl	8002fb0 <HAL_I2C_MemTxCpltCallback>
}
 800320c:	e006      	b.n	800321c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fe8a 	bl	8002f30 <HAL_I2C_MasterTxCpltCallback>
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11d      	bne.n	8003278 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10b      	bne.n	800325c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	b2da      	uxtb	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800325a:	e073      	b.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003260:	b29b      	uxth	r3, r3
 8003262:	121b      	asrs	r3, r3, #8
 8003264:	b2da      	uxtb	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003276:	e065      	b.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10b      	bne.n	8003298 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	b2da      	uxtb	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003296:	e055      	b.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	2b02      	cmp	r3, #2
 800329e:	d151      	bne.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b22      	cmp	r3, #34	; 0x22
 80032a4:	d10d      	bne.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032c0:	e040      	b.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b21      	cmp	r3, #33	; 0x21
 80032d0:	d112      	bne.n	80032f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032f6:	e025      	b.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d120      	bne.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b21      	cmp	r3, #33	; 0x21
 8003306:	d11d      	bne.n	8003344 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003316:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003326:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fe36 	bl	8002fb0 <HAL_I2C_MemTxCpltCallback>
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b22      	cmp	r3, #34	; 0x22
 800335e:	f040 80a2 	bne.w	80034a6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d921      	bls.n	80033b4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b03      	cmp	r3, #3
 800339e:	f040 8082 	bne.w	80034a6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80033b2:	e078      	b.n	80034a6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d074      	beq.n	80034a6 <I2C_MasterReceive_RXNE+0x15a>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d002      	beq.n	80033c8 <I2C_MasterReceive_RXNE+0x7c>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d16e      	bne.n	80034a6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f001 fac5 	bl	8004958 <I2C_WaitOnSTOPRequestThroughIT>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d142      	bne.n	800345a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d10a      	bne.n	8003444 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fdc1 	bl	8002fc4 <HAL_I2C_MemRxCpltCallback>
}
 8003442:	e030      	b.n	80034a6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2212      	movs	r2, #18
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fd76 	bl	8002f44 <HAL_I2C_MasterRxCpltCallback>
}
 8003458:	e025      	b.n	80034a6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003468:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fd99 	bl	8002fd8 <HAL_I2C_ErrorCallback>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d11b      	bne.n	80034fe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034fc:	e0bd      	b.n	800367a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d129      	bne.n	800355c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003516:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b04      	cmp	r3, #4
 800351c:	d00a      	beq.n	8003534 <I2C_MasterReceive_BTF+0x86>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d007      	beq.n	8003534 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003532:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800355a:	e08e      	b.n	800367a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d176      	bne.n	8003654 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d002      	beq.n	8003572 <I2C_MasterReceive_BTF+0xc4>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b10      	cmp	r3, #16
 8003570:	d108      	bne.n	8003584 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e019      	b.n	80035b8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d002      	beq.n	8003590 <I2C_MasterReceive_BTF+0xe2>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d108      	bne.n	80035a2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e00a      	b.n	80035b8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d007      	beq.n	80035b8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003612:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d10a      	bne.n	800363e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fcc4 	bl	8002fc4 <HAL_I2C_MemRxCpltCallback>
}
 800363c:	e01d      	b.n	800367a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2212      	movs	r2, #18
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fc79 	bl	8002f44 <HAL_I2C_MasterRxCpltCallback>
}
 8003652:	e012      	b.n	800367a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d117      	bne.n	80036c6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036ae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80036b0:	e067      	b.n	8003782 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]
}
 80036c4:	e05d      	b.n	8003782 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ce:	d133      	bne.n	8003738 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b21      	cmp	r3, #33	; 0x21
 80036da:	d109      	bne.n	80036f0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036ec:	611a      	str	r2, [r3, #16]
 80036ee:	e008      	b.n	8003702 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <I2C_Master_SB+0x92>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d108      	bne.n	8003726 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	2b00      	cmp	r3, #0
 800371a:	d032      	beq.n	8003782 <I2C_Master_SB+0x100>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d02d      	beq.n	8003782 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003734:	605a      	str	r2, [r3, #4]
}
 8003736:	e024      	b.n	8003782 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10e      	bne.n	800375e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	b29b      	uxth	r3, r3
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f063 030f 	orn	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]
}
 800375c:	e011      	b.n	8003782 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10d      	bne.n	8003782 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	b29b      	uxth	r3, r3
 800376c:	11db      	asrs	r3, r3, #7
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f003 0306 	and.w	r3, r3, #6
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f063 030e 	orn	r3, r3, #14
 800377a:	b2da      	uxtb	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	b2da      	uxtb	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <I2C_Master_ADD10+0x26>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d108      	bne.n	80037c6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <I2C_Master_ADD10+0x48>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]
  }
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b091      	sub	sp, #68	; 0x44
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b22      	cmp	r3, #34	; 0x22
 800380a:	f040 8169 	bne.w	8003ae0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <I2C_Master_ADDR+0x54>
 8003816:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d10b      	bne.n	8003836 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	633b      	str	r3, [r7, #48]	; 0x30
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	633b      	str	r3, [r7, #48]	; 0x30
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	e160      	b.n	8003af8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <I2C_Master_ADDR+0x98>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003846:	d118      	bne.n	800387a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	651a      	str	r2, [r3, #80]	; 0x50
 8003878:	e13e      	b.n	8003af8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d113      	bne.n	80038ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e115      	b.n	8003ad8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	f040 808a 	bne.w	80039cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038be:	d137      	bne.n	8003930 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038de:	d113      	bne.n	8003908 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	e0e7      	b.n	8003ad8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003908:	2300      	movs	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e0d3      	b.n	8003ad8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	2b08      	cmp	r3, #8
 8003934:	d02e      	beq.n	8003994 <I2C_Master_ADDR+0x1b2>
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	2b20      	cmp	r3, #32
 800393a:	d02b      	beq.n	8003994 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	2b12      	cmp	r3, #18
 8003940:	d102      	bne.n	8003948 <I2C_Master_ADDR+0x166>
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	2b01      	cmp	r3, #1
 8003946:	d125      	bne.n	8003994 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	2b04      	cmp	r3, #4
 800394c:	d00e      	beq.n	800396c <I2C_Master_ADDR+0x18a>
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b02      	cmp	r3, #2
 8003952:	d00b      	beq.n	800396c <I2C_Master_ADDR+0x18a>
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b10      	cmp	r3, #16
 8003958:	d008      	beq.n	800396c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e007      	b.n	800397c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800397a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	e0a1      	b.n	8003ad8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e085      	b.n	8003ad8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d14d      	bne.n	8003a72 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d016      	beq.n	8003a0a <I2C_Master_ADDR+0x228>
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d013      	beq.n	8003a0a <I2C_Master_ADDR+0x228>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d010      	beq.n	8003a0a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e007      	b.n	8003a1a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a18:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a28:	d117      	bne.n	8003a5a <I2C_Master_ADDR+0x278>
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a30:	d00b      	beq.n	8003a4a <I2C_Master_ADDR+0x268>
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d008      	beq.n	8003a4a <I2C_Master_ADDR+0x268>
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d005      	beq.n	8003a4a <I2C_Master_ADDR+0x268>
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d002      	beq.n	8003a4a <I2C_Master_ADDR+0x268>
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d107      	bne.n	8003a5a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	e032      	b.n	8003ad8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a80:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a90:	d117      	bne.n	8003ac2 <I2C_Master_ADDR+0x2e0>
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a98:	d00b      	beq.n	8003ab2 <I2C_Master_ADDR+0x2d0>
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d008      	beq.n	8003ab2 <I2C_Master_ADDR+0x2d0>
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d005      	beq.n	8003ab2 <I2C_Master_ADDR+0x2d0>
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d002      	beq.n	8003ab2 <I2C_Master_ADDR+0x2d0>
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d107      	bne.n	8003ac2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ac0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ade:	e00b      	b.n	8003af8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
}
 8003af6:	e7ff      	b.n	8003af8 <I2C_Master_ADDR+0x316>
 8003af8:	bf00      	nop
 8003afa:	3744      	adds	r7, #68	; 0x44
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02b      	beq.n	8003b76 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d114      	bne.n	8003b76 <I2C_SlaveTransmit_TXE+0x72>
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b29      	cmp	r3, #41	; 0x29
 8003b50:	d111      	bne.n	8003b76 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2221      	movs	r2, #33	; 0x21
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2228      	movs	r2, #40	; 0x28
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff f9f1 	bl	8002f58 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d011      	beq.n	8003bb4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d02c      	beq.n	8003c34 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d114      	bne.n	8003c34 <I2C_SlaveReceive_RXNE+0x74>
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c0e:	d111      	bne.n	8003c34 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2222      	movs	r2, #34	; 0x22
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2228      	movs	r2, #40	; 0x28
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff f99c 	bl	8002f6c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c9a:	2b28      	cmp	r3, #40	; 0x28
 8003c9c:	d127      	bne.n	8003cee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	09db      	lsrs	r3, r3, #7
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	81bb      	strh	r3, [r7, #12]
 8003cd0:	e002      	b.n	8003cd8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ce0:	89ba      	ldrh	r2, [r7, #12]
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff f94a 	bl	8002f80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cec:	e00e      	b.n	8003d0c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d70:	d172      	bne.n	8003e58 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b22      	cmp	r3, #34	; 0x22
 8003d76:	d002      	beq.n	8003d7e <I2C_Slave_STOPF+0x6a>
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d7c:	d135      	bne.n	8003dea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe f863 	bl	8001e82 <HAL_DMA_GetState>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d049      	beq.n	8003e56 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	4a69      	ldr	r2, [pc, #420]	; (8003f6c <I2C_Slave_STOPF+0x258>)
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe f835 	bl	8001e3e <HAL_DMA_Abort_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d03d      	beq.n	8003e56 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de4:	4610      	mov	r0, r2
 8003de6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003de8:	e035      	b.n	8003e56 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe f82d 	bl	8001e82 <HAL_DMA_GetState>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d014      	beq.n	8003e58 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	4a4e      	ldr	r2, [pc, #312]	; (8003f6c <I2C_Slave_STOPF+0x258>)
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd ffff 	bl	8001e3e <HAL_DMA_Abort_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e50:	4610      	mov	r0, r2
 8003e52:	4798      	blx	r3
 8003e54:	e000      	b.n	8003e58 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e56:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d03e      	beq.n	8003ee0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d112      	bne.n	8003e96 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d112      	bne.n	8003eca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0204 	orr.w	r2, r3, #4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f8b3 	bl	8004054 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003eee:	e039      	b.n	8003f64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef4:	d109      	bne.n	8003f0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2228      	movs	r2, #40	; 0x28
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff f831 	bl	8002f6c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b28      	cmp	r3, #40	; 0x28
 8003f14:	d111      	bne.n	8003f3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <I2C_Slave_STOPF+0x25c>)
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff f832 	bl	8002f9c <HAL_I2C_ListenCpltCallback>
}
 8003f38:	e014      	b.n	8003f64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	2b22      	cmp	r3, #34	; 0x22
 8003f40:	d002      	beq.n	8003f48 <I2C_Slave_STOPF+0x234>
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b22      	cmp	r3, #34	; 0x22
 8003f46:	d10d      	bne.n	8003f64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff f804 	bl	8002f6c <HAL_I2C_SlaveRxCpltCallback>
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	08004559 	.word	0x08004559
 8003f70:	ffff0000 	.word	0xffff0000

08003f74 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d002      	beq.n	8003f96 <I2C_Slave_AF+0x22>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d129      	bne.n	8003fea <I2C_Slave_AF+0x76>
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b28      	cmp	r3, #40	; 0x28
 8003f9a:	d126      	bne.n	8003fea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a2c      	ldr	r2, [pc, #176]	; (8004050 <I2C_Slave_AF+0xdc>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fb0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fe ffda 	bl	8002f9c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003fe8:	e02e      	b.n	8004048 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b21      	cmp	r3, #33	; 0x21
 8003fee:	d126      	bne.n	800403e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a17      	ldr	r2, [pc, #92]	; (8004050 <I2C_Slave_AF+0xdc>)
 8003ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2221      	movs	r2, #33	; 0x21
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800401a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004024:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004034:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe ff8e 	bl	8002f58 <HAL_I2C_SlaveTxCpltCallback>
}
 800403c:	e004      	b.n	8004048 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004046:	615a      	str	r2, [r3, #20]
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	ffff0000 	.word	0xffff0000

08004054 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800406c:	7bbb      	ldrb	r3, [r7, #14]
 800406e:	2b10      	cmp	r3, #16
 8004070:	d002      	beq.n	8004078 <I2C_ITError+0x24>
 8004072:	7bbb      	ldrb	r3, [r7, #14]
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d10a      	bne.n	800408e <I2C_ITError+0x3a>
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b22      	cmp	r3, #34	; 0x22
 800407c:	d107      	bne.n	800408e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004094:	2b28      	cmp	r3, #40	; 0x28
 8004096:	d107      	bne.n	80040a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2228      	movs	r2, #40	; 0x28
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040a6:	e015      	b.n	80040d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b6:	d00a      	beq.n	80040ce <I2C_ITError+0x7a>
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b60      	cmp	r3, #96	; 0x60
 80040bc:	d007      	beq.n	80040ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e2:	d162      	bne.n	80041aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d020      	beq.n	8004144 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	4a6a      	ldr	r2, [pc, #424]	; (80042b0 <I2C_ITError+0x25c>)
 8004108:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	4618      	mov	r0, r3
 8004110:	f7fd fe95 	bl	8001e3e <HAL_DMA_Abort_IT>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8089 	beq.w	800422e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800413e:	4610      	mov	r0, r2
 8004140:	4798      	blx	r3
 8004142:	e074      	b.n	800422e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <I2C_ITError+0x25c>)
 800414a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	4618      	mov	r0, r3
 8004152:	f7fd fe74 	bl	8001e3e <HAL_DMA_Abort_IT>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d068      	beq.n	800422e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d10b      	bne.n	8004182 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041a4:	4610      	mov	r0, r2
 80041a6:	4798      	blx	r3
 80041a8:	e041      	b.n	800422e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b60      	cmp	r3, #96	; 0x60
 80041b4:	d125      	bne.n	8004202 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d10b      	bne.n	80041ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fef6 	bl	8002fec <HAL_I2C_AbortCpltCallback>
 8004200:	e015      	b.n	800422e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d10b      	bne.n	8004228 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fe fed5 	bl	8002fd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10e      	bne.n	800425c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800426a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d113      	bne.n	80042a8 <I2C_ITError+0x254>
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b28      	cmp	r3, #40	; 0x28
 8004284:	d110      	bne.n	80042a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <I2C_ITError+0x260>)
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe fe7a 	bl	8002f9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	08004559 	.word	0x08004559
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	460b      	mov	r3, r1
 80042c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d006      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d003      	beq.n	80042e2 <I2C_MasterRequestWrite+0x2a>
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042e0:	d108      	bne.n	80042f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00b      	b.n	800430c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d107      	bne.n	800430c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f9c5 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004332:	d103      	bne.n	800433c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e035      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004348:	d108      	bne.n	800435c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e01b      	b.n	8004394 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800435c:	897b      	ldrh	r3, [r7, #10]
 800435e:	11db      	asrs	r3, r3, #7
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0306 	and.w	r3, r3, #6
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f063 030f 	orn	r3, r3, #15
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <I2C_MasterRequestWrite+0xfc>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f9eb 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e010      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800438a:	897b      	ldrh	r3, [r7, #10]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4907      	ldr	r1, [pc, #28]	; (80043b8 <I2C_MasterRequestWrite+0x100>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f9db 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	00010008 	.word	0x00010008
 80043b8:	00010002 	.word	0x00010002

080043bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	460b      	mov	r3, r1
 80043ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d006      	beq.n	80043f6 <I2C_MasterRequestRead+0x3a>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d003      	beq.n	80043f6 <I2C_MasterRequestRead+0x3a>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043f4:	d108      	bne.n	8004408 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e00b      	b.n	8004420 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	2b11      	cmp	r3, #17
 800440e:	d107      	bne.n	8004420 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f93b 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004446:	d103      	bne.n	8004450 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e079      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800445c:	d108      	bne.n	8004470 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	e05f      	b.n	8004530 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004470:	897b      	ldrh	r3, [r7, #10]
 8004472:	11db      	asrs	r3, r3, #7
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0306 	and.w	r3, r3, #6
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f063 030f 	orn	r3, r3, #15
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4930      	ldr	r1, [pc, #192]	; (8004550 <I2C_MasterRequestRead+0x194>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f961 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e054      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4929      	ldr	r1, [pc, #164]	; (8004554 <I2C_MasterRequestRead+0x198>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f951 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e044      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f8d9 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450a:	d103      	bne.n	8004514 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e017      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004518:	897b      	ldrh	r3, [r7, #10]
 800451a:	11db      	asrs	r3, r3, #7
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0306 	and.w	r3, r3, #6
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f063 030e 	orn	r3, r3, #14
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4907      	ldr	r1, [pc, #28]	; (8004554 <I2C_MasterRequestRead+0x198>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f90d 	bl	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	00010008 	.word	0x00010008
 8004554:	00010002 	.word	0x00010002

08004558 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004572:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <I2C_DMAAbort+0x148>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	08db      	lsrs	r3, r3, #3
 8004578:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <I2C_DMAAbort+0x14c>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0a1a      	lsrs	r2, r3, #8
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	00da      	lsls	r2, r3, #3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800459e:	e00a      	b.n	80045b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b4:	d0ea      	beq.n	800458c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	2200      	movs	r2, #0
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	2200      	movs	r2, #0
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2200      	movs	r2, #0
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	2200      	movs	r2, #0
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	2200      	movs	r2, #0
 800460a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b60      	cmp	r3, #96	; 0x60
 8004626:	d10e      	bne.n	8004646 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2200      	movs	r2, #0
 800463c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800463e:	6978      	ldr	r0, [r7, #20]
 8004640:	f7fe fcd4 	bl	8002fec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004644:	e027      	b.n	8004696 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800464c:	2b28      	cmp	r3, #40	; 0x28
 800464e:	d117      	bne.n	8004680 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800466e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2228      	movs	r2, #40	; 0x28
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800467e:	e007      	b.n	8004690 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004690:	6978      	ldr	r0, [r7, #20]
 8004692:	f7fe fca1 	bl	8002fd8 <HAL_I2C_ErrorCallback>
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000004 	.word	0x20000004
 80046a4:	14f8b589 	.word	0x14f8b589

080046a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b8:	e025      	b.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d021      	beq.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fd fa2f 	bl	8001b24 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d116      	bne.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e023      	b.n	800474e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10d      	bne.n	800472c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	43da      	mvns	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	e00c      	b.n	8004746 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	429a      	cmp	r2, r3
 800474a:	d0b6      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004764:	e051      	b.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004774:	d123      	bne.n	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004784:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f043 0204 	orr.w	r2, r3, #4
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e046      	b.n	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d021      	beq.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c6:	f7fd f9ad 	bl	8001b24 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d116      	bne.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e020      	b.n	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10c      	bne.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	43da      	mvns	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4013      	ands	r3, r2
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e00b      	b.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d18d      	bne.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004860:	e02d      	b.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f900 	bl	8004a68 <I2C_IsAcknowledgeFailed>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e02d      	b.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d021      	beq.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fd f953 	bl	8001b24 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e007      	b.n	80048ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	d1ca      	bne.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e2:	e02d      	b.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f8bf 	bl	8004a68 <I2C_IsAcknowledgeFailed>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e02d      	b.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d021      	beq.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fc:	f7fd f912 	bl	8001b24 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d116      	bne.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e007      	b.n	8004950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b04      	cmp	r3, #4
 800494c:	d1ca      	bne.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004964:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	0a1a      	lsrs	r2, r3, #8
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b01      	subs	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d107      	bne.n	8004996 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e008      	b.n	80049a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a4:	d0e9      	beq.n	800497a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20000004 	.word	0x20000004
 80049b8:	14f8b589 	.word	0x14f8b589

080049bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049c8:	e042      	b.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d119      	bne.n	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0210 	mvn.w	r2, #16
 80049e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e029      	b.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0c:	f7fd f88a 	bl	8001b24 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d116      	bne.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f043 0220 	orr.w	r2, r3, #32
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e007      	b.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d1b5      	bne.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d11b      	bne.n	8004ab8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f043 0204 	orr.w	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ad6:	d103      	bne.n	8004ae0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ade:	e007      	b.n	8004af0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ae8:	d102      	bne.n	8004af0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2208      	movs	r2, #8
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0cc      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b68      	ldr	r3, [pc, #416]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d90c      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b65      	ldr	r3, [pc, #404]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a58      	ldr	r2, [pc, #352]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d044      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d119      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	4b3f      	ldr	r3, [pc, #252]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e06f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e067      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4934      	ldr	r1, [pc, #208]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bec:	f7fc ff9a 	bl	8001b24 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fc ff96 	bl	8001b24 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e04f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d20c      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f855 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc fefa 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023c00 	.word	0x40023c00
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	08009ab4 	.word	0x08009ab4
 8004cc0:	20000004 	.word	0x20000004
 8004cc4:	20000008 	.word	0x20000008

08004cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000004 	.word	0x20000004

08004ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ce4:	f7ff fff0 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	0a9b      	lsrs	r3, r3, #10
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	4903      	ldr	r1, [pc, #12]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf6:	5ccb      	ldrb	r3, [r1, r3]
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40023800 	.word	0x40023800
 8004d04:	08009ac4 	.word	0x08009ac4

08004d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d0c:	f7ff ffdc 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	0b5b      	lsrs	r3, r3, #13
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4903      	ldr	r1, [pc, #12]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	08009ac4 	.word	0x08009ac4

08004d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d34:	b088      	sub	sp, #32
 8004d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d4c:	4bce      	ldr	r3, [pc, #824]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	f200 818d 	bhi.w	8005074 <HAL_RCC_GetSysClockFreq+0x344>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <HAL_RCC_GetSysClockFreq+0x30>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08005075 	.word	0x08005075
 8004d68:	08005075 	.word	0x08005075
 8004d6c:	08005075 	.word	0x08005075
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08005075 	.word	0x08005075
 8004d78:	08005075 	.word	0x08005075
 8004d7c:	08005075 	.word	0x08005075
 8004d80:	08004da1 	.word	0x08004da1
 8004d84:	08005075 	.word	0x08005075
 8004d88:	08005075 	.word	0x08005075
 8004d8c:	08005075 	.word	0x08005075
 8004d90:	08004f15 	.word	0x08004f15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4bbd      	ldr	r3, [pc, #756]	; (800508c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d96:	61bb      	str	r3, [r7, #24]
       break;
 8004d98:	e16f      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d9a:	4bbd      	ldr	r3, [pc, #756]	; (8005090 <HAL_RCC_GetSysClockFreq+0x360>)
 8004d9c:	61bb      	str	r3, [r7, #24]
      break;
 8004d9e:	e16c      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da0:	4bb9      	ldr	r3, [pc, #740]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004daa:	4bb7      	ldr	r3, [pc, #732]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d053      	beq.n	8004e5e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db6:	4bb4      	ldr	r3, [pc, #720]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	ea02 0400 	and.w	r4, r2, r0
 8004dce:	603c      	str	r4, [r7, #0]
 8004dd0:	400b      	ands	r3, r1
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dd8:	4620      	mov	r0, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	014b      	lsls	r3, r1, #5
 8004de6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dea:	0142      	lsls	r2, r0, #5
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	4623      	mov	r3, r4
 8004df2:	1ac0      	subs	r0, r0, r3
 8004df4:	462b      	mov	r3, r5
 8004df6:	eb61 0103 	sbc.w	r1, r1, r3
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	018b      	lsls	r3, r1, #6
 8004e04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e08:	0182      	lsls	r2, r0, #6
 8004e0a:	1a12      	subs	r2, r2, r0
 8004e0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	00d9      	lsls	r1, r3, #3
 8004e1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e1e:	00d0      	lsls	r0, r2, #3
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4621      	mov	r1, r4
 8004e26:	1852      	adds	r2, r2, r1
 8004e28:	4629      	mov	r1, r5
 8004e2a:	eb43 0101 	adc.w	r1, r3, r1
 8004e2e:	460b      	mov	r3, r1
 8004e30:	f04f 0000 	mov.w	r0, #0
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	0259      	lsls	r1, r3, #9
 8004e3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e3e:	0250      	lsls	r0, r2, #9
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4610      	mov	r0, r2
 8004e46:	4619      	mov	r1, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	f7fb feca 	bl	8000be8 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e04c      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5e:	4b8a      	ldr	r3, [pc, #552]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	461a      	mov	r2, r3
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	ea02 0a00 	and.w	sl, r2, r0
 8004e76:	ea03 0b01 	and.w	fp, r3, r1
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	014b      	lsls	r3, r1, #5
 8004e88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e8c:	0142      	lsls	r2, r0, #5
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	ebb0 000a 	subs.w	r0, r0, sl
 8004e96:	eb61 010b 	sbc.w	r1, r1, fp
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	018b      	lsls	r3, r1, #6
 8004ea4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ea8:	0182      	lsls	r2, r0, #6
 8004eaa:	1a12      	subs	r2, r2, r0
 8004eac:	eb63 0301 	sbc.w	r3, r3, r1
 8004eb0:	f04f 0000 	mov.w	r0, #0
 8004eb4:	f04f 0100 	mov.w	r1, #0
 8004eb8:	00d9      	lsls	r1, r3, #3
 8004eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ebe:	00d0      	lsls	r0, r2, #3
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	eb12 020a 	adds.w	r2, r2, sl
 8004ec8:	eb43 030b 	adc.w	r3, r3, fp
 8004ecc:	f04f 0000 	mov.w	r0, #0
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	0299      	lsls	r1, r3, #10
 8004ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004eda:	0290      	lsls	r0, r2, #10
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f7fb fe7c 	bl	8000be8 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ef8:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	61bb      	str	r3, [r7, #24]
      break;
 8004f12:	e0b2      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f14:	4b5c      	ldr	r3, [pc, #368]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f1c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f1e:	4b5a      	ldr	r3, [pc, #360]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04d      	beq.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2a:	4b57      	ldr	r3, [pc, #348]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	461a      	mov	r2, r3
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f3a:	f04f 0100 	mov.w	r1, #0
 8004f3e:	ea02 0800 	and.w	r8, r2, r0
 8004f42:	ea03 0901 	and.w	r9, r3, r1
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	014b      	lsls	r3, r1, #5
 8004f54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f58:	0142      	lsls	r2, r0, #5
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	ebb0 0008 	subs.w	r0, r0, r8
 8004f62:	eb61 0109 	sbc.w	r1, r1, r9
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	018b      	lsls	r3, r1, #6
 8004f70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f74:	0182      	lsls	r2, r0, #6
 8004f76:	1a12      	subs	r2, r2, r0
 8004f78:	eb63 0301 	sbc.w	r3, r3, r1
 8004f7c:	f04f 0000 	mov.w	r0, #0
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	00d9      	lsls	r1, r3, #3
 8004f86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f8a:	00d0      	lsls	r0, r2, #3
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	eb12 0208 	adds.w	r2, r2, r8
 8004f94:	eb43 0309 	adc.w	r3, r3, r9
 8004f98:	f04f 0000 	mov.w	r0, #0
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	0259      	lsls	r1, r3, #9
 8004fa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004fa6:	0250      	lsls	r0, r2, #9
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	f7fb fe16 	bl	8000be8 <__aeabi_uldivmod>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e04a      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	ea02 0400 	and.w	r4, r2, r0
 8004fde:	ea03 0501 	and.w	r5, r3, r1
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	014b      	lsls	r3, r1, #5
 8004ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ff4:	0142      	lsls	r2, r0, #5
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	1b00      	subs	r0, r0, r4
 8004ffc:	eb61 0105 	sbc.w	r1, r1, r5
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	018b      	lsls	r3, r1, #6
 800500a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800500e:	0182      	lsls	r2, r0, #6
 8005010:	1a12      	subs	r2, r2, r0
 8005012:	eb63 0301 	sbc.w	r3, r3, r1
 8005016:	f04f 0000 	mov.w	r0, #0
 800501a:	f04f 0100 	mov.w	r1, #0
 800501e:	00d9      	lsls	r1, r3, #3
 8005020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005024:	00d0      	lsls	r0, r2, #3
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	1912      	adds	r2, r2, r4
 800502c:	eb45 0303 	adc.w	r3, r5, r3
 8005030:	f04f 0000 	mov.w	r0, #0
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	0299      	lsls	r1, r3, #10
 800503a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800503e:	0290      	lsls	r0, r2, #10
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	461a      	mov	r2, r3
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	f7fb fdca 	bl	8000be8 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4613      	mov	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <HAL_RCC_GetSysClockFreq+0x358>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	0f1b      	lsrs	r3, r3, #28
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	61bb      	str	r3, [r7, #24]
      break;
 8005072:	e002      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005076:	61bb      	str	r3, [r7, #24]
      break;
 8005078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800507a:	69bb      	ldr	r3, [r7, #24]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800
 800508c:	00f42400 	.word	0x00f42400
 8005090:	007a1200 	.word	0x007a1200

08005094 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e28d      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 8083 	beq.w	80051ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050b4:	4b94      	ldr	r3, [pc, #592]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d019      	beq.n	80050f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050c0:	4b91      	ldr	r3, [pc, #580]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050cc:	4b8e      	ldr	r3, [pc, #568]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d8:	d00c      	beq.n	80050f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050da:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	d112      	bne.n	800510c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e6:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f2:	d10b      	bne.n	800510c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	4b84      	ldr	r3, [pc, #528]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05b      	beq.n	80051b8 <HAL_RCC_OscConfig+0x124>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d157      	bne.n	80051b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e25a      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d106      	bne.n	8005124 <HAL_RCC_OscConfig+0x90>
 8005116:	4b7c      	ldr	r3, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a7b      	ldr	r2, [pc, #492]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xcc>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0xb4>
 800512e:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a75      	ldr	r2, [pc, #468]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b73      	ldr	r3, [pc, #460]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a72      	ldr	r2, [pc, #456]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xcc>
 8005148:	4b6f      	ldr	r3, [pc, #444]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a6e      	ldr	r2, [pc, #440]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6b      	ldr	r2, [pc, #428]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fc fcdc 	bl	8001b24 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005170:	f7fc fcd8 	bl	8001b24 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e21f      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b61      	ldr	r3, [pc, #388]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xdc>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fc fcc8 	bl	8001b24 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005198:	f7fc fcc4 	bl	8001b24 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e20b      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x104>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d06f      	beq.n	80052a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051c6:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d017      	beq.n	8005202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051d2:	4b4d      	ldr	r3, [pc, #308]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d105      	bne.n	80051ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051de:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d11c      	bne.n	8005230 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f6:	4b44      	ldr	r3, [pc, #272]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d116      	bne.n	8005230 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	4b41      	ldr	r3, [pc, #260]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_RCC_OscConfig+0x186>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e1d3      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4937      	ldr	r1, [pc, #220]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	e03a      	b.n	80052a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_RCC_OscConfig+0x278>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fc fc71 	bl	8001b24 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005246:	f7fc fc6d 	bl	8001b24 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1b4      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005264:	4b28      	ldr	r3, [pc, #160]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4925      	ldr	r1, [pc, #148]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]
 8005278:	e015      	b.n	80052a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527a:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x278>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc fc50 	bl	8001b24 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005288:	f7fc fc4c 	bl	8001b24 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e193      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d036      	beq.n	8005320 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <HAL_RCC_OscConfig+0x27c>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc fc30 	bl	8001b24 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052c8:	f7fc fc2c 	bl	8001b24 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e173      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_OscConfig+0x274>)
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x234>
 80052e6:	e01b      	b.n	8005320 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_RCC_OscConfig+0x27c>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ee:	f7fc fc19 	bl	8001b24 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	e00e      	b.n	8005314 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f6:	f7fc fc15 	bl	8001b24 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d907      	bls.n	8005314 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e15c      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
 8005308:	40023800 	.word	0x40023800
 800530c:	42470000 	.word	0x42470000
 8005310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005314:	4b8a      	ldr	r3, [pc, #552]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ea      	bne.n	80052f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8097 	beq.w	800545c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005332:	4b83      	ldr	r3, [pc, #524]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	4b7f      	ldr	r3, [pc, #508]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	4a7e      	ldr	r2, [pc, #504]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	; 0x40
 800534e:	4b7c      	ldr	r3, [pc, #496]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535e:	4b79      	ldr	r3, [pc, #484]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800536a:	4b76      	ldr	r3, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a75      	ldr	r2, [pc, #468]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005376:	f7fc fbd5 	bl	8001b24 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fc fbd1 	bl	8001b24 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e118      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	4b6c      	ldr	r3, [pc, #432]	; (8005544 <HAL_RCC_OscConfig+0x4b0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x31e>
 80053a4:	4b66      	ldr	r3, [pc, #408]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a8:	4a65      	ldr	r2, [pc, #404]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6713      	str	r3, [r2, #112]	; 0x70
 80053b0:	e01c      	b.n	80053ec <HAL_RCC_OscConfig+0x358>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x340>
 80053ba:	4b61      	ldr	r3, [pc, #388]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	4a60      	ldr	r2, [pc, #384]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053c0:	f043 0304 	orr.w	r3, r3, #4
 80053c4:	6713      	str	r3, [r2, #112]	; 0x70
 80053c6:	4b5e      	ldr	r3, [pc, #376]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	4a5d      	ldr	r2, [pc, #372]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	6713      	str	r3, [r2, #112]	; 0x70
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_OscConfig+0x358>
 80053d4:	4b5a      	ldr	r3, [pc, #360]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4a59      	ldr	r2, [pc, #356]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6713      	str	r3, [r2, #112]	; 0x70
 80053e0:	4b57      	ldr	r3, [pc, #348]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	4a56      	ldr	r2, [pc, #344]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80053e6:	f023 0304 	bic.w	r3, r3, #4
 80053ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d015      	beq.n	8005420 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fc fb96 	bl	8001b24 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fc:	f7fc fb92 	bl	8001b24 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0d7      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	4b4b      	ldr	r3, [pc, #300]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ee      	beq.n	80053fc <HAL_RCC_OscConfig+0x368>
 800541e:	e014      	b.n	800544a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fc fb80 	bl	8001b24 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fc fb7c 	bl	8001b24 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0c1      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	4b40      	ldr	r3, [pc, #256]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ee      	bne.n	8005428 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005450:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80ad 	beq.w	80055c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005466:	4b36      	ldr	r3, [pc, #216]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b08      	cmp	r3, #8
 8005470:	d060      	beq.n	8005534 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d145      	bne.n	8005506 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	4b33      	ldr	r3, [pc, #204]	; (8005548 <HAL_RCC_OscConfig+0x4b4>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fc fb50 	bl	8001b24 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005488:	f7fc fb4c 	bl	8001b24 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e093      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	071b      	lsls	r3, r3, #28
 80054d2:	491b      	ldr	r1, [pc, #108]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <HAL_RCC_OscConfig+0x4b4>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fc fb21 	bl	8001b24 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fc fb1d 	bl	8001b24 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e064      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x452>
 8005504:	e05c      	b.n	80055c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <HAL_RCC_OscConfig+0x4b4>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fc fb0a 	bl	8001b24 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005514:	f7fc fb06 	bl	8001b24 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e04d      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_RCC_OscConfig+0x4ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x480>
 8005532:	e045      	b.n	80055c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e040      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
 8005540:	40023800 	.word	0x40023800
 8005544:	40007000 	.word	0x40007000
 8005548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800554c:	4b1f      	ldr	r3, [pc, #124]	; (80055cc <HAL_RCC_OscConfig+0x538>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d030      	beq.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d129      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d122      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005584:	4293      	cmp	r3, r2
 8005586:	d119      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	3b01      	subs	r3, #1
 8005596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d10f      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800

080055d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e041      	b.n	8005666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fc f81a 	bl	8001630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fa96 	bl	8005b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d001      	beq.n	8005688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e04e      	b.n	8005726 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <HAL_TIM_Base_Start_IT+0xc4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d022      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d01d      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <HAL_TIM_Base_Start_IT+0xc8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	; (800573c <HAL_TIM_Base_Start_IT+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <HAL_TIM_Base_Start_IT+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <HAL_TIM_Base_Start_IT+0xd4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <HAL_TIM_Base_Start_IT+0xd8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0x80>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a18      	ldr	r2, [pc, #96]	; (800574c <HAL_TIM_Base_Start_IT+0xdc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d111      	bne.n	8005714 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b06      	cmp	r3, #6
 8005700:	d010      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005712:	e007      	b.n	8005724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40010400 	.word	0x40010400
 8005748:	40014000 	.word	0x40014000
 800574c:	40001800 	.word	0x40001800

08005750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b02      	cmp	r3, #2
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0202 	mvn.w	r2, #2
 800577c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9b5 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9a7 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9b8 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d122      	bne.n	8005800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d11b      	bne.n	8005800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0204 	mvn.w	r2, #4
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f98b 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f97d 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f98e 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b08      	cmp	r3, #8
 800580c:	d122      	bne.n	8005854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d11b      	bne.n	8005854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0208 	mvn.w	r2, #8
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2204      	movs	r2, #4
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f961 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f953 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f964 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b10      	cmp	r3, #16
 8005860:	d122      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b10      	cmp	r3, #16
 800586e:	d11b      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0210 	mvn.w	r2, #16
 8005878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2208      	movs	r2, #8
 800587e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f937 	bl	8005b02 <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f929 	bl	8005aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f93a 	bl	8005b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d10e      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d107      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0201 	mvn.w	r2, #1
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fe14 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b80      	cmp	r3, #128	; 0x80
 80058e0:	d10e      	bne.n	8005900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d107      	bne.n	8005900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fae0 	bl	8005ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d10e      	bne.n	800592c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d107      	bne.n	800592c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8ff 	bl	8005b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b20      	cmp	r3, #32
 8005938:	d10e      	bne.n	8005958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b20      	cmp	r3, #32
 8005946:	d107      	bne.n	8005958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0220 	mvn.w	r2, #32
 8005950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 faaa 	bl	8005eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIM_ConfigClockSource+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e0b4      	b.n	8005ae6 <HAL_TIM_ConfigClockSource+0x186>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800599a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b4:	d03e      	beq.n	8005a34 <HAL_TIM_ConfigClockSource+0xd4>
 80059b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ba:	f200 8087 	bhi.w	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c2:	f000 8086 	beq.w	8005ad2 <HAL_TIM_ConfigClockSource+0x172>
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d87f      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b70      	cmp	r3, #112	; 0x70
 80059ce:	d01a      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0xa6>
 80059d0:	2b70      	cmp	r3, #112	; 0x70
 80059d2:	d87b      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b60      	cmp	r3, #96	; 0x60
 80059d6:	d050      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x11a>
 80059d8:	2b60      	cmp	r3, #96	; 0x60
 80059da:	d877      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b50      	cmp	r3, #80	; 0x50
 80059de:	d03c      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0xfa>
 80059e0:	2b50      	cmp	r3, #80	; 0x50
 80059e2:	d873      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d058      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x13a>
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d86f      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b30      	cmp	r3, #48	; 0x30
 80059ee:	d064      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x15a>
 80059f0:	2b30      	cmp	r3, #48	; 0x30
 80059f2:	d86b      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d060      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x15a>
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d867      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05c      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x15a>
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d05a      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x15a>
 8005a04:	e062      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6899      	ldr	r1, [r3, #8]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f000 f9ad 	bl	8005d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	609a      	str	r2, [r3, #8]
      break;
 8005a32:	e04f      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6899      	ldr	r1, [r3, #8]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f000 f996 	bl	8005d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a56:	609a      	str	r2, [r3, #8]
      break;
 8005a58:	e03c      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 f90a 	bl	8005c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2150      	movs	r1, #80	; 0x50
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f963 	bl	8005d3e <TIM_ITRx_SetConfig>
      break;
 8005a78:	e02c      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6859      	ldr	r1, [r3, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f000 f929 	bl	8005cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2160      	movs	r1, #96	; 0x60
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f953 	bl	8005d3e <TIM_ITRx_SetConfig>
      break;
 8005a98:	e01c      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f000 f8ea 	bl	8005c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2140      	movs	r1, #64	; 0x40
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f943 	bl	8005d3e <TIM_ITRx_SetConfig>
      break;
 8005ab8:	e00c      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f000 f93a 	bl	8005d3e <TIM_ITRx_SetConfig>
      break;
 8005aca:	e003      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad0:	e000      	b.n	8005ad4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a40      	ldr	r2, [pc, #256]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5e:	d00f      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3d      	ldr	r2, [pc, #244]	; (8005c58 <TIM_Base_SetConfig+0x118>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3c      	ldr	r2, [pc, #240]	; (8005c5c <TIM_Base_SetConfig+0x11c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3b      	ldr	r2, [pc, #236]	; (8005c60 <TIM_Base_SetConfig+0x120>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a3a      	ldr	r2, [pc, #232]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d108      	bne.n	8005b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d02b      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d027      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <TIM_Base_SetConfig+0x118>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d023      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <TIM_Base_SetConfig+0x11c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01f      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <TIM_Base_SetConfig+0x120>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01b      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a29      	ldr	r2, [pc, #164]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d017      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a28      	ldr	r2, [pc, #160]	; (8005c68 <TIM_Base_SetConfig+0x128>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <TIM_Base_SetConfig+0x12c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00f      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <TIM_Base_SetConfig+0x130>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <TIM_Base_SetConfig+0x134>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d007      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a24      	ldr	r2, [pc, #144]	; (8005c78 <TIM_Base_SetConfig+0x138>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <TIM_Base_SetConfig+0x13c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d108      	bne.n	8005c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <TIM_Base_SetConfig+0x114>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_Base_SetConfig+0xf8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <TIM_Base_SetConfig+0x124>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d103      	bne.n	8005c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	615a      	str	r2, [r3, #20]
}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40010400 	.word	0x40010400
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800
 8005c74:	40001800 	.word	0x40001800
 8005c78:	40001c00 	.word	0x40001c00
 8005c7c:	40002000 	.word	0x40002000

08005c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0201 	bic.w	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f023 030a 	bic.w	r3, r3, #10
 8005cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b087      	sub	sp, #28
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0210 	bic.w	r2, r3, #16
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	031b      	lsls	r3, r3, #12
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f043 0307 	orr.w	r3, r3, #7
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	609a      	str	r2, [r3, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	609a      	str	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e05a      	b.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d022      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e18:	d01d      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d018      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00e      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d009      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a15      	ldr	r2, [pc, #84]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10c      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40010400 	.word	0x40010400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40001800 	.word	0x40001800

08005eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e03f      	b.n	8005f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fb fbbe 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2224      	movs	r2, #36	; 0x24
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fddb 	bl	8006ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08a      	sub	sp, #40	; 0x28
 8005f72:	af02      	add	r7, sp, #8
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d17c      	bne.n	8006088 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_UART_Transmit+0x2c>
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e075      	b.n	800608a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_UART_Transmit+0x3e>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e06e      	b.n	800608a <HAL_UART_Transmit+0x11c>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	; 0x21
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fc2:	f7fb fdaf 	bl	8001b24 <HAL_GetTick>
 8005fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fdc:	d108      	bne.n	8005ff0 <HAL_UART_Transmit+0x82>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d104      	bne.n	8005ff0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	e003      	b.n	8005ff8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006000:	e02a      	b.n	8006058 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2200      	movs	r2, #0
 800600a:	2180      	movs	r1, #128	; 0x80
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fb1f 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e036      	b.n	800608a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	3302      	adds	r3, #2
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e007      	b.n	800604a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	3301      	adds	r3, #1
 8006048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1cf      	bne.n	8006002 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	2140      	movs	r1, #64	; 0x40
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 faef 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e006      	b.n	800608a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d11d      	bne.n	80060e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_UART_Receive_IT+0x26>
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e016      	b.n	80060ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Receive_IT+0x38>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e00f      	b.n	80060ea <HAL_UART_Receive_IT+0x58>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	461a      	mov	r2, r3
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fb24 	bl	800672c <UART_Start_Receive_IT>
 80060e4:	4603      	mov	r3, r0
 80060e6:	e000      	b.n	80060ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060e8:	2302      	movs	r3, #2
  }
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0ba      	sub	sp, #232	; 0xe8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800611a:	2300      	movs	r3, #0
 800611c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_UART_IRQHandler+0x66>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fc03 	bl	800695e <UART_Receive_IT>
      return;
 8006158:	e256      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800615a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80de 	beq.w	8006320 <HAL_UART_IRQHandler+0x22c>
 8006164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80d1 	beq.w	8006320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_UART_IRQHandler+0xae>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_UART_IRQHandler+0xd2>
 80061ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0202 	orr.w	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <HAL_UART_IRQHandler+0xf6>
 80061d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f043 0204 	orr.w	r2, r3, #4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d011      	beq.n	800621a <HAL_UART_IRQHandler+0x126>
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0208 	orr.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 81ed 	beq.w	80065fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_UART_IRQHandler+0x14e>
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fb8e 	bl	800695e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <HAL_UART_IRQHandler+0x17a>
 8006266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d04f      	beq.n	800630e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa96 	bl	80067a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d141      	bne.n	8006306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1d9      	bne.n	8006282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	4a7d      	ldr	r2, [pc, #500]	; (80064d0 <HAL_UART_IRQHandler+0x3dc>)
 80062dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fb fdab 	bl	8001e3e <HAL_DMA_Abort_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	e00e      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f990 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	e00a      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f98c 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	e006      	b.n	800631c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f988 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800631a:	e170      	b.n	80065fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	bf00      	nop
    return;
 800631e:	e16e      	b.n	80065fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 814a 	bne.w	80065be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8143 	beq.w	80065be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 813c 	beq.w	80065be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	60bb      	str	r3, [r7, #8]
 800635a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	f040 80b4 	bne.w	80064d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8140 	beq.w	8006602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800638a:	429a      	cmp	r2, r3
 800638c:	f080 8139 	bcs.w	8006602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a2:	f000 8088 	beq.w	80064b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330c      	adds	r3, #12
 80063ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1d9      	bne.n	80063a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800641a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800641e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e1      	bne.n	80063f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800643e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006498:	65ba      	str	r2, [r7, #88]	; 0x58
 800649a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800649e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e3      	bne.n	8006474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fb fc54 	bl	8001d5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8b6 	bl	8006638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064cc:	e099      	b.n	8006602 <HAL_UART_IRQHandler+0x50e>
 80064ce:	bf00      	nop
 80064d0:	08006867 	.word	0x08006867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 808b 	beq.w	8006606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8086 	beq.w	8006606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800651e:	647a      	str	r2, [r7, #68]	; 0x44
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	623b      	str	r3, [r7, #32]
   return(result);
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f023 0301 	bic.w	r3, r3, #1
 8006548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006556:	633a      	str	r2, [r7, #48]	; 0x30
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60fb      	str	r3, [r7, #12]
   return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	69b9      	ldr	r1, [r7, #24]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	617b      	str	r3, [r7, #20]
   return(result);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e3      	bne.n	8006578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f83e 	bl	8006638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065bc:	e023      	b.n	8006606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_UART_IRQHandler+0x4ea>
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f959 	bl	800688e <UART_Transmit_IT>
    return;
 80065dc:	e014      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_UART_IRQHandler+0x514>
 80065ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f999 	bl	800692e <UART_EndTransmit_IT>
    return;
 80065fc:	e004      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
    return;
 80065fe:	bf00      	nop
 8006600:	e002      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
      return;
 8006602:	bf00      	nop
 8006604:	e000      	b.n	8006608 <HAL_UART_IRQHandler+0x514>
      return;
 8006606:	bf00      	nop
  }
}
 8006608:	37e8      	adds	r7, #232	; 0xe8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b090      	sub	sp, #64	; 0x40
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006660:	e050      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d04c      	beq.n	8006704 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <UART_WaitOnFlagUntilTimeout+0x30>
 8006670:	f7fb fa58 	bl	8001b24 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800667c:	429a      	cmp	r2, r3
 800667e:	d241      	bcs.n	8006704 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	330c      	adds	r3, #12
 800669e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066a0:	637a      	str	r2, [r7, #52]	; 0x34
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e5      	bne.n	8006680 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3314      	adds	r3, #20
 80066ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3314      	adds	r3, #20
 80066d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d4:	623a      	str	r2, [r7, #32]
 80066d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69f9      	ldr	r1, [r7, #28]
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e00f      	b.n	8006724 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4013      	ands	r3, r2
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	429a      	cmp	r2, r3
 8006712:	bf0c      	ite	eq
 8006714:	2301      	moveq	r3, #1
 8006716:	2300      	movne	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	429a      	cmp	r2, r3
 8006720:	d09f      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3740      	adds	r7, #64	; 0x40
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2222      	movs	r2, #34	; 0x22
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006770:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0220 	orr.w	r2, r2, #32
 8006790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b095      	sub	sp, #84	; 0x54
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	330c      	adds	r3, #12
 80067c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067c8:	643a      	str	r2, [r7, #64]	; 0x40
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e5      	bne.n	80067a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3314      	adds	r3, #20
 80067fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e5      	bne.n	80067dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	2b01      	cmp	r3, #1
 8006816:	d119      	bne.n	800684c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60bb      	str	r3, [r7, #8]
   return(result);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006838:	61ba      	str	r2, [r7, #24]
 800683a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	613b      	str	r3, [r7, #16]
   return(result);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e5      	bne.n	8006818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
}
 800685a:	bf00      	nop
 800685c:	3754      	adds	r7, #84	; 0x54
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff fecf 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b21      	cmp	r3, #33	; 0x21
 80068a0:	d13e      	bne.n	8006920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d114      	bne.n	80068d6 <UART_Transmit_IT+0x48>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d110      	bne.n	80068d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	621a      	str	r2, [r3, #32]
 80068d4:	e008      	b.n	80068e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	1c59      	adds	r1, r3, #1
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6211      	str	r1, [r2, #32]
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4619      	mov	r1, r3
 80068f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10f      	bne.n	800691c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800690a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
  }
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff fe5e 	bl	8006610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08c      	sub	sp, #48	; 0x30
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b22      	cmp	r3, #34	; 0x22
 8006970:	f040 80ab 	bne.w	8006aca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d117      	bne.n	80069ae <UART_Receive_IT+0x50>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d113      	bne.n	80069ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699c:	b29a      	uxth	r2, r3
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
 80069ac:	e026      	b.n	80069fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d007      	beq.n	80069d2 <UART_Receive_IT+0x74>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <UART_Receive_IT+0x82>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	e008      	b.n	80069f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d15a      	bne.n	8006ac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0220 	bic.w	r2, r2, #32
 8006a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d135      	bne.n	8006abc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	613b      	str	r3, [r7, #16]
   return(result);
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f023 0310 	bic.w	r3, r3, #16
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	623a      	str	r2, [r7, #32]
 8006a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	69f9      	ldr	r1, [r7, #28]
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d10a      	bne.n	8006aae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff fdbf 	bl	8006638 <HAL_UARTEx_RxEventCallback>
 8006aba:	e002      	b.n	8006ac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7fa fa0f 	bl	8000ee0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e002      	b.n	8006acc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e000      	b.n	8006acc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
  }
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3730      	adds	r7, #48	; 0x30
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	b09f      	sub	sp, #124	; 0x7c
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	68d9      	ldr	r1, [r3, #12]
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	ea40 0301 	orr.w	r3, r0, r1
 8006af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b18:	f021 010c 	bic.w	r1, r1, #12
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b22:	430b      	orrs	r3, r1
 8006b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	6999      	ldr	r1, [r3, #24]
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	ea40 0301 	orr.w	r3, r0, r1
 8006b3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4bc5      	ldr	r3, [pc, #788]	; (8006e58 <UART_SetConfig+0x384>)
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d004      	beq.n	8006b52 <UART_SetConfig+0x7e>
 8006b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	4bc3      	ldr	r3, [pc, #780]	; (8006e5c <UART_SetConfig+0x388>)
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d103      	bne.n	8006b5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b52:	f7fe f8d9 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
 8006b56:	6778      	str	r0, [r7, #116]	; 0x74
 8006b58:	e002      	b.n	8006b60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b5a:	f7fe f8c1 	bl	8004ce0 <HAL_RCC_GetPCLK1Freq>
 8006b5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	f040 80b6 	bne.w	8006cd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6e:	461c      	mov	r4, r3
 8006b70:	f04f 0500 	mov.w	r5, #0
 8006b74:	4622      	mov	r2, r4
 8006b76:	462b      	mov	r3, r5
 8006b78:	1891      	adds	r1, r2, r2
 8006b7a:	6439      	str	r1, [r7, #64]	; 0x40
 8006b7c:	415b      	adcs	r3, r3
 8006b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b84:	1912      	adds	r2, r2, r4
 8006b86:	eb45 0303 	adc.w	r3, r5, r3
 8006b8a:	f04f 0000 	mov.w	r0, #0
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	00d9      	lsls	r1, r3, #3
 8006b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b98:	00d0      	lsls	r0, r2, #3
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	1911      	adds	r1, r2, r4
 8006ba0:	6639      	str	r1, [r7, #96]	; 0x60
 8006ba2:	416b      	adcs	r3, r5
 8006ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	1891      	adds	r1, r2, r2
 8006bb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bb4:	415b      	adcs	r3, r3
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006bc0:	f7fa f812 	bl	8000be8 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4ba5      	ldr	r3, [pc, #660]	; (8006e60 <UART_SetConfig+0x38c>)
 8006bca:	fba3 2302 	umull	r2, r3, r3, r2
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	011e      	lsls	r6, r3, #4
 8006bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd4:	461c      	mov	r4, r3
 8006bd6:	f04f 0500 	mov.w	r5, #0
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	6339      	str	r1, [r7, #48]	; 0x30
 8006be2:	415b      	adcs	r3, r3
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
 8006be6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bea:	1912      	adds	r2, r2, r4
 8006bec:	eb45 0303 	adc.w	r3, r5, r3
 8006bf0:	f04f 0000 	mov.w	r0, #0
 8006bf4:	f04f 0100 	mov.w	r1, #0
 8006bf8:	00d9      	lsls	r1, r3, #3
 8006bfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bfe:	00d0      	lsls	r0, r2, #3
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	1911      	adds	r1, r2, r4
 8006c06:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c08:	416b      	adcs	r3, r5
 8006c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	461a      	mov	r2, r3
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	1891      	adds	r1, r2, r2
 8006c18:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c1a:	415b      	adcs	r3, r3
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c26:	f7f9 ffdf 	bl	8000be8 <__aeabi_uldivmod>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4b8c      	ldr	r3, [pc, #560]	; (8006e60 <UART_SetConfig+0x38c>)
 8006c30:	fba3 1302 	umull	r1, r3, r3, r2
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	2164      	movs	r1, #100	; 0x64
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	3332      	adds	r3, #50	; 0x32
 8006c42:	4a87      	ldr	r2, [pc, #540]	; (8006e60 <UART_SetConfig+0x38c>)
 8006c44:	fba2 2303 	umull	r2, r3, r2, r3
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c50:	441e      	add	r6, r3
 8006c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c54:	4618      	mov	r0, r3
 8006c56:	f04f 0100 	mov.w	r1, #0
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	1894      	adds	r4, r2, r2
 8006c60:	623c      	str	r4, [r7, #32]
 8006c62:	415b      	adcs	r3, r3
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
 8006c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c6a:	1812      	adds	r2, r2, r0
 8006c6c:	eb41 0303 	adc.w	r3, r1, r3
 8006c70:	f04f 0400 	mov.w	r4, #0
 8006c74:	f04f 0500 	mov.w	r5, #0
 8006c78:	00dd      	lsls	r5, r3, #3
 8006c7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c7e:	00d4      	lsls	r4, r2, #3
 8006c80:	4622      	mov	r2, r4
 8006c82:	462b      	mov	r3, r5
 8006c84:	1814      	adds	r4, r2, r0
 8006c86:	653c      	str	r4, [r7, #80]	; 0x50
 8006c88:	414b      	adcs	r3, r1
 8006c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	1891      	adds	r1, r2, r2
 8006c98:	61b9      	str	r1, [r7, #24]
 8006c9a:	415b      	adcs	r3, r3
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ca2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ca6:	f7f9 ff9f 	bl	8000be8 <__aeabi_uldivmod>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4b6c      	ldr	r3, [pc, #432]	; (8006e60 <UART_SetConfig+0x38c>)
 8006cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	2164      	movs	r1, #100	; 0x64
 8006cb8:	fb01 f303 	mul.w	r3, r1, r3
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	3332      	adds	r3, #50	; 0x32
 8006cc2:	4a67      	ldr	r2, [pc, #412]	; (8006e60 <UART_SetConfig+0x38c>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	f003 0207 	and.w	r2, r3, #7
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4432      	add	r2, r6
 8006cd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cd6:	e0b9      	b.n	8006e4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cda:	461c      	mov	r4, r3
 8006cdc:	f04f 0500 	mov.w	r5, #0
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	1891      	adds	r1, r2, r2
 8006ce6:	6139      	str	r1, [r7, #16]
 8006ce8:	415b      	adcs	r3, r3
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cf0:	1912      	adds	r2, r2, r4
 8006cf2:	eb45 0303 	adc.w	r3, r5, r3
 8006cf6:	f04f 0000 	mov.w	r0, #0
 8006cfa:	f04f 0100 	mov.w	r1, #0
 8006cfe:	00d9      	lsls	r1, r3, #3
 8006d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d04:	00d0      	lsls	r0, r2, #3
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	eb12 0804 	adds.w	r8, r2, r4
 8006d0e:	eb43 0905 	adc.w	r9, r3, r5
 8006d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f04f 0100 	mov.w	r1, #0
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	008b      	lsls	r3, r1, #2
 8006d26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d2a:	0082      	lsls	r2, r0, #2
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	4649      	mov	r1, r9
 8006d30:	f7f9 ff5a 	bl	8000be8 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4b49      	ldr	r3, [pc, #292]	; (8006e60 <UART_SetConfig+0x38c>)
 8006d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	011e      	lsls	r6, r3, #4
 8006d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d44:	4618      	mov	r0, r3
 8006d46:	f04f 0100 	mov.w	r1, #0
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	1894      	adds	r4, r2, r2
 8006d50:	60bc      	str	r4, [r7, #8]
 8006d52:	415b      	adcs	r3, r3
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d5a:	1812      	adds	r2, r2, r0
 8006d5c:	eb41 0303 	adc.w	r3, r1, r3
 8006d60:	f04f 0400 	mov.w	r4, #0
 8006d64:	f04f 0500 	mov.w	r5, #0
 8006d68:	00dd      	lsls	r5, r3, #3
 8006d6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d6e:	00d4      	lsls	r4, r2, #3
 8006d70:	4622      	mov	r2, r4
 8006d72:	462b      	mov	r3, r5
 8006d74:	1814      	adds	r4, r2, r0
 8006d76:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d78:	414b      	adcs	r3, r1
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f04f 0100 	mov.w	r1, #0
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	008b      	lsls	r3, r1, #2
 8006d90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d94:	0082      	lsls	r2, r0, #2
 8006d96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d9a:	f7f9 ff25 	bl	8000be8 <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b2f      	ldr	r3, [pc, #188]	; (8006e60 <UART_SetConfig+0x38c>)
 8006da4:	fba3 1302 	umull	r1, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2164      	movs	r1, #100	; 0x64
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	3332      	adds	r3, #50	; 0x32
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <UART_SetConfig+0x38c>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc2:	441e      	add	r6, r3
 8006dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f04f 0100 	mov.w	r1, #0
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	1894      	adds	r4, r2, r2
 8006dd2:	603c      	str	r4, [r7, #0]
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ddc:	1812      	adds	r2, r2, r0
 8006dde:	eb41 0303 	adc.w	r3, r1, r3
 8006de2:	f04f 0400 	mov.w	r4, #0
 8006de6:	f04f 0500 	mov.w	r5, #0
 8006dea:	00dd      	lsls	r5, r3, #3
 8006dec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006df0:	00d4      	lsls	r4, r2, #3
 8006df2:	4622      	mov	r2, r4
 8006df4:	462b      	mov	r3, r5
 8006df6:	eb12 0a00 	adds.w	sl, r2, r0
 8006dfa:	eb43 0b01 	adc.w	fp, r3, r1
 8006dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f04f 0100 	mov.w	r1, #0
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	008b      	lsls	r3, r1, #2
 8006e12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e16:	0082      	lsls	r2, r0, #2
 8006e18:	4650      	mov	r0, sl
 8006e1a:	4659      	mov	r1, fp
 8006e1c:	f7f9 fee4 	bl	8000be8 <__aeabi_uldivmod>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <UART_SetConfig+0x38c>)
 8006e26:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	2164      	movs	r1, #100	; 0x64
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	3332      	adds	r3, #50	; 0x32
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <UART_SetConfig+0x38c>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4432      	add	r2, r6
 8006e4a:	609a      	str	r2, [r3, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	377c      	adds	r7, #124	; 0x7c
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40011400 	.word	0x40011400
 8006e60:	51eb851f 	.word	0x51eb851f

08006e64 <__errno>:
 8006e64:	4b01      	ldr	r3, [pc, #4]	; (8006e6c <__errno+0x8>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000010 	.word	0x20000010

08006e70 <__libc_init_array>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	4d0d      	ldr	r5, [pc, #52]	; (8006ea8 <__libc_init_array+0x38>)
 8006e74:	4c0d      	ldr	r4, [pc, #52]	; (8006eac <__libc_init_array+0x3c>)
 8006e76:	1b64      	subs	r4, r4, r5
 8006e78:	10a4      	asrs	r4, r4, #2
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	42a6      	cmp	r6, r4
 8006e7e:	d109      	bne.n	8006e94 <__libc_init_array+0x24>
 8006e80:	4d0b      	ldr	r5, [pc, #44]	; (8006eb0 <__libc_init_array+0x40>)
 8006e82:	4c0c      	ldr	r4, [pc, #48]	; (8006eb4 <__libc_init_array+0x44>)
 8006e84:	f002 fd7e 	bl	8009984 <_init>
 8006e88:	1b64      	subs	r4, r4, r5
 8006e8a:	10a4      	asrs	r4, r4, #2
 8006e8c:	2600      	movs	r6, #0
 8006e8e:	42a6      	cmp	r6, r4
 8006e90:	d105      	bne.n	8006e9e <__libc_init_array+0x2e>
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e98:	4798      	blx	r3
 8006e9a:	3601      	adds	r6, #1
 8006e9c:	e7ee      	b.n	8006e7c <__libc_init_array+0xc>
 8006e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea2:	4798      	blx	r3
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	e7f2      	b.n	8006e8e <__libc_init_array+0x1e>
 8006ea8:	08009eb4 	.word	0x08009eb4
 8006eac:	08009eb4 	.word	0x08009eb4
 8006eb0:	08009eb4 	.word	0x08009eb4
 8006eb4:	08009eb8 	.word	0x08009eb8

08006eb8 <memset>:
 8006eb8:	4402      	add	r2, r0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d100      	bne.n	8006ec2 <memset+0xa>
 8006ec0:	4770      	bx	lr
 8006ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec6:	e7f9      	b.n	8006ebc <memset+0x4>

08006ec8 <__cvt>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	ec55 4b10 	vmov	r4, r5, d0
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	460e      	mov	r6, r1
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	bfbb      	ittet	lt
 8006eda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ede:	461d      	movlt	r5, r3
 8006ee0:	2300      	movge	r3, #0
 8006ee2:	232d      	movlt	r3, #45	; 0x2d
 8006ee4:	700b      	strb	r3, [r1, #0]
 8006ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ee8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006eec:	4691      	mov	r9, r2
 8006eee:	f023 0820 	bic.w	r8, r3, #32
 8006ef2:	bfbc      	itt	lt
 8006ef4:	4622      	movlt	r2, r4
 8006ef6:	4614      	movlt	r4, r2
 8006ef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006efc:	d005      	beq.n	8006f0a <__cvt+0x42>
 8006efe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f02:	d100      	bne.n	8006f06 <__cvt+0x3e>
 8006f04:	3601      	adds	r6, #1
 8006f06:	2102      	movs	r1, #2
 8006f08:	e000      	b.n	8006f0c <__cvt+0x44>
 8006f0a:	2103      	movs	r1, #3
 8006f0c:	ab03      	add	r3, sp, #12
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	ab02      	add	r3, sp, #8
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	ec45 4b10 	vmov	d0, r4, r5
 8006f18:	4653      	mov	r3, sl
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	f000 fe18 	bl	8007b50 <_dtoa_r>
 8006f20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f24:	4607      	mov	r7, r0
 8006f26:	d102      	bne.n	8006f2e <__cvt+0x66>
 8006f28:	f019 0f01 	tst.w	r9, #1
 8006f2c:	d022      	beq.n	8006f74 <__cvt+0xac>
 8006f2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f32:	eb07 0906 	add.w	r9, r7, r6
 8006f36:	d110      	bne.n	8006f5a <__cvt+0x92>
 8006f38:	783b      	ldrb	r3, [r7, #0]
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	d10a      	bne.n	8006f54 <__cvt+0x8c>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2300      	movs	r3, #0
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7f9 fddf 	bl	8000b08 <__aeabi_dcmpeq>
 8006f4a:	b918      	cbnz	r0, 8006f54 <__cvt+0x8c>
 8006f4c:	f1c6 0601 	rsb	r6, r6, #1
 8006f50:	f8ca 6000 	str.w	r6, [sl]
 8006f54:	f8da 3000 	ldr.w	r3, [sl]
 8006f58:	4499      	add	r9, r3
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8006f66:	b108      	cbz	r0, 8006f6c <__cvt+0xa4>
 8006f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f6c:	2230      	movs	r2, #48	; 0x30
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	454b      	cmp	r3, r9
 8006f72:	d307      	bcc.n	8006f84 <__cvt+0xbc>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f78:	1bdb      	subs	r3, r3, r7
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	b004      	add	sp, #16
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	1c59      	adds	r1, r3, #1
 8006f86:	9103      	str	r1, [sp, #12]
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	e7f0      	b.n	8006f6e <__cvt+0xa6>

08006f8c <__exponent>:
 8006f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2900      	cmp	r1, #0
 8006f92:	bfb8      	it	lt
 8006f94:	4249      	neglt	r1, r1
 8006f96:	f803 2b02 	strb.w	r2, [r3], #2
 8006f9a:	bfb4      	ite	lt
 8006f9c:	222d      	movlt	r2, #45	; 0x2d
 8006f9e:	222b      	movge	r2, #43	; 0x2b
 8006fa0:	2909      	cmp	r1, #9
 8006fa2:	7042      	strb	r2, [r0, #1]
 8006fa4:	dd2a      	ble.n	8006ffc <__exponent+0x70>
 8006fa6:	f10d 0407 	add.w	r4, sp, #7
 8006faa:	46a4      	mov	ip, r4
 8006fac:	270a      	movs	r7, #10
 8006fae:	46a6      	mov	lr, r4
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fb6:	fb07 1516 	mls	r5, r7, r6, r1
 8006fba:	3530      	adds	r5, #48	; 0x30
 8006fbc:	2a63      	cmp	r2, #99	; 0x63
 8006fbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	dcf1      	bgt.n	8006fae <__exponent+0x22>
 8006fca:	3130      	adds	r1, #48	; 0x30
 8006fcc:	f1ae 0502 	sub.w	r5, lr, #2
 8006fd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fd4:	1c44      	adds	r4, r0, #1
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4561      	cmp	r1, ip
 8006fda:	d30a      	bcc.n	8006ff2 <__exponent+0x66>
 8006fdc:	f10d 0209 	add.w	r2, sp, #9
 8006fe0:	eba2 020e 	sub.w	r2, r2, lr
 8006fe4:	4565      	cmp	r5, ip
 8006fe6:	bf88      	it	hi
 8006fe8:	2200      	movhi	r2, #0
 8006fea:	4413      	add	r3, r2
 8006fec:	1a18      	subs	r0, r3, r0
 8006fee:	b003      	add	sp, #12
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ff6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ffa:	e7ed      	b.n	8006fd8 <__exponent+0x4c>
 8006ffc:	2330      	movs	r3, #48	; 0x30
 8006ffe:	3130      	adds	r1, #48	; 0x30
 8007000:	7083      	strb	r3, [r0, #2]
 8007002:	70c1      	strb	r1, [r0, #3]
 8007004:	1d03      	adds	r3, r0, #4
 8007006:	e7f1      	b.n	8006fec <__exponent+0x60>

08007008 <_printf_float>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	ed2d 8b02 	vpush	{d8}
 8007010:	b08d      	sub	sp, #52	; 0x34
 8007012:	460c      	mov	r4, r1
 8007014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007018:	4616      	mov	r6, r2
 800701a:	461f      	mov	r7, r3
 800701c:	4605      	mov	r5, r0
 800701e:	f001 fd3b 	bl	8008a98 <_localeconv_r>
 8007022:	f8d0 a000 	ldr.w	sl, [r0]
 8007026:	4650      	mov	r0, sl
 8007028:	f7f9 f8f2 	bl	8000210 <strlen>
 800702c:	2300      	movs	r3, #0
 800702e:	930a      	str	r3, [sp, #40]	; 0x28
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	9305      	str	r3, [sp, #20]
 8007034:	f8d8 3000 	ldr.w	r3, [r8]
 8007038:	f894 b018 	ldrb.w	fp, [r4, #24]
 800703c:	3307      	adds	r3, #7
 800703e:	f023 0307 	bic.w	r3, r3, #7
 8007042:	f103 0208 	add.w	r2, r3, #8
 8007046:	f8c8 2000 	str.w	r2, [r8]
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007052:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007056:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800705a:	9307      	str	r3, [sp, #28]
 800705c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007060:	ee08 0a10 	vmov	s16, r0
 8007064:	4b9f      	ldr	r3, [pc, #636]	; (80072e4 <_printf_float+0x2dc>)
 8007066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	f7f9 fd7d 	bl	8000b6c <__aeabi_dcmpun>
 8007072:	bb88      	cbnz	r0, 80070d8 <_printf_float+0xd0>
 8007074:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007078:	4b9a      	ldr	r3, [pc, #616]	; (80072e4 <_printf_float+0x2dc>)
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	f7f9 fd57 	bl	8000b30 <__aeabi_dcmple>
 8007082:	bb48      	cbnz	r0, 80070d8 <_printf_float+0xd0>
 8007084:	2200      	movs	r2, #0
 8007086:	2300      	movs	r3, #0
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 fd46 	bl	8000b1c <__aeabi_dcmplt>
 8007090:	b110      	cbz	r0, 8007098 <_printf_float+0x90>
 8007092:	232d      	movs	r3, #45	; 0x2d
 8007094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007098:	4b93      	ldr	r3, [pc, #588]	; (80072e8 <_printf_float+0x2e0>)
 800709a:	4894      	ldr	r0, [pc, #592]	; (80072ec <_printf_float+0x2e4>)
 800709c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070a0:	bf94      	ite	ls
 80070a2:	4698      	movls	r8, r3
 80070a4:	4680      	movhi	r8, r0
 80070a6:	2303      	movs	r3, #3
 80070a8:	6123      	str	r3, [r4, #16]
 80070aa:	9b05      	ldr	r3, [sp, #20]
 80070ac:	f023 0204 	bic.w	r2, r3, #4
 80070b0:	6022      	str	r2, [r4, #0]
 80070b2:	f04f 0900 	mov.w	r9, #0
 80070b6:	9700      	str	r7, [sp, #0]
 80070b8:	4633      	mov	r3, r6
 80070ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f9d8 	bl	8007474 <_printf_common>
 80070c4:	3001      	adds	r0, #1
 80070c6:	f040 8090 	bne.w	80071ea <_printf_float+0x1e2>
 80070ca:	f04f 30ff 	mov.w	r0, #4294967295
 80070ce:	b00d      	add	sp, #52	; 0x34
 80070d0:	ecbd 8b02 	vpop	{d8}
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 fd44 	bl	8000b6c <__aeabi_dcmpun>
 80070e4:	b140      	cbz	r0, 80070f8 <_printf_float+0xf0>
 80070e6:	464b      	mov	r3, r9
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfbc      	itt	lt
 80070ec:	232d      	movlt	r3, #45	; 0x2d
 80070ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070f2:	487f      	ldr	r0, [pc, #508]	; (80072f0 <_printf_float+0x2e8>)
 80070f4:	4b7f      	ldr	r3, [pc, #508]	; (80072f4 <_printf_float+0x2ec>)
 80070f6:	e7d1      	b.n	800709c <_printf_float+0x94>
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070fe:	9206      	str	r2, [sp, #24]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	d13f      	bne.n	8007184 <_printf_float+0x17c>
 8007104:	2306      	movs	r3, #6
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	6861      	ldr	r1, [r4, #4]
 800710c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007110:	2300      	movs	r3, #0
 8007112:	9303      	str	r3, [sp, #12]
 8007114:	ab0a      	add	r3, sp, #40	; 0x28
 8007116:	e9cd b301 	strd	fp, r3, [sp, #4]
 800711a:	ab09      	add	r3, sp, #36	; 0x24
 800711c:	ec49 8b10 	vmov	d0, r8, r9
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	6022      	str	r2, [r4, #0]
 8007124:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007128:	4628      	mov	r0, r5
 800712a:	f7ff fecd 	bl	8006ec8 <__cvt>
 800712e:	9b06      	ldr	r3, [sp, #24]
 8007130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007132:	2b47      	cmp	r3, #71	; 0x47
 8007134:	4680      	mov	r8, r0
 8007136:	d108      	bne.n	800714a <_printf_float+0x142>
 8007138:	1cc8      	adds	r0, r1, #3
 800713a:	db02      	blt.n	8007142 <_printf_float+0x13a>
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	4299      	cmp	r1, r3
 8007140:	dd41      	ble.n	80071c6 <_printf_float+0x1be>
 8007142:	f1ab 0b02 	sub.w	fp, fp, #2
 8007146:	fa5f fb8b 	uxtb.w	fp, fp
 800714a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800714e:	d820      	bhi.n	8007192 <_printf_float+0x18a>
 8007150:	3901      	subs	r1, #1
 8007152:	465a      	mov	r2, fp
 8007154:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007158:	9109      	str	r1, [sp, #36]	; 0x24
 800715a:	f7ff ff17 	bl	8006f8c <__exponent>
 800715e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007160:	1813      	adds	r3, r2, r0
 8007162:	2a01      	cmp	r2, #1
 8007164:	4681      	mov	r9, r0
 8007166:	6123      	str	r3, [r4, #16]
 8007168:	dc02      	bgt.n	8007170 <_printf_float+0x168>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	07d2      	lsls	r2, r2, #31
 800716e:	d501      	bpl.n	8007174 <_printf_float+0x16c>
 8007170:	3301      	adds	r3, #1
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007178:	2b00      	cmp	r3, #0
 800717a:	d09c      	beq.n	80070b6 <_printf_float+0xae>
 800717c:	232d      	movs	r3, #45	; 0x2d
 800717e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007182:	e798      	b.n	80070b6 <_printf_float+0xae>
 8007184:	9a06      	ldr	r2, [sp, #24]
 8007186:	2a47      	cmp	r2, #71	; 0x47
 8007188:	d1be      	bne.n	8007108 <_printf_float+0x100>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1bc      	bne.n	8007108 <_printf_float+0x100>
 800718e:	2301      	movs	r3, #1
 8007190:	e7b9      	b.n	8007106 <_printf_float+0xfe>
 8007192:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007196:	d118      	bne.n	80071ca <_printf_float+0x1c2>
 8007198:	2900      	cmp	r1, #0
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	dd0b      	ble.n	80071b6 <_printf_float+0x1ae>
 800719e:	6121      	str	r1, [r4, #16]
 80071a0:	b913      	cbnz	r3, 80071a8 <_printf_float+0x1a0>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	07d0      	lsls	r0, r2, #31
 80071a6:	d502      	bpl.n	80071ae <_printf_float+0x1a6>
 80071a8:	3301      	adds	r3, #1
 80071aa:	440b      	add	r3, r1
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80071b0:	f04f 0900 	mov.w	r9, #0
 80071b4:	e7de      	b.n	8007174 <_printf_float+0x16c>
 80071b6:	b913      	cbnz	r3, 80071be <_printf_float+0x1b6>
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	07d2      	lsls	r2, r2, #31
 80071bc:	d501      	bpl.n	80071c2 <_printf_float+0x1ba>
 80071be:	3302      	adds	r3, #2
 80071c0:	e7f4      	b.n	80071ac <_printf_float+0x1a4>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e7f2      	b.n	80071ac <_printf_float+0x1a4>
 80071c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071cc:	4299      	cmp	r1, r3
 80071ce:	db05      	blt.n	80071dc <_printf_float+0x1d4>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	6121      	str	r1, [r4, #16]
 80071d4:	07d8      	lsls	r0, r3, #31
 80071d6:	d5ea      	bpl.n	80071ae <_printf_float+0x1a6>
 80071d8:	1c4b      	adds	r3, r1, #1
 80071da:	e7e7      	b.n	80071ac <_printf_float+0x1a4>
 80071dc:	2900      	cmp	r1, #0
 80071de:	bfd4      	ite	le
 80071e0:	f1c1 0202 	rsble	r2, r1, #2
 80071e4:	2201      	movgt	r2, #1
 80071e6:	4413      	add	r3, r2
 80071e8:	e7e0      	b.n	80071ac <_printf_float+0x1a4>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	055a      	lsls	r2, r3, #21
 80071ee:	d407      	bmi.n	8007200 <_printf_float+0x1f8>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	4642      	mov	r2, r8
 80071f4:	4631      	mov	r1, r6
 80071f6:	4628      	mov	r0, r5
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	d12c      	bne.n	8007258 <_printf_float+0x250>
 80071fe:	e764      	b.n	80070ca <_printf_float+0xc2>
 8007200:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007204:	f240 80e0 	bls.w	80073c8 <_printf_float+0x3c0>
 8007208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800720c:	2200      	movs	r2, #0
 800720e:	2300      	movs	r3, #0
 8007210:	f7f9 fc7a 	bl	8000b08 <__aeabi_dcmpeq>
 8007214:	2800      	cmp	r0, #0
 8007216:	d034      	beq.n	8007282 <_printf_float+0x27a>
 8007218:	4a37      	ldr	r2, [pc, #220]	; (80072f8 <_printf_float+0x2f0>)
 800721a:	2301      	movs	r3, #1
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	f43f af51 	beq.w	80070ca <_printf_float+0xc2>
 8007228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722c:	429a      	cmp	r2, r3
 800722e:	db02      	blt.n	8007236 <_printf_float+0x22e>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	07d8      	lsls	r0, r3, #31
 8007234:	d510      	bpl.n	8007258 <_printf_float+0x250>
 8007236:	ee18 3a10 	vmov	r3, s16
 800723a:	4652      	mov	r2, sl
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af41 	beq.w	80070ca <_printf_float+0xc2>
 8007248:	f04f 0800 	mov.w	r8, #0
 800724c:	f104 091a 	add.w	r9, r4, #26
 8007250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007252:	3b01      	subs	r3, #1
 8007254:	4543      	cmp	r3, r8
 8007256:	dc09      	bgt.n	800726c <_printf_float+0x264>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	079b      	lsls	r3, r3, #30
 800725c:	f100 8105 	bmi.w	800746a <_printf_float+0x462>
 8007260:	68e0      	ldr	r0, [r4, #12]
 8007262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007264:	4298      	cmp	r0, r3
 8007266:	bfb8      	it	lt
 8007268:	4618      	movlt	r0, r3
 800726a:	e730      	b.n	80070ce <_printf_float+0xc6>
 800726c:	2301      	movs	r3, #1
 800726e:	464a      	mov	r2, r9
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	f43f af27 	beq.w	80070ca <_printf_float+0xc2>
 800727c:	f108 0801 	add.w	r8, r8, #1
 8007280:	e7e6      	b.n	8007250 <_printf_float+0x248>
 8007282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	dc39      	bgt.n	80072fc <_printf_float+0x2f4>
 8007288:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <_printf_float+0x2f0>)
 800728a:	2301      	movs	r3, #1
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f af19 	beq.w	80070ca <_printf_float+0xc2>
 8007298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800729c:	4313      	orrs	r3, r2
 800729e:	d102      	bne.n	80072a6 <_printf_float+0x29e>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	07d9      	lsls	r1, r3, #31
 80072a4:	d5d8      	bpl.n	8007258 <_printf_float+0x250>
 80072a6:	ee18 3a10 	vmov	r3, s16
 80072aa:	4652      	mov	r2, sl
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af09 	beq.w	80070ca <_printf_float+0xc2>
 80072b8:	f04f 0900 	mov.w	r9, #0
 80072bc:	f104 0a1a 	add.w	sl, r4, #26
 80072c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c2:	425b      	negs	r3, r3
 80072c4:	454b      	cmp	r3, r9
 80072c6:	dc01      	bgt.n	80072cc <_printf_float+0x2c4>
 80072c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ca:	e792      	b.n	80071f2 <_printf_float+0x1ea>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4652      	mov	r2, sl
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f aef7 	beq.w	80070ca <_printf_float+0xc2>
 80072dc:	f109 0901 	add.w	r9, r9, #1
 80072e0:	e7ee      	b.n	80072c0 <_printf_float+0x2b8>
 80072e2:	bf00      	nop
 80072e4:	7fefffff 	.word	0x7fefffff
 80072e8:	08009ad0 	.word	0x08009ad0
 80072ec:	08009ad4 	.word	0x08009ad4
 80072f0:	08009adc 	.word	0x08009adc
 80072f4:	08009ad8 	.word	0x08009ad8
 80072f8:	08009ae0 	.word	0x08009ae0
 80072fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007300:	429a      	cmp	r2, r3
 8007302:	bfa8      	it	ge
 8007304:	461a      	movge	r2, r3
 8007306:	2a00      	cmp	r2, #0
 8007308:	4691      	mov	r9, r2
 800730a:	dc37      	bgt.n	800737c <_printf_float+0x374>
 800730c:	f04f 0b00 	mov.w	fp, #0
 8007310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007314:	f104 021a 	add.w	r2, r4, #26
 8007318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	eba3 0309 	sub.w	r3, r3, r9
 8007320:	455b      	cmp	r3, fp
 8007322:	dc33      	bgt.n	800738c <_printf_float+0x384>
 8007324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007328:	429a      	cmp	r2, r3
 800732a:	db3b      	blt.n	80073a4 <_printf_float+0x39c>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	07da      	lsls	r2, r3, #31
 8007330:	d438      	bmi.n	80073a4 <_printf_float+0x39c>
 8007332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007334:	9b05      	ldr	r3, [sp, #20]
 8007336:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	eba2 0901 	sub.w	r9, r2, r1
 800733e:	4599      	cmp	r9, r3
 8007340:	bfa8      	it	ge
 8007342:	4699      	movge	r9, r3
 8007344:	f1b9 0f00 	cmp.w	r9, #0
 8007348:	dc35      	bgt.n	80073b6 <_printf_float+0x3ae>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007352:	f104 0a1a 	add.w	sl, r4, #26
 8007356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	eba3 0309 	sub.w	r3, r3, r9
 8007360:	4543      	cmp	r3, r8
 8007362:	f77f af79 	ble.w	8007258 <_printf_float+0x250>
 8007366:	2301      	movs	r3, #1
 8007368:	4652      	mov	r2, sl
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f aeaa 	beq.w	80070ca <_printf_float+0xc2>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	e7ec      	b.n	8007356 <_printf_float+0x34e>
 800737c:	4613      	mov	r3, r2
 800737e:	4631      	mov	r1, r6
 8007380:	4642      	mov	r2, r8
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	d1c0      	bne.n	800730c <_printf_float+0x304>
 800738a:	e69e      	b.n	80070ca <_printf_float+0xc2>
 800738c:	2301      	movs	r3, #1
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	9205      	str	r2, [sp, #20]
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f ae97 	beq.w	80070ca <_printf_float+0xc2>
 800739c:	9a05      	ldr	r2, [sp, #20]
 800739e:	f10b 0b01 	add.w	fp, fp, #1
 80073a2:	e7b9      	b.n	8007318 <_printf_float+0x310>
 80073a4:	ee18 3a10 	vmov	r3, s16
 80073a8:	4652      	mov	r2, sl
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b8      	blx	r7
 80073b0:	3001      	adds	r0, #1
 80073b2:	d1be      	bne.n	8007332 <_printf_float+0x32a>
 80073b4:	e689      	b.n	80070ca <_printf_float+0xc2>
 80073b6:	9a05      	ldr	r2, [sp, #20]
 80073b8:	464b      	mov	r3, r9
 80073ba:	4442      	add	r2, r8
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	d1c1      	bne.n	800734a <_printf_float+0x342>
 80073c6:	e680      	b.n	80070ca <_printf_float+0xc2>
 80073c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ca:	2a01      	cmp	r2, #1
 80073cc:	dc01      	bgt.n	80073d2 <_printf_float+0x3ca>
 80073ce:	07db      	lsls	r3, r3, #31
 80073d0:	d538      	bpl.n	8007444 <_printf_float+0x43c>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4642      	mov	r2, r8
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f ae74 	beq.w	80070ca <_printf_float+0xc2>
 80073e2:	ee18 3a10 	vmov	r3, s16
 80073e6:	4652      	mov	r2, sl
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	f43f ae6b 	beq.w	80070ca <_printf_float+0xc2>
 80073f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	f7f9 fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8007400:	b9d8      	cbnz	r0, 800743a <_printf_float+0x432>
 8007402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007404:	f108 0201 	add.w	r2, r8, #1
 8007408:	3b01      	subs	r3, #1
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	d10e      	bne.n	8007432 <_printf_float+0x42a>
 8007414:	e659      	b.n	80070ca <_printf_float+0xc2>
 8007416:	2301      	movs	r3, #1
 8007418:	4652      	mov	r2, sl
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f ae52 	beq.w	80070ca <_printf_float+0xc2>
 8007426:	f108 0801 	add.w	r8, r8, #1
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	3b01      	subs	r3, #1
 800742e:	4543      	cmp	r3, r8
 8007430:	dcf1      	bgt.n	8007416 <_printf_float+0x40e>
 8007432:	464b      	mov	r3, r9
 8007434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007438:	e6dc      	b.n	80071f4 <_printf_float+0x1ec>
 800743a:	f04f 0800 	mov.w	r8, #0
 800743e:	f104 0a1a 	add.w	sl, r4, #26
 8007442:	e7f2      	b.n	800742a <_printf_float+0x422>
 8007444:	2301      	movs	r3, #1
 8007446:	4642      	mov	r2, r8
 8007448:	e7df      	b.n	800740a <_printf_float+0x402>
 800744a:	2301      	movs	r3, #1
 800744c:	464a      	mov	r2, r9
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae38 	beq.w	80070ca <_printf_float+0xc2>
 800745a:	f108 0801 	add.w	r8, r8, #1
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007462:	1a5b      	subs	r3, r3, r1
 8007464:	4543      	cmp	r3, r8
 8007466:	dcf0      	bgt.n	800744a <_printf_float+0x442>
 8007468:	e6fa      	b.n	8007260 <_printf_float+0x258>
 800746a:	f04f 0800 	mov.w	r8, #0
 800746e:	f104 0919 	add.w	r9, r4, #25
 8007472:	e7f4      	b.n	800745e <_printf_float+0x456>

08007474 <_printf_common>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	4616      	mov	r6, r2
 800747a:	4699      	mov	r9, r3
 800747c:	688a      	ldr	r2, [r1, #8]
 800747e:	690b      	ldr	r3, [r1, #16]
 8007480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007484:	4293      	cmp	r3, r2
 8007486:	bfb8      	it	lt
 8007488:	4613      	movlt	r3, r2
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007490:	4607      	mov	r7, r0
 8007492:	460c      	mov	r4, r1
 8007494:	b10a      	cbz	r2, 800749a <_printf_common+0x26>
 8007496:	3301      	adds	r3, #1
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	0699      	lsls	r1, r3, #26
 800749e:	bf42      	ittt	mi
 80074a0:	6833      	ldrmi	r3, [r6, #0]
 80074a2:	3302      	addmi	r3, #2
 80074a4:	6033      	strmi	r3, [r6, #0]
 80074a6:	6825      	ldr	r5, [r4, #0]
 80074a8:	f015 0506 	ands.w	r5, r5, #6
 80074ac:	d106      	bne.n	80074bc <_printf_common+0x48>
 80074ae:	f104 0a19 	add.w	sl, r4, #25
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	6832      	ldr	r2, [r6, #0]
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	dc26      	bgt.n	800750a <_printf_common+0x96>
 80074bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074c0:	1e13      	subs	r3, r2, #0
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	bf18      	it	ne
 80074c6:	2301      	movne	r3, #1
 80074c8:	0692      	lsls	r2, r2, #26
 80074ca:	d42b      	bmi.n	8007524 <_printf_common+0xb0>
 80074cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d0:	4649      	mov	r1, r9
 80074d2:	4638      	mov	r0, r7
 80074d4:	47c0      	blx	r8
 80074d6:	3001      	adds	r0, #1
 80074d8:	d01e      	beq.n	8007518 <_printf_common+0xa4>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	68e5      	ldr	r5, [r4, #12]
 80074de:	6832      	ldr	r2, [r6, #0]
 80074e0:	f003 0306 	and.w	r3, r3, #6
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	bf08      	it	eq
 80074e8:	1aad      	subeq	r5, r5, r2
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	6922      	ldr	r2, [r4, #16]
 80074ee:	bf0c      	ite	eq
 80074f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f4:	2500      	movne	r5, #0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	bfc4      	itt	gt
 80074fa:	1a9b      	subgt	r3, r3, r2
 80074fc:	18ed      	addgt	r5, r5, r3
 80074fe:	2600      	movs	r6, #0
 8007500:	341a      	adds	r4, #26
 8007502:	42b5      	cmp	r5, r6
 8007504:	d11a      	bne.n	800753c <_printf_common+0xc8>
 8007506:	2000      	movs	r0, #0
 8007508:	e008      	b.n	800751c <_printf_common+0xa8>
 800750a:	2301      	movs	r3, #1
 800750c:	4652      	mov	r2, sl
 800750e:	4649      	mov	r1, r9
 8007510:	4638      	mov	r0, r7
 8007512:	47c0      	blx	r8
 8007514:	3001      	adds	r0, #1
 8007516:	d103      	bne.n	8007520 <_printf_common+0xac>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	3501      	adds	r5, #1
 8007522:	e7c6      	b.n	80074b2 <_printf_common+0x3e>
 8007524:	18e1      	adds	r1, r4, r3
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	2030      	movs	r0, #48	; 0x30
 800752a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800752e:	4422      	add	r2, r4
 8007530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007538:	3302      	adds	r3, #2
 800753a:	e7c7      	b.n	80074cc <_printf_common+0x58>
 800753c:	2301      	movs	r3, #1
 800753e:	4622      	mov	r2, r4
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d0e6      	beq.n	8007518 <_printf_common+0xa4>
 800754a:	3601      	adds	r6, #1
 800754c:	e7d9      	b.n	8007502 <_printf_common+0x8e>
	...

08007550 <_printf_i>:
 8007550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	460c      	mov	r4, r1
 8007556:	4691      	mov	r9, r2
 8007558:	7e27      	ldrb	r7, [r4, #24]
 800755a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800755c:	2f78      	cmp	r7, #120	; 0x78
 800755e:	4680      	mov	r8, r0
 8007560:	469a      	mov	sl, r3
 8007562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007566:	d807      	bhi.n	8007578 <_printf_i+0x28>
 8007568:	2f62      	cmp	r7, #98	; 0x62
 800756a:	d80a      	bhi.n	8007582 <_printf_i+0x32>
 800756c:	2f00      	cmp	r7, #0
 800756e:	f000 80d8 	beq.w	8007722 <_printf_i+0x1d2>
 8007572:	2f58      	cmp	r7, #88	; 0x58
 8007574:	f000 80a3 	beq.w	80076be <_printf_i+0x16e>
 8007578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800757c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007580:	e03a      	b.n	80075f8 <_printf_i+0xa8>
 8007582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007586:	2b15      	cmp	r3, #21
 8007588:	d8f6      	bhi.n	8007578 <_printf_i+0x28>
 800758a:	a001      	add	r0, pc, #4	; (adr r0, 8007590 <_printf_i+0x40>)
 800758c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007590:	080075e9 	.word	0x080075e9
 8007594:	080075fd 	.word	0x080075fd
 8007598:	08007579 	.word	0x08007579
 800759c:	08007579 	.word	0x08007579
 80075a0:	08007579 	.word	0x08007579
 80075a4:	08007579 	.word	0x08007579
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	08007579 	.word	0x08007579
 80075b0:	08007579 	.word	0x08007579
 80075b4:	08007579 	.word	0x08007579
 80075b8:	08007579 	.word	0x08007579
 80075bc:	08007709 	.word	0x08007709
 80075c0:	0800762d 	.word	0x0800762d
 80075c4:	080076eb 	.word	0x080076eb
 80075c8:	08007579 	.word	0x08007579
 80075cc:	08007579 	.word	0x08007579
 80075d0:	0800772b 	.word	0x0800772b
 80075d4:	08007579 	.word	0x08007579
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	08007579 	.word	0x08007579
 80075e0:	08007579 	.word	0x08007579
 80075e4:	080076f3 	.word	0x080076f3
 80075e8:	680b      	ldr	r3, [r1, #0]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	600a      	str	r2, [r1, #0]
 80075f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f8:	2301      	movs	r3, #1
 80075fa:	e0a3      	b.n	8007744 <_printf_i+0x1f4>
 80075fc:	6825      	ldr	r5, [r4, #0]
 80075fe:	6808      	ldr	r0, [r1, #0]
 8007600:	062e      	lsls	r6, r5, #24
 8007602:	f100 0304 	add.w	r3, r0, #4
 8007606:	d50a      	bpl.n	800761e <_printf_i+0xce>
 8007608:	6805      	ldr	r5, [r0, #0]
 800760a:	600b      	str	r3, [r1, #0]
 800760c:	2d00      	cmp	r5, #0
 800760e:	da03      	bge.n	8007618 <_printf_i+0xc8>
 8007610:	232d      	movs	r3, #45	; 0x2d
 8007612:	426d      	negs	r5, r5
 8007614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007618:	485e      	ldr	r0, [pc, #376]	; (8007794 <_printf_i+0x244>)
 800761a:	230a      	movs	r3, #10
 800761c:	e019      	b.n	8007652 <_printf_i+0x102>
 800761e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007622:	6805      	ldr	r5, [r0, #0]
 8007624:	600b      	str	r3, [r1, #0]
 8007626:	bf18      	it	ne
 8007628:	b22d      	sxthne	r5, r5
 800762a:	e7ef      	b.n	800760c <_printf_i+0xbc>
 800762c:	680b      	ldr	r3, [r1, #0]
 800762e:	6825      	ldr	r5, [r4, #0]
 8007630:	1d18      	adds	r0, r3, #4
 8007632:	6008      	str	r0, [r1, #0]
 8007634:	0628      	lsls	r0, r5, #24
 8007636:	d501      	bpl.n	800763c <_printf_i+0xec>
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	e002      	b.n	8007642 <_printf_i+0xf2>
 800763c:	0669      	lsls	r1, r5, #25
 800763e:	d5fb      	bpl.n	8007638 <_printf_i+0xe8>
 8007640:	881d      	ldrh	r5, [r3, #0]
 8007642:	4854      	ldr	r0, [pc, #336]	; (8007794 <_printf_i+0x244>)
 8007644:	2f6f      	cmp	r7, #111	; 0x6f
 8007646:	bf0c      	ite	eq
 8007648:	2308      	moveq	r3, #8
 800764a:	230a      	movne	r3, #10
 800764c:	2100      	movs	r1, #0
 800764e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007652:	6866      	ldr	r6, [r4, #4]
 8007654:	60a6      	str	r6, [r4, #8]
 8007656:	2e00      	cmp	r6, #0
 8007658:	bfa2      	ittt	ge
 800765a:	6821      	ldrge	r1, [r4, #0]
 800765c:	f021 0104 	bicge.w	r1, r1, #4
 8007660:	6021      	strge	r1, [r4, #0]
 8007662:	b90d      	cbnz	r5, 8007668 <_printf_i+0x118>
 8007664:	2e00      	cmp	r6, #0
 8007666:	d04d      	beq.n	8007704 <_printf_i+0x1b4>
 8007668:	4616      	mov	r6, r2
 800766a:	fbb5 f1f3 	udiv	r1, r5, r3
 800766e:	fb03 5711 	mls	r7, r3, r1, r5
 8007672:	5dc7      	ldrb	r7, [r0, r7]
 8007674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007678:	462f      	mov	r7, r5
 800767a:	42bb      	cmp	r3, r7
 800767c:	460d      	mov	r5, r1
 800767e:	d9f4      	bls.n	800766a <_printf_i+0x11a>
 8007680:	2b08      	cmp	r3, #8
 8007682:	d10b      	bne.n	800769c <_printf_i+0x14c>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	07df      	lsls	r7, r3, #31
 8007688:	d508      	bpl.n	800769c <_printf_i+0x14c>
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	6861      	ldr	r1, [r4, #4]
 800768e:	4299      	cmp	r1, r3
 8007690:	bfde      	ittt	le
 8007692:	2330      	movle	r3, #48	; 0x30
 8007694:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007698:	f106 36ff 	addle.w	r6, r6, #4294967295
 800769c:	1b92      	subs	r2, r2, r6
 800769e:	6122      	str	r2, [r4, #16]
 80076a0:	f8cd a000 	str.w	sl, [sp]
 80076a4:	464b      	mov	r3, r9
 80076a6:	aa03      	add	r2, sp, #12
 80076a8:	4621      	mov	r1, r4
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7ff fee2 	bl	8007474 <_printf_common>
 80076b0:	3001      	adds	r0, #1
 80076b2:	d14c      	bne.n	800774e <_printf_i+0x1fe>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	b004      	add	sp, #16
 80076ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076be:	4835      	ldr	r0, [pc, #212]	; (8007794 <_printf_i+0x244>)
 80076c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	680e      	ldr	r6, [r1, #0]
 80076c8:	061f      	lsls	r7, r3, #24
 80076ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80076ce:	600e      	str	r6, [r1, #0]
 80076d0:	d514      	bpl.n	80076fc <_printf_i+0x1ac>
 80076d2:	07d9      	lsls	r1, r3, #31
 80076d4:	bf44      	itt	mi
 80076d6:	f043 0320 	orrmi.w	r3, r3, #32
 80076da:	6023      	strmi	r3, [r4, #0]
 80076dc:	b91d      	cbnz	r5, 80076e6 <_printf_i+0x196>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f023 0320 	bic.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	2310      	movs	r3, #16
 80076e8:	e7b0      	b.n	800764c <_printf_i+0xfc>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	f043 0320 	orr.w	r3, r3, #32
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	2378      	movs	r3, #120	; 0x78
 80076f4:	4828      	ldr	r0, [pc, #160]	; (8007798 <_printf_i+0x248>)
 80076f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076fa:	e7e3      	b.n	80076c4 <_printf_i+0x174>
 80076fc:	065e      	lsls	r6, r3, #25
 80076fe:	bf48      	it	mi
 8007700:	b2ad      	uxthmi	r5, r5
 8007702:	e7e6      	b.n	80076d2 <_printf_i+0x182>
 8007704:	4616      	mov	r6, r2
 8007706:	e7bb      	b.n	8007680 <_printf_i+0x130>
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	6826      	ldr	r6, [r4, #0]
 800770c:	6960      	ldr	r0, [r4, #20]
 800770e:	1d1d      	adds	r5, r3, #4
 8007710:	600d      	str	r5, [r1, #0]
 8007712:	0635      	lsls	r5, r6, #24
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	d501      	bpl.n	800771c <_printf_i+0x1cc>
 8007718:	6018      	str	r0, [r3, #0]
 800771a:	e002      	b.n	8007722 <_printf_i+0x1d2>
 800771c:	0671      	lsls	r1, r6, #25
 800771e:	d5fb      	bpl.n	8007718 <_printf_i+0x1c8>
 8007720:	8018      	strh	r0, [r3, #0]
 8007722:	2300      	movs	r3, #0
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	4616      	mov	r6, r2
 8007728:	e7ba      	b.n	80076a0 <_printf_i+0x150>
 800772a:	680b      	ldr	r3, [r1, #0]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	600a      	str	r2, [r1, #0]
 8007730:	681e      	ldr	r6, [r3, #0]
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	2100      	movs	r1, #0
 8007736:	4630      	mov	r0, r6
 8007738:	f7f8 fd72 	bl	8000220 <memchr>
 800773c:	b108      	cbz	r0, 8007742 <_printf_i+0x1f2>
 800773e:	1b80      	subs	r0, r0, r6
 8007740:	6060      	str	r0, [r4, #4]
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	2300      	movs	r3, #0
 8007748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800774c:	e7a8      	b.n	80076a0 <_printf_i+0x150>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	4632      	mov	r2, r6
 8007752:	4649      	mov	r1, r9
 8007754:	4640      	mov	r0, r8
 8007756:	47d0      	blx	sl
 8007758:	3001      	adds	r0, #1
 800775a:	d0ab      	beq.n	80076b4 <_printf_i+0x164>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	079b      	lsls	r3, r3, #30
 8007760:	d413      	bmi.n	800778a <_printf_i+0x23a>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	4298      	cmp	r0, r3
 8007768:	bfb8      	it	lt
 800776a:	4618      	movlt	r0, r3
 800776c:	e7a4      	b.n	80076b8 <_printf_i+0x168>
 800776e:	2301      	movs	r3, #1
 8007770:	4632      	mov	r2, r6
 8007772:	4649      	mov	r1, r9
 8007774:	4640      	mov	r0, r8
 8007776:	47d0      	blx	sl
 8007778:	3001      	adds	r0, #1
 800777a:	d09b      	beq.n	80076b4 <_printf_i+0x164>
 800777c:	3501      	adds	r5, #1
 800777e:	68e3      	ldr	r3, [r4, #12]
 8007780:	9903      	ldr	r1, [sp, #12]
 8007782:	1a5b      	subs	r3, r3, r1
 8007784:	42ab      	cmp	r3, r5
 8007786:	dcf2      	bgt.n	800776e <_printf_i+0x21e>
 8007788:	e7eb      	b.n	8007762 <_printf_i+0x212>
 800778a:	2500      	movs	r5, #0
 800778c:	f104 0619 	add.w	r6, r4, #25
 8007790:	e7f5      	b.n	800777e <_printf_i+0x22e>
 8007792:	bf00      	nop
 8007794:	08009ae2 	.word	0x08009ae2
 8007798:	08009af3 	.word	0x08009af3

0800779c <iprintf>:
 800779c:	b40f      	push	{r0, r1, r2, r3}
 800779e:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <iprintf+0x2c>)
 80077a0:	b513      	push	{r0, r1, r4, lr}
 80077a2:	681c      	ldr	r4, [r3, #0]
 80077a4:	b124      	cbz	r4, 80077b0 <iprintf+0x14>
 80077a6:	69a3      	ldr	r3, [r4, #24]
 80077a8:	b913      	cbnz	r3, 80077b0 <iprintf+0x14>
 80077aa:	4620      	mov	r0, r4
 80077ac:	f001 f8d6 	bl	800895c <__sinit>
 80077b0:	ab05      	add	r3, sp, #20
 80077b2:	9a04      	ldr	r2, [sp, #16]
 80077b4:	68a1      	ldr	r1, [r4, #8]
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	4620      	mov	r0, r4
 80077ba:	f001 fe51 	bl	8009460 <_vfiprintf_r>
 80077be:	b002      	add	sp, #8
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	b004      	add	sp, #16
 80077c6:	4770      	bx	lr
 80077c8:	20000010 	.word	0x20000010

080077cc <_puts_r>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	460e      	mov	r6, r1
 80077d0:	4605      	mov	r5, r0
 80077d2:	b118      	cbz	r0, 80077dc <_puts_r+0x10>
 80077d4:	6983      	ldr	r3, [r0, #24]
 80077d6:	b90b      	cbnz	r3, 80077dc <_puts_r+0x10>
 80077d8:	f001 f8c0 	bl	800895c <__sinit>
 80077dc:	69ab      	ldr	r3, [r5, #24]
 80077de:	68ac      	ldr	r4, [r5, #8]
 80077e0:	b913      	cbnz	r3, 80077e8 <_puts_r+0x1c>
 80077e2:	4628      	mov	r0, r5
 80077e4:	f001 f8ba 	bl	800895c <__sinit>
 80077e8:	4b2c      	ldr	r3, [pc, #176]	; (800789c <_puts_r+0xd0>)
 80077ea:	429c      	cmp	r4, r3
 80077ec:	d120      	bne.n	8007830 <_puts_r+0x64>
 80077ee:	686c      	ldr	r4, [r5, #4]
 80077f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d405      	bmi.n	8007802 <_puts_r+0x36>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	0598      	lsls	r0, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_puts_r+0x36>
 80077fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077fe:	f001 f950 	bl	8008aa2 <__retarget_lock_acquire_recursive>
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	0719      	lsls	r1, r3, #28
 8007806:	d51d      	bpl.n	8007844 <_puts_r+0x78>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	b1db      	cbz	r3, 8007844 <_puts_r+0x78>
 800780c:	3e01      	subs	r6, #1
 800780e:	68a3      	ldr	r3, [r4, #8]
 8007810:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007814:	3b01      	subs	r3, #1
 8007816:	60a3      	str	r3, [r4, #8]
 8007818:	bb39      	cbnz	r1, 800786a <_puts_r+0x9e>
 800781a:	2b00      	cmp	r3, #0
 800781c:	da38      	bge.n	8007890 <_puts_r+0xc4>
 800781e:	4622      	mov	r2, r4
 8007820:	210a      	movs	r1, #10
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f848 	bl	80078b8 <__swbuf_r>
 8007828:	3001      	adds	r0, #1
 800782a:	d011      	beq.n	8007850 <_puts_r+0x84>
 800782c:	250a      	movs	r5, #10
 800782e:	e011      	b.n	8007854 <_puts_r+0x88>
 8007830:	4b1b      	ldr	r3, [pc, #108]	; (80078a0 <_puts_r+0xd4>)
 8007832:	429c      	cmp	r4, r3
 8007834:	d101      	bne.n	800783a <_puts_r+0x6e>
 8007836:	68ac      	ldr	r4, [r5, #8]
 8007838:	e7da      	b.n	80077f0 <_puts_r+0x24>
 800783a:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <_puts_r+0xd8>)
 800783c:	429c      	cmp	r4, r3
 800783e:	bf08      	it	eq
 8007840:	68ec      	ldreq	r4, [r5, #12]
 8007842:	e7d5      	b.n	80077f0 <_puts_r+0x24>
 8007844:	4621      	mov	r1, r4
 8007846:	4628      	mov	r0, r5
 8007848:	f000 f888 	bl	800795c <__swsetup_r>
 800784c:	2800      	cmp	r0, #0
 800784e:	d0dd      	beq.n	800780c <_puts_r+0x40>
 8007850:	f04f 35ff 	mov.w	r5, #4294967295
 8007854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007856:	07da      	lsls	r2, r3, #31
 8007858:	d405      	bmi.n	8007866 <_puts_r+0x9a>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	059b      	lsls	r3, r3, #22
 800785e:	d402      	bmi.n	8007866 <_puts_r+0x9a>
 8007860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007862:	f001 f91f 	bl	8008aa4 <__retarget_lock_release_recursive>
 8007866:	4628      	mov	r0, r5
 8007868:	bd70      	pop	{r4, r5, r6, pc}
 800786a:	2b00      	cmp	r3, #0
 800786c:	da04      	bge.n	8007878 <_puts_r+0xac>
 800786e:	69a2      	ldr	r2, [r4, #24]
 8007870:	429a      	cmp	r2, r3
 8007872:	dc06      	bgt.n	8007882 <_puts_r+0xb6>
 8007874:	290a      	cmp	r1, #10
 8007876:	d004      	beq.n	8007882 <_puts_r+0xb6>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	6022      	str	r2, [r4, #0]
 800787e:	7019      	strb	r1, [r3, #0]
 8007880:	e7c5      	b.n	800780e <_puts_r+0x42>
 8007882:	4622      	mov	r2, r4
 8007884:	4628      	mov	r0, r5
 8007886:	f000 f817 	bl	80078b8 <__swbuf_r>
 800788a:	3001      	adds	r0, #1
 800788c:	d1bf      	bne.n	800780e <_puts_r+0x42>
 800788e:	e7df      	b.n	8007850 <_puts_r+0x84>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	250a      	movs	r5, #10
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	701d      	strb	r5, [r3, #0]
 800789a:	e7db      	b.n	8007854 <_puts_r+0x88>
 800789c:	08009bb8 	.word	0x08009bb8
 80078a0:	08009bd8 	.word	0x08009bd8
 80078a4:	08009b98 	.word	0x08009b98

080078a8 <puts>:
 80078a8:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <puts+0xc>)
 80078aa:	4601      	mov	r1, r0
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f7ff bf8d 	b.w	80077cc <_puts_r>
 80078b2:	bf00      	nop
 80078b4:	20000010 	.word	0x20000010

080078b8 <__swbuf_r>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	460e      	mov	r6, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	4605      	mov	r5, r0
 80078c0:	b118      	cbz	r0, 80078ca <__swbuf_r+0x12>
 80078c2:	6983      	ldr	r3, [r0, #24]
 80078c4:	b90b      	cbnz	r3, 80078ca <__swbuf_r+0x12>
 80078c6:	f001 f849 	bl	800895c <__sinit>
 80078ca:	4b21      	ldr	r3, [pc, #132]	; (8007950 <__swbuf_r+0x98>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	d12b      	bne.n	8007928 <__swbuf_r+0x70>
 80078d0:	686c      	ldr	r4, [r5, #4]
 80078d2:	69a3      	ldr	r3, [r4, #24]
 80078d4:	60a3      	str	r3, [r4, #8]
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	071a      	lsls	r2, r3, #28
 80078da:	d52f      	bpl.n	800793c <__swbuf_r+0x84>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	b36b      	cbz	r3, 800793c <__swbuf_r+0x84>
 80078e0:	6923      	ldr	r3, [r4, #16]
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	1ac0      	subs	r0, r0, r3
 80078e6:	6963      	ldr	r3, [r4, #20]
 80078e8:	b2f6      	uxtb	r6, r6
 80078ea:	4283      	cmp	r3, r0
 80078ec:	4637      	mov	r7, r6
 80078ee:	dc04      	bgt.n	80078fa <__swbuf_r+0x42>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 ff9e 	bl	8008834 <_fflush_r>
 80078f8:	bb30      	cbnz	r0, 8007948 <__swbuf_r+0x90>
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	6022      	str	r2, [r4, #0]
 8007906:	701e      	strb	r6, [r3, #0]
 8007908:	6963      	ldr	r3, [r4, #20]
 800790a:	3001      	adds	r0, #1
 800790c:	4283      	cmp	r3, r0
 800790e:	d004      	beq.n	800791a <__swbuf_r+0x62>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d506      	bpl.n	8007924 <__swbuf_r+0x6c>
 8007916:	2e0a      	cmp	r6, #10
 8007918:	d104      	bne.n	8007924 <__swbuf_r+0x6c>
 800791a:	4621      	mov	r1, r4
 800791c:	4628      	mov	r0, r5
 800791e:	f000 ff89 	bl	8008834 <_fflush_r>
 8007922:	b988      	cbnz	r0, 8007948 <__swbuf_r+0x90>
 8007924:	4638      	mov	r0, r7
 8007926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <__swbuf_r+0x9c>)
 800792a:	429c      	cmp	r4, r3
 800792c:	d101      	bne.n	8007932 <__swbuf_r+0x7a>
 800792e:	68ac      	ldr	r4, [r5, #8]
 8007930:	e7cf      	b.n	80078d2 <__swbuf_r+0x1a>
 8007932:	4b09      	ldr	r3, [pc, #36]	; (8007958 <__swbuf_r+0xa0>)
 8007934:	429c      	cmp	r4, r3
 8007936:	bf08      	it	eq
 8007938:	68ec      	ldreq	r4, [r5, #12]
 800793a:	e7ca      	b.n	80078d2 <__swbuf_r+0x1a>
 800793c:	4621      	mov	r1, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f80c 	bl	800795c <__swsetup_r>
 8007944:	2800      	cmp	r0, #0
 8007946:	d0cb      	beq.n	80078e0 <__swbuf_r+0x28>
 8007948:	f04f 37ff 	mov.w	r7, #4294967295
 800794c:	e7ea      	b.n	8007924 <__swbuf_r+0x6c>
 800794e:	bf00      	nop
 8007950:	08009bb8 	.word	0x08009bb8
 8007954:	08009bd8 	.word	0x08009bd8
 8007958:	08009b98 	.word	0x08009b98

0800795c <__swsetup_r>:
 800795c:	4b32      	ldr	r3, [pc, #200]	; (8007a28 <__swsetup_r+0xcc>)
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	681d      	ldr	r5, [r3, #0]
 8007962:	4606      	mov	r6, r0
 8007964:	460c      	mov	r4, r1
 8007966:	b125      	cbz	r5, 8007972 <__swsetup_r+0x16>
 8007968:	69ab      	ldr	r3, [r5, #24]
 800796a:	b913      	cbnz	r3, 8007972 <__swsetup_r+0x16>
 800796c:	4628      	mov	r0, r5
 800796e:	f000 fff5 	bl	800895c <__sinit>
 8007972:	4b2e      	ldr	r3, [pc, #184]	; (8007a2c <__swsetup_r+0xd0>)
 8007974:	429c      	cmp	r4, r3
 8007976:	d10f      	bne.n	8007998 <__swsetup_r+0x3c>
 8007978:	686c      	ldr	r4, [r5, #4]
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007980:	0719      	lsls	r1, r3, #28
 8007982:	d42c      	bmi.n	80079de <__swsetup_r+0x82>
 8007984:	06dd      	lsls	r5, r3, #27
 8007986:	d411      	bmi.n	80079ac <__swsetup_r+0x50>
 8007988:	2309      	movs	r3, #9
 800798a:	6033      	str	r3, [r6, #0]
 800798c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	f04f 30ff 	mov.w	r0, #4294967295
 8007996:	e03e      	b.n	8007a16 <__swsetup_r+0xba>
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <__swsetup_r+0xd4>)
 800799a:	429c      	cmp	r4, r3
 800799c:	d101      	bne.n	80079a2 <__swsetup_r+0x46>
 800799e:	68ac      	ldr	r4, [r5, #8]
 80079a0:	e7eb      	b.n	800797a <__swsetup_r+0x1e>
 80079a2:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <__swsetup_r+0xd8>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	bf08      	it	eq
 80079a8:	68ec      	ldreq	r4, [r5, #12]
 80079aa:	e7e6      	b.n	800797a <__swsetup_r+0x1e>
 80079ac:	0758      	lsls	r0, r3, #29
 80079ae:	d512      	bpl.n	80079d6 <__swsetup_r+0x7a>
 80079b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b2:	b141      	cbz	r1, 80079c6 <__swsetup_r+0x6a>
 80079b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079b8:	4299      	cmp	r1, r3
 80079ba:	d002      	beq.n	80079c2 <__swsetup_r+0x66>
 80079bc:	4630      	mov	r0, r6
 80079be:	f001 fc7b 	bl	80092b8 <_free_r>
 80079c2:	2300      	movs	r3, #0
 80079c4:	6363      	str	r3, [r4, #52]	; 0x34
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	2300      	movs	r3, #0
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0308 	orr.w	r3, r3, #8
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	b94b      	cbnz	r3, 80079f6 <__swsetup_r+0x9a>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ec:	d003      	beq.n	80079f6 <__swsetup_r+0x9a>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4630      	mov	r0, r6
 80079f2:	f001 f87d 	bl	8008af0 <__smakebuf_r>
 80079f6:	89a0      	ldrh	r0, [r4, #12]
 80079f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079fc:	f010 0301 	ands.w	r3, r0, #1
 8007a00:	d00a      	beq.n	8007a18 <__swsetup_r+0xbc>
 8007a02:	2300      	movs	r3, #0
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	425b      	negs	r3, r3
 8007a0a:	61a3      	str	r3, [r4, #24]
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	b943      	cbnz	r3, 8007a22 <__swsetup_r+0xc6>
 8007a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a14:	d1ba      	bne.n	800798c <__swsetup_r+0x30>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	0781      	lsls	r1, r0, #30
 8007a1a:	bf58      	it	pl
 8007a1c:	6963      	ldrpl	r3, [r4, #20]
 8007a1e:	60a3      	str	r3, [r4, #8]
 8007a20:	e7f4      	b.n	8007a0c <__swsetup_r+0xb0>
 8007a22:	2000      	movs	r0, #0
 8007a24:	e7f7      	b.n	8007a16 <__swsetup_r+0xba>
 8007a26:	bf00      	nop
 8007a28:	20000010 	.word	0x20000010
 8007a2c:	08009bb8 	.word	0x08009bb8
 8007a30:	08009bd8 	.word	0x08009bd8
 8007a34:	08009b98 	.word	0x08009b98

08007a38 <quorem>:
 8007a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	6903      	ldr	r3, [r0, #16]
 8007a3e:	690c      	ldr	r4, [r1, #16]
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	4607      	mov	r7, r0
 8007a44:	f2c0 8081 	blt.w	8007b4a <quorem+0x112>
 8007a48:	3c01      	subs	r4, #1
 8007a4a:	f101 0814 	add.w	r8, r1, #20
 8007a4e:	f100 0514 	add.w	r5, r0, #20
 8007a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a60:	3301      	adds	r3, #1
 8007a62:	429a      	cmp	r2, r3
 8007a64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a70:	d331      	bcc.n	8007ad6 <quorem+0x9e>
 8007a72:	f04f 0e00 	mov.w	lr, #0
 8007a76:	4640      	mov	r0, r8
 8007a78:	46ac      	mov	ip, r5
 8007a7a:	46f2      	mov	sl, lr
 8007a7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a80:	b293      	uxth	r3, r2
 8007a82:	fb06 e303 	mla	r3, r6, r3, lr
 8007a86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a90:	0c12      	lsrs	r2, r2, #16
 8007a92:	f8dc a000 	ldr.w	sl, [ip]
 8007a96:	fb06 e202 	mla	r2, r6, r2, lr
 8007a9a:	fa13 f38a 	uxtah	r3, r3, sl
 8007a9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007aa2:	fa1f fa82 	uxth.w	sl, r2
 8007aa6:	f8dc 2000 	ldr.w	r2, [ip]
 8007aaa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007aae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ab8:	4581      	cmp	r9, r0
 8007aba:	f84c 3b04 	str.w	r3, [ip], #4
 8007abe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ac2:	d2db      	bcs.n	8007a7c <quorem+0x44>
 8007ac4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ac8:	b92b      	cbnz	r3, 8007ad6 <quorem+0x9e>
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	429d      	cmp	r5, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	d32e      	bcc.n	8007b32 <quorem+0xfa>
 8007ad4:	613c      	str	r4, [r7, #16]
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f001 fade 	bl	8009098 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	db24      	blt.n	8007b2a <quorem+0xf2>
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f04f 0c00 	mov.w	ip, #0
 8007ae8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aec:	f8d0 e000 	ldr.w	lr, [r0]
 8007af0:	b293      	uxth	r3, r2
 8007af2:	ebac 0303 	sub.w	r3, ip, r3
 8007af6:	0c12      	lsrs	r2, r2, #16
 8007af8:	fa13 f38e 	uxtah	r3, r3, lr
 8007afc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b0a:	45c1      	cmp	r9, r8
 8007b0c:	f840 3b04 	str.w	r3, [r0], #4
 8007b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b14:	d2e8      	bcs.n	8007ae8 <quorem+0xb0>
 8007b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b1e:	b922      	cbnz	r2, 8007b2a <quorem+0xf2>
 8007b20:	3b04      	subs	r3, #4
 8007b22:	429d      	cmp	r5, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	d30a      	bcc.n	8007b3e <quorem+0x106>
 8007b28:	613c      	str	r4, [r7, #16]
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	b003      	add	sp, #12
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d1cc      	bne.n	8007ad4 <quorem+0x9c>
 8007b3a:	3c01      	subs	r4, #1
 8007b3c:	e7c7      	b.n	8007ace <quorem+0x96>
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	3b04      	subs	r3, #4
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d1f0      	bne.n	8007b28 <quorem+0xf0>
 8007b46:	3c01      	subs	r4, #1
 8007b48:	e7eb      	b.n	8007b22 <quorem+0xea>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e7ee      	b.n	8007b2c <quorem+0xf4>
	...

08007b50 <_dtoa_r>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ed2d 8b02 	vpush	{d8}
 8007b58:	ec57 6b10 	vmov	r6, r7, d0
 8007b5c:	b095      	sub	sp, #84	; 0x54
 8007b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b64:	9105      	str	r1, [sp, #20]
 8007b66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b70:	b975      	cbnz	r5, 8007b90 <_dtoa_r+0x40>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f000 fffc 	bl	8008b70 <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b7c:	b920      	cbnz	r0, 8007b88 <_dtoa_r+0x38>
 8007b7e:	4bb2      	ldr	r3, [pc, #712]	; (8007e48 <_dtoa_r+0x2f8>)
 8007b80:	21ea      	movs	r1, #234	; 0xea
 8007b82:	48b2      	ldr	r0, [pc, #712]	; (8007e4c <_dtoa_r+0x2fc>)
 8007b84:	f001 fe02 	bl	800978c <__assert_func>
 8007b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b8c:	6005      	str	r5, [r0, #0]
 8007b8e:	60c5      	str	r5, [r0, #12]
 8007b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	b151      	cbz	r1, 8007bac <_dtoa_r+0x5c>
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	604a      	str	r2, [r1, #4]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	4093      	lsls	r3, r2
 8007b9e:	608b      	str	r3, [r1, #8]
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f001 f83b 	bl	8008c1c <_Bfree>
 8007ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	1e3b      	subs	r3, r7, #0
 8007bae:	bfb9      	ittee	lt
 8007bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	9303      	strlt	r3, [sp, #12]
 8007bb6:	2300      	movge	r3, #0
 8007bb8:	f8c8 3000 	strge.w	r3, [r8]
 8007bbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007bc0:	4ba3      	ldr	r3, [pc, #652]	; (8007e50 <_dtoa_r+0x300>)
 8007bc2:	bfbc      	itt	lt
 8007bc4:	2201      	movlt	r2, #1
 8007bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8007bca:	ea33 0309 	bics.w	r3, r3, r9
 8007bce:	d11b      	bne.n	8007c08 <_dtoa_r+0xb8>
 8007bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bdc:	4333      	orrs	r3, r6
 8007bde:	f000 857a 	beq.w	80086d6 <_dtoa_r+0xb86>
 8007be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be4:	b963      	cbnz	r3, 8007c00 <_dtoa_r+0xb0>
 8007be6:	4b9b      	ldr	r3, [pc, #620]	; (8007e54 <_dtoa_r+0x304>)
 8007be8:	e024      	b.n	8007c34 <_dtoa_r+0xe4>
 8007bea:	4b9b      	ldr	r3, [pc, #620]	; (8007e58 <_dtoa_r+0x308>)
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	9800      	ldr	r0, [sp, #0]
 8007bf6:	b015      	add	sp, #84	; 0x54
 8007bf8:	ecbd 8b02 	vpop	{d8}
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	4b94      	ldr	r3, [pc, #592]	; (8007e54 <_dtoa_r+0x304>)
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	3303      	adds	r3, #3
 8007c06:	e7f3      	b.n	8007bf0 <_dtoa_r+0xa0>
 8007c08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	ec51 0b17 	vmov	r0, r1, d7
 8007c12:	2300      	movs	r3, #0
 8007c14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c18:	f7f8 ff76 	bl	8000b08 <__aeabi_dcmpeq>
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	b158      	cbz	r0, 8007c38 <_dtoa_r+0xe8>
 8007c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c22:	2301      	movs	r3, #1
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8551 	beq.w	80086d0 <_dtoa_r+0xb80>
 8007c2e:	488b      	ldr	r0, [pc, #556]	; (8007e5c <_dtoa_r+0x30c>)
 8007c30:	6018      	str	r0, [r3, #0]
 8007c32:	1e43      	subs	r3, r0, #1
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	e7dd      	b.n	8007bf4 <_dtoa_r+0xa4>
 8007c38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c3c:	aa12      	add	r2, sp, #72	; 0x48
 8007c3e:	a913      	add	r1, sp, #76	; 0x4c
 8007c40:	4620      	mov	r0, r4
 8007c42:	f001 facd 	bl	80091e0 <__d2b>
 8007c46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c4a:	4683      	mov	fp, r0
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	d07c      	beq.n	8007d4a <_dtoa_r+0x1fa>
 8007c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007c5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c6a:	4b7d      	ldr	r3, [pc, #500]	; (8007e60 <_dtoa_r+0x310>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	f7f8 fb29 	bl	80002c8 <__aeabi_dsub>
 8007c76:	a36e      	add	r3, pc, #440	; (adr r3, 8007e30 <_dtoa_r+0x2e0>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fcdc 	bl	8000638 <__aeabi_dmul>
 8007c80:	a36d      	add	r3, pc, #436	; (adr r3, 8007e38 <_dtoa_r+0x2e8>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fb21 	bl	80002cc <__adddf3>
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	460f      	mov	r7, r1
 8007c90:	f7f8 fc68 	bl	8000564 <__aeabi_i2d>
 8007c94:	a36a      	add	r3, pc, #424	; (adr r3, 8007e40 <_dtoa_r+0x2f0>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f7f8 fccd 	bl	8000638 <__aeabi_dmul>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	f7f8 fb11 	bl	80002cc <__adddf3>
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	f7f8 ff73 	bl	8000b98 <__aeabi_d2iz>
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4682      	mov	sl, r0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 ff2e 	bl	8000b1c <__aeabi_dcmplt>
 8007cc0:	b148      	cbz	r0, 8007cd6 <_dtoa_r+0x186>
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	f7f8 fc4e 	bl	8000564 <__aeabi_i2d>
 8007cc8:	4632      	mov	r2, r6
 8007cca:	463b      	mov	r3, r7
 8007ccc:	f7f8 ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8007cd0:	b908      	cbnz	r0, 8007cd6 <_dtoa_r+0x186>
 8007cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cd6:	f1ba 0f16 	cmp.w	sl, #22
 8007cda:	d854      	bhi.n	8007d86 <_dtoa_r+0x236>
 8007cdc:	4b61      	ldr	r3, [pc, #388]	; (8007e64 <_dtoa_r+0x314>)
 8007cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cea:	f7f8 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d04b      	beq.n	8007d8a <_dtoa_r+0x23a>
 8007cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8007cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cfc:	1b5d      	subs	r5, r3, r5
 8007cfe:	1e6b      	subs	r3, r5, #1
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	bf43      	ittte	mi
 8007d04:	2300      	movmi	r3, #0
 8007d06:	f1c5 0801 	rsbmi	r8, r5, #1
 8007d0a:	9304      	strmi	r3, [sp, #16]
 8007d0c:	f04f 0800 	movpl.w	r8, #0
 8007d10:	f1ba 0f00 	cmp.w	sl, #0
 8007d14:	db3b      	blt.n	8007d8e <_dtoa_r+0x23e>
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007d1c:	4453      	add	r3, sl
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	2300      	movs	r3, #0
 8007d22:	9306      	str	r3, [sp, #24]
 8007d24:	9b05      	ldr	r3, [sp, #20]
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d869      	bhi.n	8007dfe <_dtoa_r+0x2ae>
 8007d2a:	2b05      	cmp	r3, #5
 8007d2c:	bfc4      	itt	gt
 8007d2e:	3b04      	subgt	r3, #4
 8007d30:	9305      	strgt	r3, [sp, #20]
 8007d32:	9b05      	ldr	r3, [sp, #20]
 8007d34:	f1a3 0302 	sub.w	r3, r3, #2
 8007d38:	bfcc      	ite	gt
 8007d3a:	2500      	movgt	r5, #0
 8007d3c:	2501      	movle	r5, #1
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d869      	bhi.n	8007e16 <_dtoa_r+0x2c6>
 8007d42:	e8df f003 	tbb	[pc, r3]
 8007d46:	4e2c      	.short	0x4e2c
 8007d48:	5a4c      	.short	0x5a4c
 8007d4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d4e:	441d      	add	r5, r3
 8007d50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	bfc1      	itttt	gt
 8007d58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d60:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d68:	bfda      	itte	le
 8007d6a:	f1c3 0320 	rsble	r3, r3, #32
 8007d6e:	fa06 f003 	lslle.w	r0, r6, r3
 8007d72:	4318      	orrgt	r0, r3
 8007d74:	f7f8 fbe6 	bl	8000544 <__aeabi_ui2d>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d80:	3d01      	subs	r5, #1
 8007d82:	9310      	str	r3, [sp, #64]	; 0x40
 8007d84:	e771      	b.n	8007c6a <_dtoa_r+0x11a>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e7b6      	b.n	8007cf8 <_dtoa_r+0x1a8>
 8007d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8007d8c:	e7b5      	b.n	8007cfa <_dtoa_r+0x1aa>
 8007d8e:	f1ca 0300 	rsb	r3, sl, #0
 8007d92:	9306      	str	r3, [sp, #24]
 8007d94:	2300      	movs	r3, #0
 8007d96:	eba8 080a 	sub.w	r8, r8, sl
 8007d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d9c:	e7c2      	b.n	8007d24 <_dtoa_r+0x1d4>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9308      	str	r3, [sp, #32]
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dc39      	bgt.n	8007e1c <_dtoa_r+0x2cc>
 8007da8:	f04f 0901 	mov.w	r9, #1
 8007dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007db0:	464b      	mov	r3, r9
 8007db2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007db8:	2200      	movs	r2, #0
 8007dba:	6042      	str	r2, [r0, #4]
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	f102 0614 	add.w	r6, r2, #20
 8007dc2:	429e      	cmp	r6, r3
 8007dc4:	6841      	ldr	r1, [r0, #4]
 8007dc6:	d92f      	bls.n	8007e28 <_dtoa_r+0x2d8>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fee7 	bl	8008b9c <_Balloc>
 8007dce:	9000      	str	r0, [sp, #0]
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d14b      	bne.n	8007e6c <_dtoa_r+0x31c>
 8007dd4:	4b24      	ldr	r3, [pc, #144]	; (8007e68 <_dtoa_r+0x318>)
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ddc:	e6d1      	b.n	8007b82 <_dtoa_r+0x32>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7de      	b.n	8007da0 <_dtoa_r+0x250>
 8007de2:	2300      	movs	r3, #0
 8007de4:	9308      	str	r3, [sp, #32]
 8007de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de8:	eb0a 0903 	add.w	r9, sl, r3
 8007dec:	f109 0301 	add.w	r3, r9, #1
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	bfb8      	it	lt
 8007df6:	2301      	movlt	r3, #1
 8007df8:	e7dd      	b.n	8007db6 <_dtoa_r+0x266>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e7f2      	b.n	8007de4 <_dtoa_r+0x294>
 8007dfe:	2501      	movs	r5, #1
 8007e00:	2300      	movs	r3, #0
 8007e02:	9305      	str	r3, [sp, #20]
 8007e04:	9508      	str	r5, [sp, #32]
 8007e06:	f04f 39ff 	mov.w	r9, #4294967295
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e10:	2312      	movs	r3, #18
 8007e12:	9209      	str	r2, [sp, #36]	; 0x24
 8007e14:	e7cf      	b.n	8007db6 <_dtoa_r+0x266>
 8007e16:	2301      	movs	r3, #1
 8007e18:	9308      	str	r3, [sp, #32]
 8007e1a:	e7f4      	b.n	8007e06 <_dtoa_r+0x2b6>
 8007e1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e20:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e24:	464b      	mov	r3, r9
 8007e26:	e7c6      	b.n	8007db6 <_dtoa_r+0x266>
 8007e28:	3101      	adds	r1, #1
 8007e2a:	6041      	str	r1, [r0, #4]
 8007e2c:	0052      	lsls	r2, r2, #1
 8007e2e:	e7c6      	b.n	8007dbe <_dtoa_r+0x26e>
 8007e30:	636f4361 	.word	0x636f4361
 8007e34:	3fd287a7 	.word	0x3fd287a7
 8007e38:	8b60c8b3 	.word	0x8b60c8b3
 8007e3c:	3fc68a28 	.word	0x3fc68a28
 8007e40:	509f79fb 	.word	0x509f79fb
 8007e44:	3fd34413 	.word	0x3fd34413
 8007e48:	08009b11 	.word	0x08009b11
 8007e4c:	08009b28 	.word	0x08009b28
 8007e50:	7ff00000 	.word	0x7ff00000
 8007e54:	08009b0d 	.word	0x08009b0d
 8007e58:	08009b04 	.word	0x08009b04
 8007e5c:	08009ae1 	.word	0x08009ae1
 8007e60:	3ff80000 	.word	0x3ff80000
 8007e64:	08009c80 	.word	0x08009c80
 8007e68:	08009b87 	.word	0x08009b87
 8007e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e6e:	9a00      	ldr	r2, [sp, #0]
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	9b01      	ldr	r3, [sp, #4]
 8007e74:	2b0e      	cmp	r3, #14
 8007e76:	f200 80ad 	bhi.w	8007fd4 <_dtoa_r+0x484>
 8007e7a:	2d00      	cmp	r5, #0
 8007e7c:	f000 80aa 	beq.w	8007fd4 <_dtoa_r+0x484>
 8007e80:	f1ba 0f00 	cmp.w	sl, #0
 8007e84:	dd36      	ble.n	8007ef4 <_dtoa_r+0x3a4>
 8007e86:	4ac3      	ldr	r2, [pc, #780]	; (8008194 <_dtoa_r+0x644>)
 8007e88:	f00a 030f 	and.w	r3, sl, #15
 8007e8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e90:	ed93 7b00 	vldr	d7, [r3]
 8007e94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8007ea0:	eef0 8a67 	vmov.f32	s17, s15
 8007ea4:	d016      	beq.n	8007ed4 <_dtoa_r+0x384>
 8007ea6:	4bbc      	ldr	r3, [pc, #752]	; (8008198 <_dtoa_r+0x648>)
 8007ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eb0:	f7f8 fcec 	bl	800088c <__aeabi_ddiv>
 8007eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb8:	f007 070f 	and.w	r7, r7, #15
 8007ebc:	2503      	movs	r5, #3
 8007ebe:	4eb6      	ldr	r6, [pc, #728]	; (8008198 <_dtoa_r+0x648>)
 8007ec0:	b957      	cbnz	r7, 8007ed8 <_dtoa_r+0x388>
 8007ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec6:	ec53 2b18 	vmov	r2, r3, d8
 8007eca:	f7f8 fcdf 	bl	800088c <__aeabi_ddiv>
 8007ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed2:	e029      	b.n	8007f28 <_dtoa_r+0x3d8>
 8007ed4:	2502      	movs	r5, #2
 8007ed6:	e7f2      	b.n	8007ebe <_dtoa_r+0x36e>
 8007ed8:	07f9      	lsls	r1, r7, #31
 8007eda:	d508      	bpl.n	8007eee <_dtoa_r+0x39e>
 8007edc:	ec51 0b18 	vmov	r0, r1, d8
 8007ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ee4:	f7f8 fba8 	bl	8000638 <__aeabi_dmul>
 8007ee8:	ec41 0b18 	vmov	d8, r0, r1
 8007eec:	3501      	adds	r5, #1
 8007eee:	107f      	asrs	r7, r7, #1
 8007ef0:	3608      	adds	r6, #8
 8007ef2:	e7e5      	b.n	8007ec0 <_dtoa_r+0x370>
 8007ef4:	f000 80a6 	beq.w	8008044 <_dtoa_r+0x4f4>
 8007ef8:	f1ca 0600 	rsb	r6, sl, #0
 8007efc:	4ba5      	ldr	r3, [pc, #660]	; (8008194 <_dtoa_r+0x644>)
 8007efe:	4fa6      	ldr	r7, [pc, #664]	; (8008198 <_dtoa_r+0x648>)
 8007f00:	f006 020f 	and.w	r2, r6, #15
 8007f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f10:	f7f8 fb92 	bl	8000638 <__aeabi_dmul>
 8007f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f18:	1136      	asrs	r6, r6, #4
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2502      	movs	r5, #2
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	f040 8085 	bne.w	800802e <_dtoa_r+0x4de>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1d2      	bne.n	8007ece <_dtoa_r+0x37e>
 8007f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 808c 	beq.w	8008048 <_dtoa_r+0x4f8>
 8007f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f34:	4b99      	ldr	r3, [pc, #612]	; (800819c <_dtoa_r+0x64c>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	f7f8 fdee 	bl	8000b1c <__aeabi_dcmplt>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	f000 8081 	beq.w	8008048 <_dtoa_r+0x4f8>
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d07d      	beq.n	8008048 <_dtoa_r+0x4f8>
 8007f4c:	f1b9 0f00 	cmp.w	r9, #0
 8007f50:	dd3c      	ble.n	8007fcc <_dtoa_r+0x47c>
 8007f52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4b91      	ldr	r3, [pc, #580]	; (80081a0 <_dtoa_r+0x650>)
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 fb6a 	bl	8000638 <__aeabi_dmul>
 8007f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f68:	3501      	adds	r5, #1
 8007f6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f72:	4628      	mov	r0, r5
 8007f74:	f7f8 faf6 	bl	8000564 <__aeabi_i2d>
 8007f78:	4632      	mov	r2, r6
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	f7f8 fb5c 	bl	8000638 <__aeabi_dmul>
 8007f80:	4b88      	ldr	r3, [pc, #544]	; (80081a4 <_dtoa_r+0x654>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	f7f8 f9a2 	bl	80002cc <__adddf3>
 8007f88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f90:	9303      	str	r3, [sp, #12]
 8007f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d15c      	bne.n	8008052 <_dtoa_r+0x502>
 8007f98:	4b83      	ldr	r3, [pc, #524]	; (80081a8 <_dtoa_r+0x658>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	f7f8 f992 	bl	80002c8 <__aeabi_dsub>
 8007fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa8:	4606      	mov	r6, r0
 8007faa:	460f      	mov	r7, r1
 8007fac:	f7f8 fdd4 	bl	8000b58 <__aeabi_dcmpgt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	f040 8296 	bne.w	80084e2 <_dtoa_r+0x992>
 8007fb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	f7f8 fdab 	bl	8000b1c <__aeabi_dcmplt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f040 8288 	bne.w	80084dc <_dtoa_r+0x98c>
 8007fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f2c0 8158 	blt.w	800828c <_dtoa_r+0x73c>
 8007fdc:	f1ba 0f0e 	cmp.w	sl, #14
 8007fe0:	f300 8154 	bgt.w	800828c <_dtoa_r+0x73c>
 8007fe4:	4b6b      	ldr	r3, [pc, #428]	; (8008194 <_dtoa_r+0x644>)
 8007fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f280 80e3 	bge.w	80081bc <_dtoa_r+0x66c>
 8007ff6:	9b01      	ldr	r3, [sp, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f300 80df 	bgt.w	80081bc <_dtoa_r+0x66c>
 8007ffe:	f040 826d 	bne.w	80084dc <_dtoa_r+0x98c>
 8008002:	4b69      	ldr	r3, [pc, #420]	; (80081a8 <_dtoa_r+0x658>)
 8008004:	2200      	movs	r2, #0
 8008006:	4640      	mov	r0, r8
 8008008:	4649      	mov	r1, r9
 800800a:	f7f8 fb15 	bl	8000638 <__aeabi_dmul>
 800800e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008012:	f7f8 fd97 	bl	8000b44 <__aeabi_dcmpge>
 8008016:	9e01      	ldr	r6, [sp, #4]
 8008018:	4637      	mov	r7, r6
 800801a:	2800      	cmp	r0, #0
 800801c:	f040 8243 	bne.w	80084a6 <_dtoa_r+0x956>
 8008020:	9d00      	ldr	r5, [sp, #0]
 8008022:	2331      	movs	r3, #49	; 0x31
 8008024:	f805 3b01 	strb.w	r3, [r5], #1
 8008028:	f10a 0a01 	add.w	sl, sl, #1
 800802c:	e23f      	b.n	80084ae <_dtoa_r+0x95e>
 800802e:	07f2      	lsls	r2, r6, #31
 8008030:	d505      	bpl.n	800803e <_dtoa_r+0x4ee>
 8008032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008036:	f7f8 faff 	bl	8000638 <__aeabi_dmul>
 800803a:	3501      	adds	r5, #1
 800803c:	2301      	movs	r3, #1
 800803e:	1076      	asrs	r6, r6, #1
 8008040:	3708      	adds	r7, #8
 8008042:	e76c      	b.n	8007f1e <_dtoa_r+0x3ce>
 8008044:	2502      	movs	r5, #2
 8008046:	e76f      	b.n	8007f28 <_dtoa_r+0x3d8>
 8008048:	9b01      	ldr	r3, [sp, #4]
 800804a:	f8cd a01c 	str.w	sl, [sp, #28]
 800804e:	930c      	str	r3, [sp, #48]	; 0x30
 8008050:	e78d      	b.n	8007f6e <_dtoa_r+0x41e>
 8008052:	9900      	ldr	r1, [sp, #0]
 8008054:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008058:	4b4e      	ldr	r3, [pc, #312]	; (8008194 <_dtoa_r+0x644>)
 800805a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800805e:	4401      	add	r1, r0
 8008060:	9102      	str	r1, [sp, #8]
 8008062:	9908      	ldr	r1, [sp, #32]
 8008064:	eeb0 8a47 	vmov.f32	s16, s14
 8008068:	eef0 8a67 	vmov.f32	s17, s15
 800806c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008074:	2900      	cmp	r1, #0
 8008076:	d045      	beq.n	8008104 <_dtoa_r+0x5b4>
 8008078:	494c      	ldr	r1, [pc, #304]	; (80081ac <_dtoa_r+0x65c>)
 800807a:	2000      	movs	r0, #0
 800807c:	f7f8 fc06 	bl	800088c <__aeabi_ddiv>
 8008080:	ec53 2b18 	vmov	r2, r3, d8
 8008084:	f7f8 f920 	bl	80002c8 <__aeabi_dsub>
 8008088:	9d00      	ldr	r5, [sp, #0]
 800808a:	ec41 0b18 	vmov	d8, r0, r1
 800808e:	4639      	mov	r1, r7
 8008090:	4630      	mov	r0, r6
 8008092:	f7f8 fd81 	bl	8000b98 <__aeabi_d2iz>
 8008096:	900c      	str	r0, [sp, #48]	; 0x30
 8008098:	f7f8 fa64 	bl	8000564 <__aeabi_i2d>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4630      	mov	r0, r6
 80080a2:	4639      	mov	r1, r7
 80080a4:	f7f8 f910 	bl	80002c8 <__aeabi_dsub>
 80080a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080aa:	3330      	adds	r3, #48	; 0x30
 80080ac:	f805 3b01 	strb.w	r3, [r5], #1
 80080b0:	ec53 2b18 	vmov	r2, r3, d8
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	f7f8 fd30 	bl	8000b1c <__aeabi_dcmplt>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d165      	bne.n	800818c <_dtoa_r+0x63c>
 80080c0:	4632      	mov	r2, r6
 80080c2:	463b      	mov	r3, r7
 80080c4:	4935      	ldr	r1, [pc, #212]	; (800819c <_dtoa_r+0x64c>)
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7f8 f8fe 	bl	80002c8 <__aeabi_dsub>
 80080cc:	ec53 2b18 	vmov	r2, r3, d8
 80080d0:	f7f8 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	f040 80b9 	bne.w	800824c <_dtoa_r+0x6fc>
 80080da:	9b02      	ldr	r3, [sp, #8]
 80080dc:	429d      	cmp	r5, r3
 80080de:	f43f af75 	beq.w	8007fcc <_dtoa_r+0x47c>
 80080e2:	4b2f      	ldr	r3, [pc, #188]	; (80081a0 <_dtoa_r+0x650>)
 80080e4:	ec51 0b18 	vmov	r0, r1, d8
 80080e8:	2200      	movs	r2, #0
 80080ea:	f7f8 faa5 	bl	8000638 <__aeabi_dmul>
 80080ee:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <_dtoa_r+0x650>)
 80080f0:	ec41 0b18 	vmov	d8, r0, r1
 80080f4:	2200      	movs	r2, #0
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 fa9d 	bl	8000638 <__aeabi_dmul>
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	e7c4      	b.n	800808e <_dtoa_r+0x53e>
 8008104:	ec51 0b17 	vmov	r0, r1, d7
 8008108:	f7f8 fa96 	bl	8000638 <__aeabi_dmul>
 800810c:	9b02      	ldr	r3, [sp, #8]
 800810e:	9d00      	ldr	r5, [sp, #0]
 8008110:	930c      	str	r3, [sp, #48]	; 0x30
 8008112:	ec41 0b18 	vmov	d8, r0, r1
 8008116:	4639      	mov	r1, r7
 8008118:	4630      	mov	r0, r6
 800811a:	f7f8 fd3d 	bl	8000b98 <__aeabi_d2iz>
 800811e:	9011      	str	r0, [sp, #68]	; 0x44
 8008120:	f7f8 fa20 	bl	8000564 <__aeabi_i2d>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 f8cc 	bl	80002c8 <__aeabi_dsub>
 8008130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008132:	3330      	adds	r3, #48	; 0x30
 8008134:	f805 3b01 	strb.w	r3, [r5], #1
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	429d      	cmp	r5, r3
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	d134      	bne.n	80081b0 <_dtoa_r+0x660>
 8008146:	4b19      	ldr	r3, [pc, #100]	; (80081ac <_dtoa_r+0x65c>)
 8008148:	ec51 0b18 	vmov	r0, r1, d8
 800814c:	f7f8 f8be 	bl	80002cc <__adddf3>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4630      	mov	r0, r6
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 fcfe 	bl	8000b58 <__aeabi_dcmpgt>
 800815c:	2800      	cmp	r0, #0
 800815e:	d175      	bne.n	800824c <_dtoa_r+0x6fc>
 8008160:	ec53 2b18 	vmov	r2, r3, d8
 8008164:	4911      	ldr	r1, [pc, #68]	; (80081ac <_dtoa_r+0x65c>)
 8008166:	2000      	movs	r0, #0
 8008168:	f7f8 f8ae 	bl	80002c8 <__aeabi_dsub>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4630      	mov	r0, r6
 8008172:	4639      	mov	r1, r7
 8008174:	f7f8 fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8008178:	2800      	cmp	r0, #0
 800817a:	f43f af27 	beq.w	8007fcc <_dtoa_r+0x47c>
 800817e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008180:	1e6b      	subs	r3, r5, #1
 8008182:	930c      	str	r3, [sp, #48]	; 0x30
 8008184:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008188:	2b30      	cmp	r3, #48	; 0x30
 800818a:	d0f8      	beq.n	800817e <_dtoa_r+0x62e>
 800818c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008190:	e04a      	b.n	8008228 <_dtoa_r+0x6d8>
 8008192:	bf00      	nop
 8008194:	08009c80 	.word	0x08009c80
 8008198:	08009c58 	.word	0x08009c58
 800819c:	3ff00000 	.word	0x3ff00000
 80081a0:	40240000 	.word	0x40240000
 80081a4:	401c0000 	.word	0x401c0000
 80081a8:	40140000 	.word	0x40140000
 80081ac:	3fe00000 	.word	0x3fe00000
 80081b0:	4baf      	ldr	r3, [pc, #700]	; (8008470 <_dtoa_r+0x920>)
 80081b2:	f7f8 fa41 	bl	8000638 <__aeabi_dmul>
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	e7ac      	b.n	8008116 <_dtoa_r+0x5c6>
 80081bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081c0:	9d00      	ldr	r5, [sp, #0]
 80081c2:	4642      	mov	r2, r8
 80081c4:	464b      	mov	r3, r9
 80081c6:	4630      	mov	r0, r6
 80081c8:	4639      	mov	r1, r7
 80081ca:	f7f8 fb5f 	bl	800088c <__aeabi_ddiv>
 80081ce:	f7f8 fce3 	bl	8000b98 <__aeabi_d2iz>
 80081d2:	9002      	str	r0, [sp, #8]
 80081d4:	f7f8 f9c6 	bl	8000564 <__aeabi_i2d>
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	f7f8 fa2c 	bl	8000638 <__aeabi_dmul>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4630      	mov	r0, r6
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7f8 f86e 	bl	80002c8 <__aeabi_dsub>
 80081ec:	9e02      	ldr	r6, [sp, #8]
 80081ee:	9f01      	ldr	r7, [sp, #4]
 80081f0:	3630      	adds	r6, #48	; 0x30
 80081f2:	f805 6b01 	strb.w	r6, [r5], #1
 80081f6:	9e00      	ldr	r6, [sp, #0]
 80081f8:	1bae      	subs	r6, r5, r6
 80081fa:	42b7      	cmp	r7, r6
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	d137      	bne.n	8008272 <_dtoa_r+0x722>
 8008202:	f7f8 f863 	bl	80002cc <__adddf3>
 8008206:	4642      	mov	r2, r8
 8008208:	464b      	mov	r3, r9
 800820a:	4606      	mov	r6, r0
 800820c:	460f      	mov	r7, r1
 800820e:	f7f8 fca3 	bl	8000b58 <__aeabi_dcmpgt>
 8008212:	b9c8      	cbnz	r0, 8008248 <_dtoa_r+0x6f8>
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 fc74 	bl	8000b08 <__aeabi_dcmpeq>
 8008220:	b110      	cbz	r0, 8008228 <_dtoa_r+0x6d8>
 8008222:	9b02      	ldr	r3, [sp, #8]
 8008224:	07d9      	lsls	r1, r3, #31
 8008226:	d40f      	bmi.n	8008248 <_dtoa_r+0x6f8>
 8008228:	4620      	mov	r0, r4
 800822a:	4659      	mov	r1, fp
 800822c:	f000 fcf6 	bl	8008c1c <_Bfree>
 8008230:	2300      	movs	r3, #0
 8008232:	702b      	strb	r3, [r5, #0]
 8008234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008236:	f10a 0001 	add.w	r0, sl, #1
 800823a:	6018      	str	r0, [r3, #0]
 800823c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800823e:	2b00      	cmp	r3, #0
 8008240:	f43f acd8 	beq.w	8007bf4 <_dtoa_r+0xa4>
 8008244:	601d      	str	r5, [r3, #0]
 8008246:	e4d5      	b.n	8007bf4 <_dtoa_r+0xa4>
 8008248:	f8cd a01c 	str.w	sl, [sp, #28]
 800824c:	462b      	mov	r3, r5
 800824e:	461d      	mov	r5, r3
 8008250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008254:	2a39      	cmp	r2, #57	; 0x39
 8008256:	d108      	bne.n	800826a <_dtoa_r+0x71a>
 8008258:	9a00      	ldr	r2, [sp, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d1f7      	bne.n	800824e <_dtoa_r+0x6fe>
 800825e:	9a07      	ldr	r2, [sp, #28]
 8008260:	9900      	ldr	r1, [sp, #0]
 8008262:	3201      	adds	r2, #1
 8008264:	9207      	str	r2, [sp, #28]
 8008266:	2230      	movs	r2, #48	; 0x30
 8008268:	700a      	strb	r2, [r1, #0]
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	3201      	adds	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	e78c      	b.n	800818c <_dtoa_r+0x63c>
 8008272:	4b7f      	ldr	r3, [pc, #508]	; (8008470 <_dtoa_r+0x920>)
 8008274:	2200      	movs	r2, #0
 8008276:	f7f8 f9df 	bl	8000638 <__aeabi_dmul>
 800827a:	2200      	movs	r2, #0
 800827c:	2300      	movs	r3, #0
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	f7f8 fc41 	bl	8000b08 <__aeabi_dcmpeq>
 8008286:	2800      	cmp	r0, #0
 8008288:	d09b      	beq.n	80081c2 <_dtoa_r+0x672>
 800828a:	e7cd      	b.n	8008228 <_dtoa_r+0x6d8>
 800828c:	9a08      	ldr	r2, [sp, #32]
 800828e:	2a00      	cmp	r2, #0
 8008290:	f000 80c4 	beq.w	800841c <_dtoa_r+0x8cc>
 8008294:	9a05      	ldr	r2, [sp, #20]
 8008296:	2a01      	cmp	r2, #1
 8008298:	f300 80a8 	bgt.w	80083ec <_dtoa_r+0x89c>
 800829c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800829e:	2a00      	cmp	r2, #0
 80082a0:	f000 80a0 	beq.w	80083e4 <_dtoa_r+0x894>
 80082a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082a8:	9e06      	ldr	r6, [sp, #24]
 80082aa:	4645      	mov	r5, r8
 80082ac:	9a04      	ldr	r2, [sp, #16]
 80082ae:	2101      	movs	r1, #1
 80082b0:	441a      	add	r2, r3
 80082b2:	4620      	mov	r0, r4
 80082b4:	4498      	add	r8, r3
 80082b6:	9204      	str	r2, [sp, #16]
 80082b8:	f000 fd6c 	bl	8008d94 <__i2b>
 80082bc:	4607      	mov	r7, r0
 80082be:	2d00      	cmp	r5, #0
 80082c0:	dd0b      	ble.n	80082da <_dtoa_r+0x78a>
 80082c2:	9b04      	ldr	r3, [sp, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dd08      	ble.n	80082da <_dtoa_r+0x78a>
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	9a04      	ldr	r2, [sp, #16]
 80082cc:	bfa8      	it	ge
 80082ce:	462b      	movge	r3, r5
 80082d0:	eba8 0803 	sub.w	r8, r8, r3
 80082d4:	1aed      	subs	r5, r5, r3
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	9b06      	ldr	r3, [sp, #24]
 80082dc:	b1fb      	cbz	r3, 800831e <_dtoa_r+0x7ce>
 80082de:	9b08      	ldr	r3, [sp, #32]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 809f 	beq.w	8008424 <_dtoa_r+0x8d4>
 80082e6:	2e00      	cmp	r6, #0
 80082e8:	dd11      	ble.n	800830e <_dtoa_r+0x7be>
 80082ea:	4639      	mov	r1, r7
 80082ec:	4632      	mov	r2, r6
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fe0c 	bl	8008f0c <__pow5mult>
 80082f4:	465a      	mov	r2, fp
 80082f6:	4601      	mov	r1, r0
 80082f8:	4607      	mov	r7, r0
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fd60 	bl	8008dc0 <__multiply>
 8008300:	4659      	mov	r1, fp
 8008302:	9007      	str	r0, [sp, #28]
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fc89 	bl	8008c1c <_Bfree>
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	469b      	mov	fp, r3
 800830e:	9b06      	ldr	r3, [sp, #24]
 8008310:	1b9a      	subs	r2, r3, r6
 8008312:	d004      	beq.n	800831e <_dtoa_r+0x7ce>
 8008314:	4659      	mov	r1, fp
 8008316:	4620      	mov	r0, r4
 8008318:	f000 fdf8 	bl	8008f0c <__pow5mult>
 800831c:	4683      	mov	fp, r0
 800831e:	2101      	movs	r1, #1
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fd37 	bl	8008d94 <__i2b>
 8008326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008328:	2b00      	cmp	r3, #0
 800832a:	4606      	mov	r6, r0
 800832c:	dd7c      	ble.n	8008428 <_dtoa_r+0x8d8>
 800832e:	461a      	mov	r2, r3
 8008330:	4601      	mov	r1, r0
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fdea 	bl	8008f0c <__pow5mult>
 8008338:	9b05      	ldr	r3, [sp, #20]
 800833a:	2b01      	cmp	r3, #1
 800833c:	4606      	mov	r6, r0
 800833e:	dd76      	ble.n	800842e <_dtoa_r+0x8de>
 8008340:	2300      	movs	r3, #0
 8008342:	9306      	str	r3, [sp, #24]
 8008344:	6933      	ldr	r3, [r6, #16]
 8008346:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800834a:	6918      	ldr	r0, [r3, #16]
 800834c:	f000 fcd2 	bl	8008cf4 <__hi0bits>
 8008350:	f1c0 0020 	rsb	r0, r0, #32
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	4418      	add	r0, r3
 8008358:	f010 001f 	ands.w	r0, r0, #31
 800835c:	f000 8086 	beq.w	800846c <_dtoa_r+0x91c>
 8008360:	f1c0 0320 	rsb	r3, r0, #32
 8008364:	2b04      	cmp	r3, #4
 8008366:	dd7f      	ble.n	8008468 <_dtoa_r+0x918>
 8008368:	f1c0 001c 	rsb	r0, r0, #28
 800836c:	9b04      	ldr	r3, [sp, #16]
 800836e:	4403      	add	r3, r0
 8008370:	4480      	add	r8, r0
 8008372:	4405      	add	r5, r0
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	f1b8 0f00 	cmp.w	r8, #0
 800837a:	dd05      	ble.n	8008388 <_dtoa_r+0x838>
 800837c:	4659      	mov	r1, fp
 800837e:	4642      	mov	r2, r8
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fe1d 	bl	8008fc0 <__lshift>
 8008386:	4683      	mov	fp, r0
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	dd05      	ble.n	800839a <_dtoa_r+0x84a>
 800838e:	4631      	mov	r1, r6
 8008390:	461a      	mov	r2, r3
 8008392:	4620      	mov	r0, r4
 8008394:	f000 fe14 	bl	8008fc0 <__lshift>
 8008398:	4606      	mov	r6, r0
 800839a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d069      	beq.n	8008474 <_dtoa_r+0x924>
 80083a0:	4631      	mov	r1, r6
 80083a2:	4658      	mov	r0, fp
 80083a4:	f000 fe78 	bl	8009098 <__mcmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	da63      	bge.n	8008474 <_dtoa_r+0x924>
 80083ac:	2300      	movs	r3, #0
 80083ae:	4659      	mov	r1, fp
 80083b0:	220a      	movs	r2, #10
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 fc54 	bl	8008c60 <__multadd>
 80083b8:	9b08      	ldr	r3, [sp, #32]
 80083ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083be:	4683      	mov	fp, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 818f 	beq.w	80086e4 <_dtoa_r+0xb94>
 80083c6:	4639      	mov	r1, r7
 80083c8:	2300      	movs	r3, #0
 80083ca:	220a      	movs	r2, #10
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 fc47 	bl	8008c60 <__multadd>
 80083d2:	f1b9 0f00 	cmp.w	r9, #0
 80083d6:	4607      	mov	r7, r0
 80083d8:	f300 808e 	bgt.w	80084f8 <_dtoa_r+0x9a8>
 80083dc:	9b05      	ldr	r3, [sp, #20]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	dc50      	bgt.n	8008484 <_dtoa_r+0x934>
 80083e2:	e089      	b.n	80084f8 <_dtoa_r+0x9a8>
 80083e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083ea:	e75d      	b.n	80082a8 <_dtoa_r+0x758>
 80083ec:	9b01      	ldr	r3, [sp, #4]
 80083ee:	1e5e      	subs	r6, r3, #1
 80083f0:	9b06      	ldr	r3, [sp, #24]
 80083f2:	42b3      	cmp	r3, r6
 80083f4:	bfbf      	itttt	lt
 80083f6:	9b06      	ldrlt	r3, [sp, #24]
 80083f8:	9606      	strlt	r6, [sp, #24]
 80083fa:	1af2      	sublt	r2, r6, r3
 80083fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80083fe:	bfb6      	itet	lt
 8008400:	189b      	addlt	r3, r3, r2
 8008402:	1b9e      	subge	r6, r3, r6
 8008404:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008406:	9b01      	ldr	r3, [sp, #4]
 8008408:	bfb8      	it	lt
 800840a:	2600      	movlt	r6, #0
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfb5      	itete	lt
 8008410:	eba8 0503 	sublt.w	r5, r8, r3
 8008414:	9b01      	ldrge	r3, [sp, #4]
 8008416:	2300      	movlt	r3, #0
 8008418:	4645      	movge	r5, r8
 800841a:	e747      	b.n	80082ac <_dtoa_r+0x75c>
 800841c:	9e06      	ldr	r6, [sp, #24]
 800841e:	9f08      	ldr	r7, [sp, #32]
 8008420:	4645      	mov	r5, r8
 8008422:	e74c      	b.n	80082be <_dtoa_r+0x76e>
 8008424:	9a06      	ldr	r2, [sp, #24]
 8008426:	e775      	b.n	8008314 <_dtoa_r+0x7c4>
 8008428:	9b05      	ldr	r3, [sp, #20]
 800842a:	2b01      	cmp	r3, #1
 800842c:	dc18      	bgt.n	8008460 <_dtoa_r+0x910>
 800842e:	9b02      	ldr	r3, [sp, #8]
 8008430:	b9b3      	cbnz	r3, 8008460 <_dtoa_r+0x910>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008438:	b9a3      	cbnz	r3, 8008464 <_dtoa_r+0x914>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008440:	0d1b      	lsrs	r3, r3, #20
 8008442:	051b      	lsls	r3, r3, #20
 8008444:	b12b      	cbz	r3, 8008452 <_dtoa_r+0x902>
 8008446:	9b04      	ldr	r3, [sp, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	f108 0801 	add.w	r8, r8, #1
 8008450:	2301      	movs	r3, #1
 8008452:	9306      	str	r3, [sp, #24]
 8008454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008456:	2b00      	cmp	r3, #0
 8008458:	f47f af74 	bne.w	8008344 <_dtoa_r+0x7f4>
 800845c:	2001      	movs	r0, #1
 800845e:	e779      	b.n	8008354 <_dtoa_r+0x804>
 8008460:	2300      	movs	r3, #0
 8008462:	e7f6      	b.n	8008452 <_dtoa_r+0x902>
 8008464:	9b02      	ldr	r3, [sp, #8]
 8008466:	e7f4      	b.n	8008452 <_dtoa_r+0x902>
 8008468:	d085      	beq.n	8008376 <_dtoa_r+0x826>
 800846a:	4618      	mov	r0, r3
 800846c:	301c      	adds	r0, #28
 800846e:	e77d      	b.n	800836c <_dtoa_r+0x81c>
 8008470:	40240000 	.word	0x40240000
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	dc38      	bgt.n	80084ec <_dtoa_r+0x99c>
 800847a:	9b05      	ldr	r3, [sp, #20]
 800847c:	2b02      	cmp	r3, #2
 800847e:	dd35      	ble.n	80084ec <_dtoa_r+0x99c>
 8008480:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008484:	f1b9 0f00 	cmp.w	r9, #0
 8008488:	d10d      	bne.n	80084a6 <_dtoa_r+0x956>
 800848a:	4631      	mov	r1, r6
 800848c:	464b      	mov	r3, r9
 800848e:	2205      	movs	r2, #5
 8008490:	4620      	mov	r0, r4
 8008492:	f000 fbe5 	bl	8008c60 <__multadd>
 8008496:	4601      	mov	r1, r0
 8008498:	4606      	mov	r6, r0
 800849a:	4658      	mov	r0, fp
 800849c:	f000 fdfc 	bl	8009098 <__mcmp>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	f73f adbd 	bgt.w	8008020 <_dtoa_r+0x4d0>
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	9d00      	ldr	r5, [sp, #0]
 80084aa:	ea6f 0a03 	mvn.w	sl, r3
 80084ae:	f04f 0800 	mov.w	r8, #0
 80084b2:	4631      	mov	r1, r6
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fbb1 	bl	8008c1c <_Bfree>
 80084ba:	2f00      	cmp	r7, #0
 80084bc:	f43f aeb4 	beq.w	8008228 <_dtoa_r+0x6d8>
 80084c0:	f1b8 0f00 	cmp.w	r8, #0
 80084c4:	d005      	beq.n	80084d2 <_dtoa_r+0x982>
 80084c6:	45b8      	cmp	r8, r7
 80084c8:	d003      	beq.n	80084d2 <_dtoa_r+0x982>
 80084ca:	4641      	mov	r1, r8
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 fba5 	bl	8008c1c <_Bfree>
 80084d2:	4639      	mov	r1, r7
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 fba1 	bl	8008c1c <_Bfree>
 80084da:	e6a5      	b.n	8008228 <_dtoa_r+0x6d8>
 80084dc:	2600      	movs	r6, #0
 80084de:	4637      	mov	r7, r6
 80084e0:	e7e1      	b.n	80084a6 <_dtoa_r+0x956>
 80084e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80084e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084e8:	4637      	mov	r7, r6
 80084ea:	e599      	b.n	8008020 <_dtoa_r+0x4d0>
 80084ec:	9b08      	ldr	r3, [sp, #32]
 80084ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80fd 	beq.w	80086f2 <_dtoa_r+0xba2>
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	dd05      	ble.n	8008508 <_dtoa_r+0x9b8>
 80084fc:	4639      	mov	r1, r7
 80084fe:	462a      	mov	r2, r5
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fd5d 	bl	8008fc0 <__lshift>
 8008506:	4607      	mov	r7, r0
 8008508:	9b06      	ldr	r3, [sp, #24]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d05c      	beq.n	80085c8 <_dtoa_r+0xa78>
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fb43 	bl	8008b9c <_Balloc>
 8008516:	4605      	mov	r5, r0
 8008518:	b928      	cbnz	r0, 8008526 <_dtoa_r+0x9d6>
 800851a:	4b80      	ldr	r3, [pc, #512]	; (800871c <_dtoa_r+0xbcc>)
 800851c:	4602      	mov	r2, r0
 800851e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008522:	f7ff bb2e 	b.w	8007b82 <_dtoa_r+0x32>
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	3202      	adds	r2, #2
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	f107 010c 	add.w	r1, r7, #12
 8008530:	300c      	adds	r0, #12
 8008532:	f000 fb25 	bl	8008b80 <memcpy>
 8008536:	2201      	movs	r2, #1
 8008538:	4629      	mov	r1, r5
 800853a:	4620      	mov	r0, r4
 800853c:	f000 fd40 	bl	8008fc0 <__lshift>
 8008540:	9b00      	ldr	r3, [sp, #0]
 8008542:	3301      	adds	r3, #1
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	444b      	add	r3, r9
 800854a:	9307      	str	r3, [sp, #28]
 800854c:	9b02      	ldr	r3, [sp, #8]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	46b8      	mov	r8, r7
 8008554:	9306      	str	r3, [sp, #24]
 8008556:	4607      	mov	r7, r0
 8008558:	9b01      	ldr	r3, [sp, #4]
 800855a:	4631      	mov	r1, r6
 800855c:	3b01      	subs	r3, #1
 800855e:	4658      	mov	r0, fp
 8008560:	9302      	str	r3, [sp, #8]
 8008562:	f7ff fa69 	bl	8007a38 <quorem>
 8008566:	4603      	mov	r3, r0
 8008568:	3330      	adds	r3, #48	; 0x30
 800856a:	9004      	str	r0, [sp, #16]
 800856c:	4641      	mov	r1, r8
 800856e:	4658      	mov	r0, fp
 8008570:	9308      	str	r3, [sp, #32]
 8008572:	f000 fd91 	bl	8009098 <__mcmp>
 8008576:	463a      	mov	r2, r7
 8008578:	4681      	mov	r9, r0
 800857a:	4631      	mov	r1, r6
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fda7 	bl	80090d0 <__mdiff>
 8008582:	68c2      	ldr	r2, [r0, #12]
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	4605      	mov	r5, r0
 8008588:	bb02      	cbnz	r2, 80085cc <_dtoa_r+0xa7c>
 800858a:	4601      	mov	r1, r0
 800858c:	4658      	mov	r0, fp
 800858e:	f000 fd83 	bl	8009098 <__mcmp>
 8008592:	9b08      	ldr	r3, [sp, #32]
 8008594:	4602      	mov	r2, r0
 8008596:	4629      	mov	r1, r5
 8008598:	4620      	mov	r0, r4
 800859a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800859e:	f000 fb3d 	bl	8008c1c <_Bfree>
 80085a2:	9b05      	ldr	r3, [sp, #20]
 80085a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a6:	9d01      	ldr	r5, [sp, #4]
 80085a8:	ea43 0102 	orr.w	r1, r3, r2
 80085ac:	9b06      	ldr	r3, [sp, #24]
 80085ae:	430b      	orrs	r3, r1
 80085b0:	9b08      	ldr	r3, [sp, #32]
 80085b2:	d10d      	bne.n	80085d0 <_dtoa_r+0xa80>
 80085b4:	2b39      	cmp	r3, #57	; 0x39
 80085b6:	d029      	beq.n	800860c <_dtoa_r+0xabc>
 80085b8:	f1b9 0f00 	cmp.w	r9, #0
 80085bc:	dd01      	ble.n	80085c2 <_dtoa_r+0xa72>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	3331      	adds	r3, #49	; 0x31
 80085c2:	9a02      	ldr	r2, [sp, #8]
 80085c4:	7013      	strb	r3, [r2, #0]
 80085c6:	e774      	b.n	80084b2 <_dtoa_r+0x962>
 80085c8:	4638      	mov	r0, r7
 80085ca:	e7b9      	b.n	8008540 <_dtoa_r+0x9f0>
 80085cc:	2201      	movs	r2, #1
 80085ce:	e7e2      	b.n	8008596 <_dtoa_r+0xa46>
 80085d0:	f1b9 0f00 	cmp.w	r9, #0
 80085d4:	db06      	blt.n	80085e4 <_dtoa_r+0xa94>
 80085d6:	9905      	ldr	r1, [sp, #20]
 80085d8:	ea41 0909 	orr.w	r9, r1, r9
 80085dc:	9906      	ldr	r1, [sp, #24]
 80085de:	ea59 0101 	orrs.w	r1, r9, r1
 80085e2:	d120      	bne.n	8008626 <_dtoa_r+0xad6>
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	ddec      	ble.n	80085c2 <_dtoa_r+0xa72>
 80085e8:	4659      	mov	r1, fp
 80085ea:	2201      	movs	r2, #1
 80085ec:	4620      	mov	r0, r4
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	f000 fce6 	bl	8008fc0 <__lshift>
 80085f4:	4631      	mov	r1, r6
 80085f6:	4683      	mov	fp, r0
 80085f8:	f000 fd4e 	bl	8009098 <__mcmp>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	dc02      	bgt.n	8008608 <_dtoa_r+0xab8>
 8008602:	d1de      	bne.n	80085c2 <_dtoa_r+0xa72>
 8008604:	07da      	lsls	r2, r3, #31
 8008606:	d5dc      	bpl.n	80085c2 <_dtoa_r+0xa72>
 8008608:	2b39      	cmp	r3, #57	; 0x39
 800860a:	d1d8      	bne.n	80085be <_dtoa_r+0xa6e>
 800860c:	9a02      	ldr	r2, [sp, #8]
 800860e:	2339      	movs	r3, #57	; 0x39
 8008610:	7013      	strb	r3, [r2, #0]
 8008612:	462b      	mov	r3, r5
 8008614:	461d      	mov	r5, r3
 8008616:	3b01      	subs	r3, #1
 8008618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800861c:	2a39      	cmp	r2, #57	; 0x39
 800861e:	d050      	beq.n	80086c2 <_dtoa_r+0xb72>
 8008620:	3201      	adds	r2, #1
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e745      	b.n	80084b2 <_dtoa_r+0x962>
 8008626:	2a00      	cmp	r2, #0
 8008628:	dd03      	ble.n	8008632 <_dtoa_r+0xae2>
 800862a:	2b39      	cmp	r3, #57	; 0x39
 800862c:	d0ee      	beq.n	800860c <_dtoa_r+0xabc>
 800862e:	3301      	adds	r3, #1
 8008630:	e7c7      	b.n	80085c2 <_dtoa_r+0xa72>
 8008632:	9a01      	ldr	r2, [sp, #4]
 8008634:	9907      	ldr	r1, [sp, #28]
 8008636:	f802 3c01 	strb.w	r3, [r2, #-1]
 800863a:	428a      	cmp	r2, r1
 800863c:	d02a      	beq.n	8008694 <_dtoa_r+0xb44>
 800863e:	4659      	mov	r1, fp
 8008640:	2300      	movs	r3, #0
 8008642:	220a      	movs	r2, #10
 8008644:	4620      	mov	r0, r4
 8008646:	f000 fb0b 	bl	8008c60 <__multadd>
 800864a:	45b8      	cmp	r8, r7
 800864c:	4683      	mov	fp, r0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	f04f 020a 	mov.w	r2, #10
 8008656:	4641      	mov	r1, r8
 8008658:	4620      	mov	r0, r4
 800865a:	d107      	bne.n	800866c <_dtoa_r+0xb1c>
 800865c:	f000 fb00 	bl	8008c60 <__multadd>
 8008660:	4680      	mov	r8, r0
 8008662:	4607      	mov	r7, r0
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	3301      	adds	r3, #1
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	e775      	b.n	8008558 <_dtoa_r+0xa08>
 800866c:	f000 faf8 	bl	8008c60 <__multadd>
 8008670:	4639      	mov	r1, r7
 8008672:	4680      	mov	r8, r0
 8008674:	2300      	movs	r3, #0
 8008676:	220a      	movs	r2, #10
 8008678:	4620      	mov	r0, r4
 800867a:	f000 faf1 	bl	8008c60 <__multadd>
 800867e:	4607      	mov	r7, r0
 8008680:	e7f0      	b.n	8008664 <_dtoa_r+0xb14>
 8008682:	f1b9 0f00 	cmp.w	r9, #0
 8008686:	9a00      	ldr	r2, [sp, #0]
 8008688:	bfcc      	ite	gt
 800868a:	464d      	movgt	r5, r9
 800868c:	2501      	movle	r5, #1
 800868e:	4415      	add	r5, r2
 8008690:	f04f 0800 	mov.w	r8, #0
 8008694:	4659      	mov	r1, fp
 8008696:	2201      	movs	r2, #1
 8008698:	4620      	mov	r0, r4
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	f000 fc90 	bl	8008fc0 <__lshift>
 80086a0:	4631      	mov	r1, r6
 80086a2:	4683      	mov	fp, r0
 80086a4:	f000 fcf8 	bl	8009098 <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	dcb2      	bgt.n	8008612 <_dtoa_r+0xac2>
 80086ac:	d102      	bne.n	80086b4 <_dtoa_r+0xb64>
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	07db      	lsls	r3, r3, #31
 80086b2:	d4ae      	bmi.n	8008612 <_dtoa_r+0xac2>
 80086b4:	462b      	mov	r3, r5
 80086b6:	461d      	mov	r5, r3
 80086b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086bc:	2a30      	cmp	r2, #48	; 0x30
 80086be:	d0fa      	beq.n	80086b6 <_dtoa_r+0xb66>
 80086c0:	e6f7      	b.n	80084b2 <_dtoa_r+0x962>
 80086c2:	9a00      	ldr	r2, [sp, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d1a5      	bne.n	8008614 <_dtoa_r+0xac4>
 80086c8:	f10a 0a01 	add.w	sl, sl, #1
 80086cc:	2331      	movs	r3, #49	; 0x31
 80086ce:	e779      	b.n	80085c4 <_dtoa_r+0xa74>
 80086d0:	4b13      	ldr	r3, [pc, #76]	; (8008720 <_dtoa_r+0xbd0>)
 80086d2:	f7ff baaf 	b.w	8007c34 <_dtoa_r+0xe4>
 80086d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f47f aa86 	bne.w	8007bea <_dtoa_r+0x9a>
 80086de:	4b11      	ldr	r3, [pc, #68]	; (8008724 <_dtoa_r+0xbd4>)
 80086e0:	f7ff baa8 	b.w	8007c34 <_dtoa_r+0xe4>
 80086e4:	f1b9 0f00 	cmp.w	r9, #0
 80086e8:	dc03      	bgt.n	80086f2 <_dtoa_r+0xba2>
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	f73f aec9 	bgt.w	8008484 <_dtoa_r+0x934>
 80086f2:	9d00      	ldr	r5, [sp, #0]
 80086f4:	4631      	mov	r1, r6
 80086f6:	4658      	mov	r0, fp
 80086f8:	f7ff f99e 	bl	8007a38 <quorem>
 80086fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008700:	f805 3b01 	strb.w	r3, [r5], #1
 8008704:	9a00      	ldr	r2, [sp, #0]
 8008706:	1aaa      	subs	r2, r5, r2
 8008708:	4591      	cmp	r9, r2
 800870a:	ddba      	ble.n	8008682 <_dtoa_r+0xb32>
 800870c:	4659      	mov	r1, fp
 800870e:	2300      	movs	r3, #0
 8008710:	220a      	movs	r2, #10
 8008712:	4620      	mov	r0, r4
 8008714:	f000 faa4 	bl	8008c60 <__multadd>
 8008718:	4683      	mov	fp, r0
 800871a:	e7eb      	b.n	80086f4 <_dtoa_r+0xba4>
 800871c:	08009b87 	.word	0x08009b87
 8008720:	08009ae0 	.word	0x08009ae0
 8008724:	08009b04 	.word	0x08009b04

08008728 <__sflush_r>:
 8008728:	898a      	ldrh	r2, [r1, #12]
 800872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	4605      	mov	r5, r0
 8008730:	0710      	lsls	r0, r2, #28
 8008732:	460c      	mov	r4, r1
 8008734:	d458      	bmi.n	80087e8 <__sflush_r+0xc0>
 8008736:	684b      	ldr	r3, [r1, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	dc05      	bgt.n	8008748 <__sflush_r+0x20>
 800873c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	dc02      	bgt.n	8008748 <__sflush_r+0x20>
 8008742:	2000      	movs	r0, #0
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800874a:	2e00      	cmp	r6, #0
 800874c:	d0f9      	beq.n	8008742 <__sflush_r+0x1a>
 800874e:	2300      	movs	r3, #0
 8008750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008754:	682f      	ldr	r7, [r5, #0]
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	d032      	beq.n	80087c0 <__sflush_r+0x98>
 800875a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	075a      	lsls	r2, r3, #29
 8008760:	d505      	bpl.n	800876e <__sflush_r+0x46>
 8008762:	6863      	ldr	r3, [r4, #4]
 8008764:	1ac0      	subs	r0, r0, r3
 8008766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008768:	b10b      	cbz	r3, 800876e <__sflush_r+0x46>
 800876a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800876c:	1ac0      	subs	r0, r0, r3
 800876e:	2300      	movs	r3, #0
 8008770:	4602      	mov	r2, r0
 8008772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008774:	6a21      	ldr	r1, [r4, #32]
 8008776:	4628      	mov	r0, r5
 8008778:	47b0      	blx	r6
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	d106      	bne.n	800878e <__sflush_r+0x66>
 8008780:	6829      	ldr	r1, [r5, #0]
 8008782:	291d      	cmp	r1, #29
 8008784:	d82c      	bhi.n	80087e0 <__sflush_r+0xb8>
 8008786:	4a2a      	ldr	r2, [pc, #168]	; (8008830 <__sflush_r+0x108>)
 8008788:	40ca      	lsrs	r2, r1
 800878a:	07d6      	lsls	r6, r2, #31
 800878c:	d528      	bpl.n	80087e0 <__sflush_r+0xb8>
 800878e:	2200      	movs	r2, #0
 8008790:	6062      	str	r2, [r4, #4]
 8008792:	04d9      	lsls	r1, r3, #19
 8008794:	6922      	ldr	r2, [r4, #16]
 8008796:	6022      	str	r2, [r4, #0]
 8008798:	d504      	bpl.n	80087a4 <__sflush_r+0x7c>
 800879a:	1c42      	adds	r2, r0, #1
 800879c:	d101      	bne.n	80087a2 <__sflush_r+0x7a>
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	b903      	cbnz	r3, 80087a4 <__sflush_r+0x7c>
 80087a2:	6560      	str	r0, [r4, #84]	; 0x54
 80087a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087a6:	602f      	str	r7, [r5, #0]
 80087a8:	2900      	cmp	r1, #0
 80087aa:	d0ca      	beq.n	8008742 <__sflush_r+0x1a>
 80087ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b0:	4299      	cmp	r1, r3
 80087b2:	d002      	beq.n	80087ba <__sflush_r+0x92>
 80087b4:	4628      	mov	r0, r5
 80087b6:	f000 fd7f 	bl	80092b8 <_free_r>
 80087ba:	2000      	movs	r0, #0
 80087bc:	6360      	str	r0, [r4, #52]	; 0x34
 80087be:	e7c1      	b.n	8008744 <__sflush_r+0x1c>
 80087c0:	6a21      	ldr	r1, [r4, #32]
 80087c2:	2301      	movs	r3, #1
 80087c4:	4628      	mov	r0, r5
 80087c6:	47b0      	blx	r6
 80087c8:	1c41      	adds	r1, r0, #1
 80087ca:	d1c7      	bne.n	800875c <__sflush_r+0x34>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0c4      	beq.n	800875c <__sflush_r+0x34>
 80087d2:	2b1d      	cmp	r3, #29
 80087d4:	d001      	beq.n	80087da <__sflush_r+0xb2>
 80087d6:	2b16      	cmp	r3, #22
 80087d8:	d101      	bne.n	80087de <__sflush_r+0xb6>
 80087da:	602f      	str	r7, [r5, #0]
 80087dc:	e7b1      	b.n	8008742 <__sflush_r+0x1a>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	e7ad      	b.n	8008744 <__sflush_r+0x1c>
 80087e8:	690f      	ldr	r7, [r1, #16]
 80087ea:	2f00      	cmp	r7, #0
 80087ec:	d0a9      	beq.n	8008742 <__sflush_r+0x1a>
 80087ee:	0793      	lsls	r3, r2, #30
 80087f0:	680e      	ldr	r6, [r1, #0]
 80087f2:	bf08      	it	eq
 80087f4:	694b      	ldreq	r3, [r1, #20]
 80087f6:	600f      	str	r7, [r1, #0]
 80087f8:	bf18      	it	ne
 80087fa:	2300      	movne	r3, #0
 80087fc:	eba6 0807 	sub.w	r8, r6, r7
 8008800:	608b      	str	r3, [r1, #8]
 8008802:	f1b8 0f00 	cmp.w	r8, #0
 8008806:	dd9c      	ble.n	8008742 <__sflush_r+0x1a>
 8008808:	6a21      	ldr	r1, [r4, #32]
 800880a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800880c:	4643      	mov	r3, r8
 800880e:	463a      	mov	r2, r7
 8008810:	4628      	mov	r0, r5
 8008812:	47b0      	blx	r6
 8008814:	2800      	cmp	r0, #0
 8008816:	dc06      	bgt.n	8008826 <__sflush_r+0xfe>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	e78e      	b.n	8008744 <__sflush_r+0x1c>
 8008826:	4407      	add	r7, r0
 8008828:	eba8 0800 	sub.w	r8, r8, r0
 800882c:	e7e9      	b.n	8008802 <__sflush_r+0xda>
 800882e:	bf00      	nop
 8008830:	20400001 	.word	0x20400001

08008834 <_fflush_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	690b      	ldr	r3, [r1, #16]
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	b913      	cbnz	r3, 8008844 <_fflush_r+0x10>
 800883e:	2500      	movs	r5, #0
 8008840:	4628      	mov	r0, r5
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	b118      	cbz	r0, 800884e <_fflush_r+0x1a>
 8008846:	6983      	ldr	r3, [r0, #24]
 8008848:	b90b      	cbnz	r3, 800884e <_fflush_r+0x1a>
 800884a:	f000 f887 	bl	800895c <__sinit>
 800884e:	4b14      	ldr	r3, [pc, #80]	; (80088a0 <_fflush_r+0x6c>)
 8008850:	429c      	cmp	r4, r3
 8008852:	d11b      	bne.n	800888c <_fflush_r+0x58>
 8008854:	686c      	ldr	r4, [r5, #4]
 8008856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0ef      	beq.n	800883e <_fflush_r+0xa>
 800885e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008860:	07d0      	lsls	r0, r2, #31
 8008862:	d404      	bmi.n	800886e <_fflush_r+0x3a>
 8008864:	0599      	lsls	r1, r3, #22
 8008866:	d402      	bmi.n	800886e <_fflush_r+0x3a>
 8008868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800886a:	f000 f91a 	bl	8008aa2 <__retarget_lock_acquire_recursive>
 800886e:	4628      	mov	r0, r5
 8008870:	4621      	mov	r1, r4
 8008872:	f7ff ff59 	bl	8008728 <__sflush_r>
 8008876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008878:	07da      	lsls	r2, r3, #31
 800887a:	4605      	mov	r5, r0
 800887c:	d4e0      	bmi.n	8008840 <_fflush_r+0xc>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	059b      	lsls	r3, r3, #22
 8008882:	d4dd      	bmi.n	8008840 <_fflush_r+0xc>
 8008884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008886:	f000 f90d 	bl	8008aa4 <__retarget_lock_release_recursive>
 800888a:	e7d9      	b.n	8008840 <_fflush_r+0xc>
 800888c:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <_fflush_r+0x70>)
 800888e:	429c      	cmp	r4, r3
 8008890:	d101      	bne.n	8008896 <_fflush_r+0x62>
 8008892:	68ac      	ldr	r4, [r5, #8]
 8008894:	e7df      	b.n	8008856 <_fflush_r+0x22>
 8008896:	4b04      	ldr	r3, [pc, #16]	; (80088a8 <_fflush_r+0x74>)
 8008898:	429c      	cmp	r4, r3
 800889a:	bf08      	it	eq
 800889c:	68ec      	ldreq	r4, [r5, #12]
 800889e:	e7da      	b.n	8008856 <_fflush_r+0x22>
 80088a0:	08009bb8 	.word	0x08009bb8
 80088a4:	08009bd8 	.word	0x08009bd8
 80088a8:	08009b98 	.word	0x08009b98

080088ac <std>:
 80088ac:	2300      	movs	r3, #0
 80088ae:	b510      	push	{r4, lr}
 80088b0:	4604      	mov	r4, r0
 80088b2:	e9c0 3300 	strd	r3, r3, [r0]
 80088b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ba:	6083      	str	r3, [r0, #8]
 80088bc:	8181      	strh	r1, [r0, #12]
 80088be:	6643      	str	r3, [r0, #100]	; 0x64
 80088c0:	81c2      	strh	r2, [r0, #14]
 80088c2:	6183      	str	r3, [r0, #24]
 80088c4:	4619      	mov	r1, r3
 80088c6:	2208      	movs	r2, #8
 80088c8:	305c      	adds	r0, #92	; 0x5c
 80088ca:	f7fe faf5 	bl	8006eb8 <memset>
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <std+0x38>)
 80088d0:	6263      	str	r3, [r4, #36]	; 0x24
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <std+0x3c>)
 80088d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <std+0x40>)
 80088d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <std+0x44>)
 80088dc:	6224      	str	r4, [r4, #32]
 80088de:	6323      	str	r3, [r4, #48]	; 0x30
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	bf00      	nop
 80088e4:	080096e1 	.word	0x080096e1
 80088e8:	08009703 	.word	0x08009703
 80088ec:	0800973b 	.word	0x0800973b
 80088f0:	0800975f 	.word	0x0800975f

080088f4 <_cleanup_r>:
 80088f4:	4901      	ldr	r1, [pc, #4]	; (80088fc <_cleanup_r+0x8>)
 80088f6:	f000 b8af 	b.w	8008a58 <_fwalk_reent>
 80088fa:	bf00      	nop
 80088fc:	08008835 	.word	0x08008835

08008900 <__sfmoreglue>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	1e4a      	subs	r2, r1, #1
 8008904:	2568      	movs	r5, #104	; 0x68
 8008906:	4355      	muls	r5, r2
 8008908:	460e      	mov	r6, r1
 800890a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800890e:	f000 fd23 	bl	8009358 <_malloc_r>
 8008912:	4604      	mov	r4, r0
 8008914:	b140      	cbz	r0, 8008928 <__sfmoreglue+0x28>
 8008916:	2100      	movs	r1, #0
 8008918:	e9c0 1600 	strd	r1, r6, [r0]
 800891c:	300c      	adds	r0, #12
 800891e:	60a0      	str	r0, [r4, #8]
 8008920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008924:	f7fe fac8 	bl	8006eb8 <memset>
 8008928:	4620      	mov	r0, r4
 800892a:	bd70      	pop	{r4, r5, r6, pc}

0800892c <__sfp_lock_acquire>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__sfp_lock_acquire+0x8>)
 800892e:	f000 b8b8 	b.w	8008aa2 <__retarget_lock_acquire_recursive>
 8008932:	bf00      	nop
 8008934:	20000308 	.word	0x20000308

08008938 <__sfp_lock_release>:
 8008938:	4801      	ldr	r0, [pc, #4]	; (8008940 <__sfp_lock_release+0x8>)
 800893a:	f000 b8b3 	b.w	8008aa4 <__retarget_lock_release_recursive>
 800893e:	bf00      	nop
 8008940:	20000308 	.word	0x20000308

08008944 <__sinit_lock_acquire>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__sinit_lock_acquire+0x8>)
 8008946:	f000 b8ac 	b.w	8008aa2 <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	20000303 	.word	0x20000303

08008950 <__sinit_lock_release>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__sinit_lock_release+0x8>)
 8008952:	f000 b8a7 	b.w	8008aa4 <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	20000303 	.word	0x20000303

0800895c <__sinit>:
 800895c:	b510      	push	{r4, lr}
 800895e:	4604      	mov	r4, r0
 8008960:	f7ff fff0 	bl	8008944 <__sinit_lock_acquire>
 8008964:	69a3      	ldr	r3, [r4, #24]
 8008966:	b11b      	cbz	r3, 8008970 <__sinit+0x14>
 8008968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800896c:	f7ff bff0 	b.w	8008950 <__sinit_lock_release>
 8008970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008974:	6523      	str	r3, [r4, #80]	; 0x50
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <__sinit+0x68>)
 8008978:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <__sinit+0x6c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	62a2      	str	r2, [r4, #40]	; 0x28
 800897e:	42a3      	cmp	r3, r4
 8008980:	bf04      	itt	eq
 8008982:	2301      	moveq	r3, #1
 8008984:	61a3      	streq	r3, [r4, #24]
 8008986:	4620      	mov	r0, r4
 8008988:	f000 f820 	bl	80089cc <__sfp>
 800898c:	6060      	str	r0, [r4, #4]
 800898e:	4620      	mov	r0, r4
 8008990:	f000 f81c 	bl	80089cc <__sfp>
 8008994:	60a0      	str	r0, [r4, #8]
 8008996:	4620      	mov	r0, r4
 8008998:	f000 f818 	bl	80089cc <__sfp>
 800899c:	2200      	movs	r2, #0
 800899e:	60e0      	str	r0, [r4, #12]
 80089a0:	2104      	movs	r1, #4
 80089a2:	6860      	ldr	r0, [r4, #4]
 80089a4:	f7ff ff82 	bl	80088ac <std>
 80089a8:	68a0      	ldr	r0, [r4, #8]
 80089aa:	2201      	movs	r2, #1
 80089ac:	2109      	movs	r1, #9
 80089ae:	f7ff ff7d 	bl	80088ac <std>
 80089b2:	68e0      	ldr	r0, [r4, #12]
 80089b4:	2202      	movs	r2, #2
 80089b6:	2112      	movs	r1, #18
 80089b8:	f7ff ff78 	bl	80088ac <std>
 80089bc:	2301      	movs	r3, #1
 80089be:	61a3      	str	r3, [r4, #24]
 80089c0:	e7d2      	b.n	8008968 <__sinit+0xc>
 80089c2:	bf00      	nop
 80089c4:	08009acc 	.word	0x08009acc
 80089c8:	080088f5 	.word	0x080088f5

080089cc <__sfp>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	4607      	mov	r7, r0
 80089d0:	f7ff ffac 	bl	800892c <__sfp_lock_acquire>
 80089d4:	4b1e      	ldr	r3, [pc, #120]	; (8008a50 <__sfp+0x84>)
 80089d6:	681e      	ldr	r6, [r3, #0]
 80089d8:	69b3      	ldr	r3, [r6, #24]
 80089da:	b913      	cbnz	r3, 80089e2 <__sfp+0x16>
 80089dc:	4630      	mov	r0, r6
 80089de:	f7ff ffbd 	bl	800895c <__sinit>
 80089e2:	3648      	adds	r6, #72	; 0x48
 80089e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	d503      	bpl.n	80089f4 <__sfp+0x28>
 80089ec:	6833      	ldr	r3, [r6, #0]
 80089ee:	b30b      	cbz	r3, 8008a34 <__sfp+0x68>
 80089f0:	6836      	ldr	r6, [r6, #0]
 80089f2:	e7f7      	b.n	80089e4 <__sfp+0x18>
 80089f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089f8:	b9d5      	cbnz	r5, 8008a30 <__sfp+0x64>
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <__sfp+0x88>)
 80089fc:	60e3      	str	r3, [r4, #12]
 80089fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a02:	6665      	str	r5, [r4, #100]	; 0x64
 8008a04:	f000 f84c 	bl	8008aa0 <__retarget_lock_init_recursive>
 8008a08:	f7ff ff96 	bl	8008938 <__sfp_lock_release>
 8008a0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a14:	6025      	str	r5, [r4, #0]
 8008a16:	61a5      	str	r5, [r4, #24]
 8008a18:	2208      	movs	r2, #8
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a20:	f7fe fa4a 	bl	8006eb8 <memset>
 8008a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a30:	3468      	adds	r4, #104	; 0x68
 8008a32:	e7d9      	b.n	80089e8 <__sfp+0x1c>
 8008a34:	2104      	movs	r1, #4
 8008a36:	4638      	mov	r0, r7
 8008a38:	f7ff ff62 	bl	8008900 <__sfmoreglue>
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	6030      	str	r0, [r6, #0]
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1d5      	bne.n	80089f0 <__sfp+0x24>
 8008a44:	f7ff ff78 	bl	8008938 <__sfp_lock_release>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	e7ee      	b.n	8008a2c <__sfp+0x60>
 8008a4e:	bf00      	nop
 8008a50:	08009acc 	.word	0x08009acc
 8008a54:	ffff0001 	.word	0xffff0001

08008a58 <_fwalk_reent>:
 8008a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	4688      	mov	r8, r1
 8008a60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a64:	2700      	movs	r7, #0
 8008a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8008a6e:	d505      	bpl.n	8008a7c <_fwalk_reent+0x24>
 8008a70:	6824      	ldr	r4, [r4, #0]
 8008a72:	2c00      	cmp	r4, #0
 8008a74:	d1f7      	bne.n	8008a66 <_fwalk_reent+0xe>
 8008a76:	4638      	mov	r0, r7
 8008a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7c:	89ab      	ldrh	r3, [r5, #12]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d907      	bls.n	8008a92 <_fwalk_reent+0x3a>
 8008a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a86:	3301      	adds	r3, #1
 8008a88:	d003      	beq.n	8008a92 <_fwalk_reent+0x3a>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	47c0      	blx	r8
 8008a90:	4307      	orrs	r7, r0
 8008a92:	3568      	adds	r5, #104	; 0x68
 8008a94:	e7e9      	b.n	8008a6a <_fwalk_reent+0x12>
	...

08008a98 <_localeconv_r>:
 8008a98:	4800      	ldr	r0, [pc, #0]	; (8008a9c <_localeconv_r+0x4>)
 8008a9a:	4770      	bx	lr
 8008a9c:	20000164 	.word	0x20000164

08008aa0 <__retarget_lock_init_recursive>:
 8008aa0:	4770      	bx	lr

08008aa2 <__retarget_lock_acquire_recursive>:
 8008aa2:	4770      	bx	lr

08008aa4 <__retarget_lock_release_recursive>:
 8008aa4:	4770      	bx	lr

08008aa6 <__swhatbuf_r>:
 8008aa6:	b570      	push	{r4, r5, r6, lr}
 8008aa8:	460e      	mov	r6, r1
 8008aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aae:	2900      	cmp	r1, #0
 8008ab0:	b096      	sub	sp, #88	; 0x58
 8008ab2:	4614      	mov	r4, r2
 8008ab4:	461d      	mov	r5, r3
 8008ab6:	da07      	bge.n	8008ac8 <__swhatbuf_r+0x22>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	89b3      	ldrh	r3, [r6, #12]
 8008abe:	061a      	lsls	r2, r3, #24
 8008ac0:	d410      	bmi.n	8008ae4 <__swhatbuf_r+0x3e>
 8008ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac6:	e00e      	b.n	8008ae6 <__swhatbuf_r+0x40>
 8008ac8:	466a      	mov	r2, sp
 8008aca:	f000 fe9f 	bl	800980c <_fstat_r>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	dbf2      	blt.n	8008ab8 <__swhatbuf_r+0x12>
 8008ad2:	9a01      	ldr	r2, [sp, #4]
 8008ad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008adc:	425a      	negs	r2, r3
 8008ade:	415a      	adcs	r2, r3
 8008ae0:	602a      	str	r2, [r5, #0]
 8008ae2:	e7ee      	b.n	8008ac2 <__swhatbuf_r+0x1c>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	b016      	add	sp, #88	; 0x58
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08008af0 <__smakebuf_r>:
 8008af0:	898b      	ldrh	r3, [r1, #12]
 8008af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008af4:	079d      	lsls	r5, r3, #30
 8008af6:	4606      	mov	r6, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	d507      	bpl.n	8008b0c <__smakebuf_r+0x1c>
 8008afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	2301      	movs	r3, #1
 8008b06:	6163      	str	r3, [r4, #20]
 8008b08:	b002      	add	sp, #8
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	ab01      	add	r3, sp, #4
 8008b0e:	466a      	mov	r2, sp
 8008b10:	f7ff ffc9 	bl	8008aa6 <__swhatbuf_r>
 8008b14:	9900      	ldr	r1, [sp, #0]
 8008b16:	4605      	mov	r5, r0
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f000 fc1d 	bl	8009358 <_malloc_r>
 8008b1e:	b948      	cbnz	r0, 8008b34 <__smakebuf_r+0x44>
 8008b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d4ef      	bmi.n	8008b08 <__smakebuf_r+0x18>
 8008b28:	f023 0303 	bic.w	r3, r3, #3
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	e7e3      	b.n	8008afc <__smakebuf_r+0xc>
 8008b34:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <__smakebuf_r+0x7c>)
 8008b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	6020      	str	r0, [r4, #0]
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	6163      	str	r3, [r4, #20]
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	6120      	str	r0, [r4, #16]
 8008b4a:	b15b      	cbz	r3, 8008b64 <__smakebuf_r+0x74>
 8008b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 fe6d 	bl	8009830 <_isatty_r>
 8008b56:	b128      	cbz	r0, 8008b64 <__smakebuf_r+0x74>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	89a0      	ldrh	r0, [r4, #12]
 8008b66:	4305      	orrs	r5, r0
 8008b68:	81a5      	strh	r5, [r4, #12]
 8008b6a:	e7cd      	b.n	8008b08 <__smakebuf_r+0x18>
 8008b6c:	080088f5 	.word	0x080088f5

08008b70 <malloc>:
 8008b70:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <malloc+0xc>)
 8008b72:	4601      	mov	r1, r0
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f000 bbef 	b.w	8009358 <_malloc_r>
 8008b7a:	bf00      	nop
 8008b7c:	20000010 	.word	0x20000010

08008b80 <memcpy>:
 8008b80:	440a      	add	r2, r1
 8008b82:	4291      	cmp	r1, r2
 8008b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b88:	d100      	bne.n	8008b8c <memcpy+0xc>
 8008b8a:	4770      	bx	lr
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b96:	4291      	cmp	r1, r2
 8008b98:	d1f9      	bne.n	8008b8e <memcpy+0xe>
 8008b9a:	bd10      	pop	{r4, pc}

08008b9c <_Balloc>:
 8008b9c:	b570      	push	{r4, r5, r6, lr}
 8008b9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	b976      	cbnz	r6, 8008bc4 <_Balloc+0x28>
 8008ba6:	2010      	movs	r0, #16
 8008ba8:	f7ff ffe2 	bl	8008b70 <malloc>
 8008bac:	4602      	mov	r2, r0
 8008bae:	6260      	str	r0, [r4, #36]	; 0x24
 8008bb0:	b920      	cbnz	r0, 8008bbc <_Balloc+0x20>
 8008bb2:	4b18      	ldr	r3, [pc, #96]	; (8008c14 <_Balloc+0x78>)
 8008bb4:	4818      	ldr	r0, [pc, #96]	; (8008c18 <_Balloc+0x7c>)
 8008bb6:	2166      	movs	r1, #102	; 0x66
 8008bb8:	f000 fde8 	bl	800978c <__assert_func>
 8008bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bc0:	6006      	str	r6, [r0, #0]
 8008bc2:	60c6      	str	r6, [r0, #12]
 8008bc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bc6:	68f3      	ldr	r3, [r6, #12]
 8008bc8:	b183      	cbz	r3, 8008bec <_Balloc+0x50>
 8008bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bd2:	b9b8      	cbnz	r0, 8008c04 <_Balloc+0x68>
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bda:	1d72      	adds	r2, r6, #5
 8008bdc:	0092      	lsls	r2, r2, #2
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 fb5a 	bl	8009298 <_calloc_r>
 8008be4:	b160      	cbz	r0, 8008c00 <_Balloc+0x64>
 8008be6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bea:	e00e      	b.n	8008c0a <_Balloc+0x6e>
 8008bec:	2221      	movs	r2, #33	; 0x21
 8008bee:	2104      	movs	r1, #4
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f000 fb51 	bl	8009298 <_calloc_r>
 8008bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf8:	60f0      	str	r0, [r6, #12]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e4      	bne.n	8008bca <_Balloc+0x2e>
 8008c00:	2000      	movs	r0, #0
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	6802      	ldr	r2, [r0, #0]
 8008c06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c10:	e7f7      	b.n	8008c02 <_Balloc+0x66>
 8008c12:	bf00      	nop
 8008c14:	08009b11 	.word	0x08009b11
 8008c18:	08009bf8 	.word	0x08009bf8

08008c1c <_Bfree>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c20:	4605      	mov	r5, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	b976      	cbnz	r6, 8008c44 <_Bfree+0x28>
 8008c26:	2010      	movs	r0, #16
 8008c28:	f7ff ffa2 	bl	8008b70 <malloc>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	6268      	str	r0, [r5, #36]	; 0x24
 8008c30:	b920      	cbnz	r0, 8008c3c <_Bfree+0x20>
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <_Bfree+0x3c>)
 8008c34:	4809      	ldr	r0, [pc, #36]	; (8008c5c <_Bfree+0x40>)
 8008c36:	218a      	movs	r1, #138	; 0x8a
 8008c38:	f000 fda8 	bl	800978c <__assert_func>
 8008c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c40:	6006      	str	r6, [r0, #0]
 8008c42:	60c6      	str	r6, [r0, #12]
 8008c44:	b13c      	cbz	r4, 8008c56 <_Bfree+0x3a>
 8008c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c50:	6021      	str	r1, [r4, #0]
 8008c52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	08009b11 	.word	0x08009b11
 8008c5c:	08009bf8 	.word	0x08009bf8

08008c60 <__multadd>:
 8008c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c64:	690e      	ldr	r6, [r1, #16]
 8008c66:	4607      	mov	r7, r0
 8008c68:	4698      	mov	r8, r3
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	f101 0014 	add.w	r0, r1, #20
 8008c70:	2300      	movs	r3, #0
 8008c72:	6805      	ldr	r5, [r0, #0]
 8008c74:	b2a9      	uxth	r1, r5
 8008c76:	fb02 8101 	mla	r1, r2, r1, r8
 8008c7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c7e:	0c2d      	lsrs	r5, r5, #16
 8008c80:	fb02 c505 	mla	r5, r2, r5, ip
 8008c84:	b289      	uxth	r1, r1
 8008c86:	3301      	adds	r3, #1
 8008c88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008c8c:	429e      	cmp	r6, r3
 8008c8e:	f840 1b04 	str.w	r1, [r0], #4
 8008c92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c96:	dcec      	bgt.n	8008c72 <__multadd+0x12>
 8008c98:	f1b8 0f00 	cmp.w	r8, #0
 8008c9c:	d022      	beq.n	8008ce4 <__multadd+0x84>
 8008c9e:	68a3      	ldr	r3, [r4, #8]
 8008ca0:	42b3      	cmp	r3, r6
 8008ca2:	dc19      	bgt.n	8008cd8 <__multadd+0x78>
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	3101      	adds	r1, #1
 8008caa:	f7ff ff77 	bl	8008b9c <_Balloc>
 8008cae:	4605      	mov	r5, r0
 8008cb0:	b928      	cbnz	r0, 8008cbe <__multadd+0x5e>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	4b0d      	ldr	r3, [pc, #52]	; (8008cec <__multadd+0x8c>)
 8008cb6:	480e      	ldr	r0, [pc, #56]	; (8008cf0 <__multadd+0x90>)
 8008cb8:	21b5      	movs	r1, #181	; 0xb5
 8008cba:	f000 fd67 	bl	800978c <__assert_func>
 8008cbe:	6922      	ldr	r2, [r4, #16]
 8008cc0:	3202      	adds	r2, #2
 8008cc2:	f104 010c 	add.w	r1, r4, #12
 8008cc6:	0092      	lsls	r2, r2, #2
 8008cc8:	300c      	adds	r0, #12
 8008cca:	f7ff ff59 	bl	8008b80 <memcpy>
 8008cce:	4621      	mov	r1, r4
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f7ff ffa3 	bl	8008c1c <_Bfree>
 8008cd6:	462c      	mov	r4, r5
 8008cd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008cdc:	3601      	adds	r6, #1
 8008cde:	f8c3 8014 	str.w	r8, [r3, #20]
 8008ce2:	6126      	str	r6, [r4, #16]
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cea:	bf00      	nop
 8008cec:	08009b87 	.word	0x08009b87
 8008cf0:	08009bf8 	.word	0x08009bf8

08008cf4 <__hi0bits>:
 8008cf4:	0c03      	lsrs	r3, r0, #16
 8008cf6:	041b      	lsls	r3, r3, #16
 8008cf8:	b9d3      	cbnz	r3, 8008d30 <__hi0bits+0x3c>
 8008cfa:	0400      	lsls	r0, r0, #16
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d02:	bf04      	itt	eq
 8008d04:	0200      	lsleq	r0, r0, #8
 8008d06:	3308      	addeq	r3, #8
 8008d08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d0c:	bf04      	itt	eq
 8008d0e:	0100      	lsleq	r0, r0, #4
 8008d10:	3304      	addeq	r3, #4
 8008d12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d16:	bf04      	itt	eq
 8008d18:	0080      	lsleq	r0, r0, #2
 8008d1a:	3302      	addeq	r3, #2
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	db05      	blt.n	8008d2c <__hi0bits+0x38>
 8008d20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d24:	f103 0301 	add.w	r3, r3, #1
 8008d28:	bf08      	it	eq
 8008d2a:	2320      	moveq	r3, #32
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	4770      	bx	lr
 8008d30:	2300      	movs	r3, #0
 8008d32:	e7e4      	b.n	8008cfe <__hi0bits+0xa>

08008d34 <__lo0bits>:
 8008d34:	6803      	ldr	r3, [r0, #0]
 8008d36:	f013 0207 	ands.w	r2, r3, #7
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	d00b      	beq.n	8008d56 <__lo0bits+0x22>
 8008d3e:	07da      	lsls	r2, r3, #31
 8008d40:	d424      	bmi.n	8008d8c <__lo0bits+0x58>
 8008d42:	0798      	lsls	r0, r3, #30
 8008d44:	bf49      	itett	mi
 8008d46:	085b      	lsrmi	r3, r3, #1
 8008d48:	089b      	lsrpl	r3, r3, #2
 8008d4a:	2001      	movmi	r0, #1
 8008d4c:	600b      	strmi	r3, [r1, #0]
 8008d4e:	bf5c      	itt	pl
 8008d50:	600b      	strpl	r3, [r1, #0]
 8008d52:	2002      	movpl	r0, #2
 8008d54:	4770      	bx	lr
 8008d56:	b298      	uxth	r0, r3
 8008d58:	b9b0      	cbnz	r0, 8008d88 <__lo0bits+0x54>
 8008d5a:	0c1b      	lsrs	r3, r3, #16
 8008d5c:	2010      	movs	r0, #16
 8008d5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d62:	bf04      	itt	eq
 8008d64:	0a1b      	lsreq	r3, r3, #8
 8008d66:	3008      	addeq	r0, #8
 8008d68:	071a      	lsls	r2, r3, #28
 8008d6a:	bf04      	itt	eq
 8008d6c:	091b      	lsreq	r3, r3, #4
 8008d6e:	3004      	addeq	r0, #4
 8008d70:	079a      	lsls	r2, r3, #30
 8008d72:	bf04      	itt	eq
 8008d74:	089b      	lsreq	r3, r3, #2
 8008d76:	3002      	addeq	r0, #2
 8008d78:	07da      	lsls	r2, r3, #31
 8008d7a:	d403      	bmi.n	8008d84 <__lo0bits+0x50>
 8008d7c:	085b      	lsrs	r3, r3, #1
 8008d7e:	f100 0001 	add.w	r0, r0, #1
 8008d82:	d005      	beq.n	8008d90 <__lo0bits+0x5c>
 8008d84:	600b      	str	r3, [r1, #0]
 8008d86:	4770      	bx	lr
 8008d88:	4610      	mov	r0, r2
 8008d8a:	e7e8      	b.n	8008d5e <__lo0bits+0x2a>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	4770      	bx	lr
 8008d90:	2020      	movs	r0, #32
 8008d92:	4770      	bx	lr

08008d94 <__i2b>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	460c      	mov	r4, r1
 8008d98:	2101      	movs	r1, #1
 8008d9a:	f7ff feff 	bl	8008b9c <_Balloc>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	b928      	cbnz	r0, 8008dae <__i2b+0x1a>
 8008da2:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <__i2b+0x24>)
 8008da4:	4805      	ldr	r0, [pc, #20]	; (8008dbc <__i2b+0x28>)
 8008da6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008daa:	f000 fcef 	bl	800978c <__assert_func>
 8008dae:	2301      	movs	r3, #1
 8008db0:	6144      	str	r4, [r0, #20]
 8008db2:	6103      	str	r3, [r0, #16]
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	bf00      	nop
 8008db8:	08009b87 	.word	0x08009b87
 8008dbc:	08009bf8 	.word	0x08009bf8

08008dc0 <__multiply>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4614      	mov	r4, r2
 8008dc6:	690a      	ldr	r2, [r1, #16]
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	bfb8      	it	lt
 8008dce:	460b      	movlt	r3, r1
 8008dd0:	460d      	mov	r5, r1
 8008dd2:	bfbc      	itt	lt
 8008dd4:	4625      	movlt	r5, r4
 8008dd6:	461c      	movlt	r4, r3
 8008dd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ddc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008de0:	68ab      	ldr	r3, [r5, #8]
 8008de2:	6869      	ldr	r1, [r5, #4]
 8008de4:	eb0a 0709 	add.w	r7, sl, r9
 8008de8:	42bb      	cmp	r3, r7
 8008dea:	b085      	sub	sp, #20
 8008dec:	bfb8      	it	lt
 8008dee:	3101      	addlt	r1, #1
 8008df0:	f7ff fed4 	bl	8008b9c <_Balloc>
 8008df4:	b930      	cbnz	r0, 8008e04 <__multiply+0x44>
 8008df6:	4602      	mov	r2, r0
 8008df8:	4b42      	ldr	r3, [pc, #264]	; (8008f04 <__multiply+0x144>)
 8008dfa:	4843      	ldr	r0, [pc, #268]	; (8008f08 <__multiply+0x148>)
 8008dfc:	f240 115d 	movw	r1, #349	; 0x15d
 8008e00:	f000 fcc4 	bl	800978c <__assert_func>
 8008e04:	f100 0614 	add.w	r6, r0, #20
 8008e08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008e0c:	4633      	mov	r3, r6
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4543      	cmp	r3, r8
 8008e12:	d31e      	bcc.n	8008e52 <__multiply+0x92>
 8008e14:	f105 0c14 	add.w	ip, r5, #20
 8008e18:	f104 0314 	add.w	r3, r4, #20
 8008e1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e24:	9202      	str	r2, [sp, #8]
 8008e26:	ebac 0205 	sub.w	r2, ip, r5
 8008e2a:	3a15      	subs	r2, #21
 8008e2c:	f022 0203 	bic.w	r2, r2, #3
 8008e30:	3204      	adds	r2, #4
 8008e32:	f105 0115 	add.w	r1, r5, #21
 8008e36:	458c      	cmp	ip, r1
 8008e38:	bf38      	it	cc
 8008e3a:	2204      	movcc	r2, #4
 8008e3c:	9201      	str	r2, [sp, #4]
 8008e3e:	9a02      	ldr	r2, [sp, #8]
 8008e40:	9303      	str	r3, [sp, #12]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d808      	bhi.n	8008e58 <__multiply+0x98>
 8008e46:	2f00      	cmp	r7, #0
 8008e48:	dc55      	bgt.n	8008ef6 <__multiply+0x136>
 8008e4a:	6107      	str	r7, [r0, #16]
 8008e4c:	b005      	add	sp, #20
 8008e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e52:	f843 2b04 	str.w	r2, [r3], #4
 8008e56:	e7db      	b.n	8008e10 <__multiply+0x50>
 8008e58:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e5c:	f1ba 0f00 	cmp.w	sl, #0
 8008e60:	d020      	beq.n	8008ea4 <__multiply+0xe4>
 8008e62:	f105 0e14 	add.w	lr, r5, #20
 8008e66:	46b1      	mov	r9, r6
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008e6e:	f8d9 b000 	ldr.w	fp, [r9]
 8008e72:	b2a1      	uxth	r1, r4
 8008e74:	fa1f fb8b 	uxth.w	fp, fp
 8008e78:	fb0a b101 	mla	r1, sl, r1, fp
 8008e7c:	4411      	add	r1, r2
 8008e7e:	f8d9 2000 	ldr.w	r2, [r9]
 8008e82:	0c24      	lsrs	r4, r4, #16
 8008e84:	0c12      	lsrs	r2, r2, #16
 8008e86:	fb0a 2404 	mla	r4, sl, r4, r2
 8008e8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008e8e:	b289      	uxth	r1, r1
 8008e90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e94:	45f4      	cmp	ip, lr
 8008e96:	f849 1b04 	str.w	r1, [r9], #4
 8008e9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008e9e:	d8e4      	bhi.n	8008e6a <__multiply+0xaa>
 8008ea0:	9901      	ldr	r1, [sp, #4]
 8008ea2:	5072      	str	r2, [r6, r1]
 8008ea4:	9a03      	ldr	r2, [sp, #12]
 8008ea6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	f1b9 0f00 	cmp.w	r9, #0
 8008eb0:	d01f      	beq.n	8008ef2 <__multiply+0x132>
 8008eb2:	6834      	ldr	r4, [r6, #0]
 8008eb4:	f105 0114 	add.w	r1, r5, #20
 8008eb8:	46b6      	mov	lr, r6
 8008eba:	f04f 0a00 	mov.w	sl, #0
 8008ebe:	880a      	ldrh	r2, [r1, #0]
 8008ec0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008ec4:	fb09 b202 	mla	r2, r9, r2, fp
 8008ec8:	4492      	add	sl, r2
 8008eca:	b2a4      	uxth	r4, r4
 8008ecc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ed0:	f84e 4b04 	str.w	r4, [lr], #4
 8008ed4:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ed8:	f8be 2000 	ldrh.w	r2, [lr]
 8008edc:	0c24      	lsrs	r4, r4, #16
 8008ede:	fb09 2404 	mla	r4, r9, r4, r2
 8008ee2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ee6:	458c      	cmp	ip, r1
 8008ee8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008eec:	d8e7      	bhi.n	8008ebe <__multiply+0xfe>
 8008eee:	9a01      	ldr	r2, [sp, #4]
 8008ef0:	50b4      	str	r4, [r6, r2]
 8008ef2:	3604      	adds	r6, #4
 8008ef4:	e7a3      	b.n	8008e3e <__multiply+0x7e>
 8008ef6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1a5      	bne.n	8008e4a <__multiply+0x8a>
 8008efe:	3f01      	subs	r7, #1
 8008f00:	e7a1      	b.n	8008e46 <__multiply+0x86>
 8008f02:	bf00      	nop
 8008f04:	08009b87 	.word	0x08009b87
 8008f08:	08009bf8 	.word	0x08009bf8

08008f0c <__pow5mult>:
 8008f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f10:	4615      	mov	r5, r2
 8008f12:	f012 0203 	ands.w	r2, r2, #3
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	d007      	beq.n	8008f2c <__pow5mult+0x20>
 8008f1c:	4c25      	ldr	r4, [pc, #148]	; (8008fb4 <__pow5mult+0xa8>)
 8008f1e:	3a01      	subs	r2, #1
 8008f20:	2300      	movs	r3, #0
 8008f22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f26:	f7ff fe9b 	bl	8008c60 <__multadd>
 8008f2a:	4607      	mov	r7, r0
 8008f2c:	10ad      	asrs	r5, r5, #2
 8008f2e:	d03d      	beq.n	8008fac <__pow5mult+0xa0>
 8008f30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f32:	b97c      	cbnz	r4, 8008f54 <__pow5mult+0x48>
 8008f34:	2010      	movs	r0, #16
 8008f36:	f7ff fe1b 	bl	8008b70 <malloc>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f3e:	b928      	cbnz	r0, 8008f4c <__pow5mult+0x40>
 8008f40:	4b1d      	ldr	r3, [pc, #116]	; (8008fb8 <__pow5mult+0xac>)
 8008f42:	481e      	ldr	r0, [pc, #120]	; (8008fbc <__pow5mult+0xb0>)
 8008f44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f48:	f000 fc20 	bl	800978c <__assert_func>
 8008f4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f50:	6004      	str	r4, [r0, #0]
 8008f52:	60c4      	str	r4, [r0, #12]
 8008f54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f5c:	b94c      	cbnz	r4, 8008f72 <__pow5mult+0x66>
 8008f5e:	f240 2171 	movw	r1, #625	; 0x271
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7ff ff16 	bl	8008d94 <__i2b>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f6e:	4604      	mov	r4, r0
 8008f70:	6003      	str	r3, [r0, #0]
 8008f72:	f04f 0900 	mov.w	r9, #0
 8008f76:	07eb      	lsls	r3, r5, #31
 8008f78:	d50a      	bpl.n	8008f90 <__pow5mult+0x84>
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f7ff ff1e 	bl	8008dc0 <__multiply>
 8008f84:	4639      	mov	r1, r7
 8008f86:	4680      	mov	r8, r0
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff fe47 	bl	8008c1c <_Bfree>
 8008f8e:	4647      	mov	r7, r8
 8008f90:	106d      	asrs	r5, r5, #1
 8008f92:	d00b      	beq.n	8008fac <__pow5mult+0xa0>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	b938      	cbnz	r0, 8008fa8 <__pow5mult+0x9c>
 8008f98:	4622      	mov	r2, r4
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff ff0f 	bl	8008dc0 <__multiply>
 8008fa2:	6020      	str	r0, [r4, #0]
 8008fa4:	f8c0 9000 	str.w	r9, [r0]
 8008fa8:	4604      	mov	r4, r0
 8008faa:	e7e4      	b.n	8008f76 <__pow5mult+0x6a>
 8008fac:	4638      	mov	r0, r7
 8008fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb2:	bf00      	nop
 8008fb4:	08009d48 	.word	0x08009d48
 8008fb8:	08009b11 	.word	0x08009b11
 8008fbc:	08009bf8 	.word	0x08009bf8

08008fc0 <__lshift>:
 8008fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	6849      	ldr	r1, [r1, #4]
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fce:	68a3      	ldr	r3, [r4, #8]
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	4691      	mov	r9, r2
 8008fd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fd8:	f108 0601 	add.w	r6, r8, #1
 8008fdc:	42b3      	cmp	r3, r6
 8008fde:	db0b      	blt.n	8008ff8 <__lshift+0x38>
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f7ff fddb 	bl	8008b9c <_Balloc>
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	b948      	cbnz	r0, 8008ffe <__lshift+0x3e>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b28      	ldr	r3, [pc, #160]	; (8009090 <__lshift+0xd0>)
 8008fee:	4829      	ldr	r0, [pc, #164]	; (8009094 <__lshift+0xd4>)
 8008ff0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ff4:	f000 fbca 	bl	800978c <__assert_func>
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	e7ee      	b.n	8008fdc <__lshift+0x1c>
 8008ffe:	2300      	movs	r3, #0
 8009000:	f100 0114 	add.w	r1, r0, #20
 8009004:	f100 0210 	add.w	r2, r0, #16
 8009008:	4618      	mov	r0, r3
 800900a:	4553      	cmp	r3, sl
 800900c:	db33      	blt.n	8009076 <__lshift+0xb6>
 800900e:	6920      	ldr	r0, [r4, #16]
 8009010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009014:	f104 0314 	add.w	r3, r4, #20
 8009018:	f019 091f 	ands.w	r9, r9, #31
 800901c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009024:	d02b      	beq.n	800907e <__lshift+0xbe>
 8009026:	f1c9 0e20 	rsb	lr, r9, #32
 800902a:	468a      	mov	sl, r1
 800902c:	2200      	movs	r2, #0
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	fa00 f009 	lsl.w	r0, r0, r9
 8009034:	4302      	orrs	r2, r0
 8009036:	f84a 2b04 	str.w	r2, [sl], #4
 800903a:	f853 2b04 	ldr.w	r2, [r3], #4
 800903e:	459c      	cmp	ip, r3
 8009040:	fa22 f20e 	lsr.w	r2, r2, lr
 8009044:	d8f3      	bhi.n	800902e <__lshift+0x6e>
 8009046:	ebac 0304 	sub.w	r3, ip, r4
 800904a:	3b15      	subs	r3, #21
 800904c:	f023 0303 	bic.w	r3, r3, #3
 8009050:	3304      	adds	r3, #4
 8009052:	f104 0015 	add.w	r0, r4, #21
 8009056:	4584      	cmp	ip, r0
 8009058:	bf38      	it	cc
 800905a:	2304      	movcc	r3, #4
 800905c:	50ca      	str	r2, [r1, r3]
 800905e:	b10a      	cbz	r2, 8009064 <__lshift+0xa4>
 8009060:	f108 0602 	add.w	r6, r8, #2
 8009064:	3e01      	subs	r6, #1
 8009066:	4638      	mov	r0, r7
 8009068:	612e      	str	r6, [r5, #16]
 800906a:	4621      	mov	r1, r4
 800906c:	f7ff fdd6 	bl	8008c1c <_Bfree>
 8009070:	4628      	mov	r0, r5
 8009072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009076:	f842 0f04 	str.w	r0, [r2, #4]!
 800907a:	3301      	adds	r3, #1
 800907c:	e7c5      	b.n	800900a <__lshift+0x4a>
 800907e:	3904      	subs	r1, #4
 8009080:	f853 2b04 	ldr.w	r2, [r3], #4
 8009084:	f841 2f04 	str.w	r2, [r1, #4]!
 8009088:	459c      	cmp	ip, r3
 800908a:	d8f9      	bhi.n	8009080 <__lshift+0xc0>
 800908c:	e7ea      	b.n	8009064 <__lshift+0xa4>
 800908e:	bf00      	nop
 8009090:	08009b87 	.word	0x08009b87
 8009094:	08009bf8 	.word	0x08009bf8

08009098 <__mcmp>:
 8009098:	b530      	push	{r4, r5, lr}
 800909a:	6902      	ldr	r2, [r0, #16]
 800909c:	690c      	ldr	r4, [r1, #16]
 800909e:	1b12      	subs	r2, r2, r4
 80090a0:	d10e      	bne.n	80090c0 <__mcmp+0x28>
 80090a2:	f100 0314 	add.w	r3, r0, #20
 80090a6:	3114      	adds	r1, #20
 80090a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090b8:	42a5      	cmp	r5, r4
 80090ba:	d003      	beq.n	80090c4 <__mcmp+0x2c>
 80090bc:	d305      	bcc.n	80090ca <__mcmp+0x32>
 80090be:	2201      	movs	r2, #1
 80090c0:	4610      	mov	r0, r2
 80090c2:	bd30      	pop	{r4, r5, pc}
 80090c4:	4283      	cmp	r3, r0
 80090c6:	d3f3      	bcc.n	80090b0 <__mcmp+0x18>
 80090c8:	e7fa      	b.n	80090c0 <__mcmp+0x28>
 80090ca:	f04f 32ff 	mov.w	r2, #4294967295
 80090ce:	e7f7      	b.n	80090c0 <__mcmp+0x28>

080090d0 <__mdiff>:
 80090d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	460c      	mov	r4, r1
 80090d6:	4606      	mov	r6, r0
 80090d8:	4611      	mov	r1, r2
 80090da:	4620      	mov	r0, r4
 80090dc:	4617      	mov	r7, r2
 80090de:	f7ff ffdb 	bl	8009098 <__mcmp>
 80090e2:	1e05      	subs	r5, r0, #0
 80090e4:	d110      	bne.n	8009108 <__mdiff+0x38>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7ff fd57 	bl	8008b9c <_Balloc>
 80090ee:	b930      	cbnz	r0, 80090fe <__mdiff+0x2e>
 80090f0:	4b39      	ldr	r3, [pc, #228]	; (80091d8 <__mdiff+0x108>)
 80090f2:	4602      	mov	r2, r0
 80090f4:	f240 2132 	movw	r1, #562	; 0x232
 80090f8:	4838      	ldr	r0, [pc, #224]	; (80091dc <__mdiff+0x10c>)
 80090fa:	f000 fb47 	bl	800978c <__assert_func>
 80090fe:	2301      	movs	r3, #1
 8009100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009108:	bfa4      	itt	ge
 800910a:	463b      	movge	r3, r7
 800910c:	4627      	movge	r7, r4
 800910e:	4630      	mov	r0, r6
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	bfa6      	itte	ge
 8009114:	461c      	movge	r4, r3
 8009116:	2500      	movge	r5, #0
 8009118:	2501      	movlt	r5, #1
 800911a:	f7ff fd3f 	bl	8008b9c <_Balloc>
 800911e:	b920      	cbnz	r0, 800912a <__mdiff+0x5a>
 8009120:	4b2d      	ldr	r3, [pc, #180]	; (80091d8 <__mdiff+0x108>)
 8009122:	4602      	mov	r2, r0
 8009124:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009128:	e7e6      	b.n	80090f8 <__mdiff+0x28>
 800912a:	693e      	ldr	r6, [r7, #16]
 800912c:	60c5      	str	r5, [r0, #12]
 800912e:	6925      	ldr	r5, [r4, #16]
 8009130:	f107 0114 	add.w	r1, r7, #20
 8009134:	f104 0914 	add.w	r9, r4, #20
 8009138:	f100 0e14 	add.w	lr, r0, #20
 800913c:	f107 0210 	add.w	r2, r7, #16
 8009140:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009144:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009148:	46f2      	mov	sl, lr
 800914a:	2700      	movs	r7, #0
 800914c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009150:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009154:	fa1f f883 	uxth.w	r8, r3
 8009158:	fa17 f78b 	uxtah	r7, r7, fp
 800915c:	0c1b      	lsrs	r3, r3, #16
 800915e:	eba7 0808 	sub.w	r8, r7, r8
 8009162:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009166:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800916a:	fa1f f888 	uxth.w	r8, r8
 800916e:	141f      	asrs	r7, r3, #16
 8009170:	454d      	cmp	r5, r9
 8009172:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009176:	f84a 3b04 	str.w	r3, [sl], #4
 800917a:	d8e7      	bhi.n	800914c <__mdiff+0x7c>
 800917c:	1b2b      	subs	r3, r5, r4
 800917e:	3b15      	subs	r3, #21
 8009180:	f023 0303 	bic.w	r3, r3, #3
 8009184:	3304      	adds	r3, #4
 8009186:	3415      	adds	r4, #21
 8009188:	42a5      	cmp	r5, r4
 800918a:	bf38      	it	cc
 800918c:	2304      	movcc	r3, #4
 800918e:	4419      	add	r1, r3
 8009190:	4473      	add	r3, lr
 8009192:	469e      	mov	lr, r3
 8009194:	460d      	mov	r5, r1
 8009196:	4565      	cmp	r5, ip
 8009198:	d30e      	bcc.n	80091b8 <__mdiff+0xe8>
 800919a:	f10c 0203 	add.w	r2, ip, #3
 800919e:	1a52      	subs	r2, r2, r1
 80091a0:	f022 0203 	bic.w	r2, r2, #3
 80091a4:	3903      	subs	r1, #3
 80091a6:	458c      	cmp	ip, r1
 80091a8:	bf38      	it	cc
 80091aa:	2200      	movcc	r2, #0
 80091ac:	441a      	add	r2, r3
 80091ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091b2:	b17b      	cbz	r3, 80091d4 <__mdiff+0x104>
 80091b4:	6106      	str	r6, [r0, #16]
 80091b6:	e7a5      	b.n	8009104 <__mdiff+0x34>
 80091b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80091bc:	fa17 f488 	uxtah	r4, r7, r8
 80091c0:	1422      	asrs	r2, r4, #16
 80091c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80091c6:	b2a4      	uxth	r4, r4
 80091c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80091cc:	f84e 4b04 	str.w	r4, [lr], #4
 80091d0:	1417      	asrs	r7, r2, #16
 80091d2:	e7e0      	b.n	8009196 <__mdiff+0xc6>
 80091d4:	3e01      	subs	r6, #1
 80091d6:	e7ea      	b.n	80091ae <__mdiff+0xde>
 80091d8:	08009b87 	.word	0x08009b87
 80091dc:	08009bf8 	.word	0x08009bf8

080091e0 <__d2b>:
 80091e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091e4:	4689      	mov	r9, r1
 80091e6:	2101      	movs	r1, #1
 80091e8:	ec57 6b10 	vmov	r6, r7, d0
 80091ec:	4690      	mov	r8, r2
 80091ee:	f7ff fcd5 	bl	8008b9c <_Balloc>
 80091f2:	4604      	mov	r4, r0
 80091f4:	b930      	cbnz	r0, 8009204 <__d2b+0x24>
 80091f6:	4602      	mov	r2, r0
 80091f8:	4b25      	ldr	r3, [pc, #148]	; (8009290 <__d2b+0xb0>)
 80091fa:	4826      	ldr	r0, [pc, #152]	; (8009294 <__d2b+0xb4>)
 80091fc:	f240 310a 	movw	r1, #778	; 0x30a
 8009200:	f000 fac4 	bl	800978c <__assert_func>
 8009204:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800920c:	bb35      	cbnz	r5, 800925c <__d2b+0x7c>
 800920e:	2e00      	cmp	r6, #0
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	d028      	beq.n	8009266 <__d2b+0x86>
 8009214:	4668      	mov	r0, sp
 8009216:	9600      	str	r6, [sp, #0]
 8009218:	f7ff fd8c 	bl	8008d34 <__lo0bits>
 800921c:	9900      	ldr	r1, [sp, #0]
 800921e:	b300      	cbz	r0, 8009262 <__d2b+0x82>
 8009220:	9a01      	ldr	r2, [sp, #4]
 8009222:	f1c0 0320 	rsb	r3, r0, #32
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	430b      	orrs	r3, r1
 800922c:	40c2      	lsrs	r2, r0
 800922e:	6163      	str	r3, [r4, #20]
 8009230:	9201      	str	r2, [sp, #4]
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	61a3      	str	r3, [r4, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	bf14      	ite	ne
 800923a:	2202      	movne	r2, #2
 800923c:	2201      	moveq	r2, #1
 800923e:	6122      	str	r2, [r4, #16]
 8009240:	b1d5      	cbz	r5, 8009278 <__d2b+0x98>
 8009242:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009246:	4405      	add	r5, r0
 8009248:	f8c9 5000 	str.w	r5, [r9]
 800924c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009250:	f8c8 0000 	str.w	r0, [r8]
 8009254:	4620      	mov	r0, r4
 8009256:	b003      	add	sp, #12
 8009258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800925c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009260:	e7d5      	b.n	800920e <__d2b+0x2e>
 8009262:	6161      	str	r1, [r4, #20]
 8009264:	e7e5      	b.n	8009232 <__d2b+0x52>
 8009266:	a801      	add	r0, sp, #4
 8009268:	f7ff fd64 	bl	8008d34 <__lo0bits>
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	6163      	str	r3, [r4, #20]
 8009270:	2201      	movs	r2, #1
 8009272:	6122      	str	r2, [r4, #16]
 8009274:	3020      	adds	r0, #32
 8009276:	e7e3      	b.n	8009240 <__d2b+0x60>
 8009278:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800927c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009280:	f8c9 0000 	str.w	r0, [r9]
 8009284:	6918      	ldr	r0, [r3, #16]
 8009286:	f7ff fd35 	bl	8008cf4 <__hi0bits>
 800928a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800928e:	e7df      	b.n	8009250 <__d2b+0x70>
 8009290:	08009b87 	.word	0x08009b87
 8009294:	08009bf8 	.word	0x08009bf8

08009298 <_calloc_r>:
 8009298:	b513      	push	{r0, r1, r4, lr}
 800929a:	434a      	muls	r2, r1
 800929c:	4611      	mov	r1, r2
 800929e:	9201      	str	r2, [sp, #4]
 80092a0:	f000 f85a 	bl	8009358 <_malloc_r>
 80092a4:	4604      	mov	r4, r0
 80092a6:	b118      	cbz	r0, 80092b0 <_calloc_r+0x18>
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	2100      	movs	r1, #0
 80092ac:	f7fd fe04 	bl	8006eb8 <memset>
 80092b0:	4620      	mov	r0, r4
 80092b2:	b002      	add	sp, #8
 80092b4:	bd10      	pop	{r4, pc}
	...

080092b8 <_free_r>:
 80092b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092ba:	2900      	cmp	r1, #0
 80092bc:	d048      	beq.n	8009350 <_free_r+0x98>
 80092be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c2:	9001      	str	r0, [sp, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f1a1 0404 	sub.w	r4, r1, #4
 80092ca:	bfb8      	it	lt
 80092cc:	18e4      	addlt	r4, r4, r3
 80092ce:	f000 fae3 	bl	8009898 <__malloc_lock>
 80092d2:	4a20      	ldr	r2, [pc, #128]	; (8009354 <_free_r+0x9c>)
 80092d4:	9801      	ldr	r0, [sp, #4]
 80092d6:	6813      	ldr	r3, [r2, #0]
 80092d8:	4615      	mov	r5, r2
 80092da:	b933      	cbnz	r3, 80092ea <_free_r+0x32>
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	6014      	str	r4, [r2, #0]
 80092e0:	b003      	add	sp, #12
 80092e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092e6:	f000 badd 	b.w	80098a4 <__malloc_unlock>
 80092ea:	42a3      	cmp	r3, r4
 80092ec:	d90b      	bls.n	8009306 <_free_r+0x4e>
 80092ee:	6821      	ldr	r1, [r4, #0]
 80092f0:	1862      	adds	r2, r4, r1
 80092f2:	4293      	cmp	r3, r2
 80092f4:	bf04      	itt	eq
 80092f6:	681a      	ldreq	r2, [r3, #0]
 80092f8:	685b      	ldreq	r3, [r3, #4]
 80092fa:	6063      	str	r3, [r4, #4]
 80092fc:	bf04      	itt	eq
 80092fe:	1852      	addeq	r2, r2, r1
 8009300:	6022      	streq	r2, [r4, #0]
 8009302:	602c      	str	r4, [r5, #0]
 8009304:	e7ec      	b.n	80092e0 <_free_r+0x28>
 8009306:	461a      	mov	r2, r3
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	b10b      	cbz	r3, 8009310 <_free_r+0x58>
 800930c:	42a3      	cmp	r3, r4
 800930e:	d9fa      	bls.n	8009306 <_free_r+0x4e>
 8009310:	6811      	ldr	r1, [r2, #0]
 8009312:	1855      	adds	r5, r2, r1
 8009314:	42a5      	cmp	r5, r4
 8009316:	d10b      	bne.n	8009330 <_free_r+0x78>
 8009318:	6824      	ldr	r4, [r4, #0]
 800931a:	4421      	add	r1, r4
 800931c:	1854      	adds	r4, r2, r1
 800931e:	42a3      	cmp	r3, r4
 8009320:	6011      	str	r1, [r2, #0]
 8009322:	d1dd      	bne.n	80092e0 <_free_r+0x28>
 8009324:	681c      	ldr	r4, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	6053      	str	r3, [r2, #4]
 800932a:	4421      	add	r1, r4
 800932c:	6011      	str	r1, [r2, #0]
 800932e:	e7d7      	b.n	80092e0 <_free_r+0x28>
 8009330:	d902      	bls.n	8009338 <_free_r+0x80>
 8009332:	230c      	movs	r3, #12
 8009334:	6003      	str	r3, [r0, #0]
 8009336:	e7d3      	b.n	80092e0 <_free_r+0x28>
 8009338:	6825      	ldr	r5, [r4, #0]
 800933a:	1961      	adds	r1, r4, r5
 800933c:	428b      	cmp	r3, r1
 800933e:	bf04      	itt	eq
 8009340:	6819      	ldreq	r1, [r3, #0]
 8009342:	685b      	ldreq	r3, [r3, #4]
 8009344:	6063      	str	r3, [r4, #4]
 8009346:	bf04      	itt	eq
 8009348:	1949      	addeq	r1, r1, r5
 800934a:	6021      	streq	r1, [r4, #0]
 800934c:	6054      	str	r4, [r2, #4]
 800934e:	e7c7      	b.n	80092e0 <_free_r+0x28>
 8009350:	b003      	add	sp, #12
 8009352:	bd30      	pop	{r4, r5, pc}
 8009354:	20000200 	.word	0x20000200

08009358 <_malloc_r>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	1ccd      	adds	r5, r1, #3
 800935c:	f025 0503 	bic.w	r5, r5, #3
 8009360:	3508      	adds	r5, #8
 8009362:	2d0c      	cmp	r5, #12
 8009364:	bf38      	it	cc
 8009366:	250c      	movcc	r5, #12
 8009368:	2d00      	cmp	r5, #0
 800936a:	4606      	mov	r6, r0
 800936c:	db01      	blt.n	8009372 <_malloc_r+0x1a>
 800936e:	42a9      	cmp	r1, r5
 8009370:	d903      	bls.n	800937a <_malloc_r+0x22>
 8009372:	230c      	movs	r3, #12
 8009374:	6033      	str	r3, [r6, #0]
 8009376:	2000      	movs	r0, #0
 8009378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937a:	f000 fa8d 	bl	8009898 <__malloc_lock>
 800937e:	4921      	ldr	r1, [pc, #132]	; (8009404 <_malloc_r+0xac>)
 8009380:	680a      	ldr	r2, [r1, #0]
 8009382:	4614      	mov	r4, r2
 8009384:	b99c      	cbnz	r4, 80093ae <_malloc_r+0x56>
 8009386:	4f20      	ldr	r7, [pc, #128]	; (8009408 <_malloc_r+0xb0>)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	b923      	cbnz	r3, 8009396 <_malloc_r+0x3e>
 800938c:	4621      	mov	r1, r4
 800938e:	4630      	mov	r0, r6
 8009390:	f000 f996 	bl	80096c0 <_sbrk_r>
 8009394:	6038      	str	r0, [r7, #0]
 8009396:	4629      	mov	r1, r5
 8009398:	4630      	mov	r0, r6
 800939a:	f000 f991 	bl	80096c0 <_sbrk_r>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d123      	bne.n	80093ea <_malloc_r+0x92>
 80093a2:	230c      	movs	r3, #12
 80093a4:	6033      	str	r3, [r6, #0]
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 fa7c 	bl	80098a4 <__malloc_unlock>
 80093ac:	e7e3      	b.n	8009376 <_malloc_r+0x1e>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	1b5b      	subs	r3, r3, r5
 80093b2:	d417      	bmi.n	80093e4 <_malloc_r+0x8c>
 80093b4:	2b0b      	cmp	r3, #11
 80093b6:	d903      	bls.n	80093c0 <_malloc_r+0x68>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	441c      	add	r4, r3
 80093bc:	6025      	str	r5, [r4, #0]
 80093be:	e004      	b.n	80093ca <_malloc_r+0x72>
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	42a2      	cmp	r2, r4
 80093c4:	bf0c      	ite	eq
 80093c6:	600b      	streq	r3, [r1, #0]
 80093c8:	6053      	strne	r3, [r2, #4]
 80093ca:	4630      	mov	r0, r6
 80093cc:	f000 fa6a 	bl	80098a4 <__malloc_unlock>
 80093d0:	f104 000b 	add.w	r0, r4, #11
 80093d4:	1d23      	adds	r3, r4, #4
 80093d6:	f020 0007 	bic.w	r0, r0, #7
 80093da:	1ac2      	subs	r2, r0, r3
 80093dc:	d0cc      	beq.n	8009378 <_malloc_r+0x20>
 80093de:	1a1b      	subs	r3, r3, r0
 80093e0:	50a3      	str	r3, [r4, r2]
 80093e2:	e7c9      	b.n	8009378 <_malloc_r+0x20>
 80093e4:	4622      	mov	r2, r4
 80093e6:	6864      	ldr	r4, [r4, #4]
 80093e8:	e7cc      	b.n	8009384 <_malloc_r+0x2c>
 80093ea:	1cc4      	adds	r4, r0, #3
 80093ec:	f024 0403 	bic.w	r4, r4, #3
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	d0e3      	beq.n	80093bc <_malloc_r+0x64>
 80093f4:	1a21      	subs	r1, r4, r0
 80093f6:	4630      	mov	r0, r6
 80093f8:	f000 f962 	bl	80096c0 <_sbrk_r>
 80093fc:	3001      	adds	r0, #1
 80093fe:	d1dd      	bne.n	80093bc <_malloc_r+0x64>
 8009400:	e7cf      	b.n	80093a2 <_malloc_r+0x4a>
 8009402:	bf00      	nop
 8009404:	20000200 	.word	0x20000200
 8009408:	20000204 	.word	0x20000204

0800940c <__sfputc_r>:
 800940c:	6893      	ldr	r3, [r2, #8]
 800940e:	3b01      	subs	r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	b410      	push	{r4}
 8009414:	6093      	str	r3, [r2, #8]
 8009416:	da08      	bge.n	800942a <__sfputc_r+0x1e>
 8009418:	6994      	ldr	r4, [r2, #24]
 800941a:	42a3      	cmp	r3, r4
 800941c:	db01      	blt.n	8009422 <__sfputc_r+0x16>
 800941e:	290a      	cmp	r1, #10
 8009420:	d103      	bne.n	800942a <__sfputc_r+0x1e>
 8009422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009426:	f7fe ba47 	b.w	80078b8 <__swbuf_r>
 800942a:	6813      	ldr	r3, [r2, #0]
 800942c:	1c58      	adds	r0, r3, #1
 800942e:	6010      	str	r0, [r2, #0]
 8009430:	7019      	strb	r1, [r3, #0]
 8009432:	4608      	mov	r0, r1
 8009434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009438:	4770      	bx	lr

0800943a <__sfputs_r>:
 800943a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943c:	4606      	mov	r6, r0
 800943e:	460f      	mov	r7, r1
 8009440:	4614      	mov	r4, r2
 8009442:	18d5      	adds	r5, r2, r3
 8009444:	42ac      	cmp	r4, r5
 8009446:	d101      	bne.n	800944c <__sfputs_r+0x12>
 8009448:	2000      	movs	r0, #0
 800944a:	e007      	b.n	800945c <__sfputs_r+0x22>
 800944c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009450:	463a      	mov	r2, r7
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff ffda 	bl	800940c <__sfputc_r>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d1f3      	bne.n	8009444 <__sfputs_r+0xa>
 800945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009460 <_vfiprintf_r>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	460d      	mov	r5, r1
 8009466:	b09d      	sub	sp, #116	; 0x74
 8009468:	4614      	mov	r4, r2
 800946a:	4698      	mov	r8, r3
 800946c:	4606      	mov	r6, r0
 800946e:	b118      	cbz	r0, 8009478 <_vfiprintf_r+0x18>
 8009470:	6983      	ldr	r3, [r0, #24]
 8009472:	b90b      	cbnz	r3, 8009478 <_vfiprintf_r+0x18>
 8009474:	f7ff fa72 	bl	800895c <__sinit>
 8009478:	4b89      	ldr	r3, [pc, #548]	; (80096a0 <_vfiprintf_r+0x240>)
 800947a:	429d      	cmp	r5, r3
 800947c:	d11b      	bne.n	80094b6 <_vfiprintf_r+0x56>
 800947e:	6875      	ldr	r5, [r6, #4]
 8009480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009482:	07d9      	lsls	r1, r3, #31
 8009484:	d405      	bmi.n	8009492 <_vfiprintf_r+0x32>
 8009486:	89ab      	ldrh	r3, [r5, #12]
 8009488:	059a      	lsls	r2, r3, #22
 800948a:	d402      	bmi.n	8009492 <_vfiprintf_r+0x32>
 800948c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800948e:	f7ff fb08 	bl	8008aa2 <__retarget_lock_acquire_recursive>
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	071b      	lsls	r3, r3, #28
 8009496:	d501      	bpl.n	800949c <_vfiprintf_r+0x3c>
 8009498:	692b      	ldr	r3, [r5, #16]
 800949a:	b9eb      	cbnz	r3, 80094d8 <_vfiprintf_r+0x78>
 800949c:	4629      	mov	r1, r5
 800949e:	4630      	mov	r0, r6
 80094a0:	f7fe fa5c 	bl	800795c <__swsetup_r>
 80094a4:	b1c0      	cbz	r0, 80094d8 <_vfiprintf_r+0x78>
 80094a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a8:	07dc      	lsls	r4, r3, #31
 80094aa:	d50e      	bpl.n	80094ca <_vfiprintf_r+0x6a>
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	b01d      	add	sp, #116	; 0x74
 80094b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b6:	4b7b      	ldr	r3, [pc, #492]	; (80096a4 <_vfiprintf_r+0x244>)
 80094b8:	429d      	cmp	r5, r3
 80094ba:	d101      	bne.n	80094c0 <_vfiprintf_r+0x60>
 80094bc:	68b5      	ldr	r5, [r6, #8]
 80094be:	e7df      	b.n	8009480 <_vfiprintf_r+0x20>
 80094c0:	4b79      	ldr	r3, [pc, #484]	; (80096a8 <_vfiprintf_r+0x248>)
 80094c2:	429d      	cmp	r5, r3
 80094c4:	bf08      	it	eq
 80094c6:	68f5      	ldreq	r5, [r6, #12]
 80094c8:	e7da      	b.n	8009480 <_vfiprintf_r+0x20>
 80094ca:	89ab      	ldrh	r3, [r5, #12]
 80094cc:	0598      	lsls	r0, r3, #22
 80094ce:	d4ed      	bmi.n	80094ac <_vfiprintf_r+0x4c>
 80094d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d2:	f7ff fae7 	bl	8008aa4 <__retarget_lock_release_recursive>
 80094d6:	e7e9      	b.n	80094ac <_vfiprintf_r+0x4c>
 80094d8:	2300      	movs	r3, #0
 80094da:	9309      	str	r3, [sp, #36]	; 0x24
 80094dc:	2320      	movs	r3, #32
 80094de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094e6:	2330      	movs	r3, #48	; 0x30
 80094e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096ac <_vfiprintf_r+0x24c>
 80094ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094f0:	f04f 0901 	mov.w	r9, #1
 80094f4:	4623      	mov	r3, r4
 80094f6:	469a      	mov	sl, r3
 80094f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094fc:	b10a      	cbz	r2, 8009502 <_vfiprintf_r+0xa2>
 80094fe:	2a25      	cmp	r2, #37	; 0x25
 8009500:	d1f9      	bne.n	80094f6 <_vfiprintf_r+0x96>
 8009502:	ebba 0b04 	subs.w	fp, sl, r4
 8009506:	d00b      	beq.n	8009520 <_vfiprintf_r+0xc0>
 8009508:	465b      	mov	r3, fp
 800950a:	4622      	mov	r2, r4
 800950c:	4629      	mov	r1, r5
 800950e:	4630      	mov	r0, r6
 8009510:	f7ff ff93 	bl	800943a <__sfputs_r>
 8009514:	3001      	adds	r0, #1
 8009516:	f000 80aa 	beq.w	800966e <_vfiprintf_r+0x20e>
 800951a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800951c:	445a      	add	r2, fp
 800951e:	9209      	str	r2, [sp, #36]	; 0x24
 8009520:	f89a 3000 	ldrb.w	r3, [sl]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80a2 	beq.w	800966e <_vfiprintf_r+0x20e>
 800952a:	2300      	movs	r3, #0
 800952c:	f04f 32ff 	mov.w	r2, #4294967295
 8009530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009534:	f10a 0a01 	add.w	sl, sl, #1
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009540:	931a      	str	r3, [sp, #104]	; 0x68
 8009542:	4654      	mov	r4, sl
 8009544:	2205      	movs	r2, #5
 8009546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954a:	4858      	ldr	r0, [pc, #352]	; (80096ac <_vfiprintf_r+0x24c>)
 800954c:	f7f6 fe68 	bl	8000220 <memchr>
 8009550:	9a04      	ldr	r2, [sp, #16]
 8009552:	b9d8      	cbnz	r0, 800958c <_vfiprintf_r+0x12c>
 8009554:	06d1      	lsls	r1, r2, #27
 8009556:	bf44      	itt	mi
 8009558:	2320      	movmi	r3, #32
 800955a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800955e:	0713      	lsls	r3, r2, #28
 8009560:	bf44      	itt	mi
 8009562:	232b      	movmi	r3, #43	; 0x2b
 8009564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009568:	f89a 3000 	ldrb.w	r3, [sl]
 800956c:	2b2a      	cmp	r3, #42	; 0x2a
 800956e:	d015      	beq.n	800959c <_vfiprintf_r+0x13c>
 8009570:	9a07      	ldr	r2, [sp, #28]
 8009572:	4654      	mov	r4, sl
 8009574:	2000      	movs	r0, #0
 8009576:	f04f 0c0a 	mov.w	ip, #10
 800957a:	4621      	mov	r1, r4
 800957c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009580:	3b30      	subs	r3, #48	; 0x30
 8009582:	2b09      	cmp	r3, #9
 8009584:	d94e      	bls.n	8009624 <_vfiprintf_r+0x1c4>
 8009586:	b1b0      	cbz	r0, 80095b6 <_vfiprintf_r+0x156>
 8009588:	9207      	str	r2, [sp, #28]
 800958a:	e014      	b.n	80095b6 <_vfiprintf_r+0x156>
 800958c:	eba0 0308 	sub.w	r3, r0, r8
 8009590:	fa09 f303 	lsl.w	r3, r9, r3
 8009594:	4313      	orrs	r3, r2
 8009596:	9304      	str	r3, [sp, #16]
 8009598:	46a2      	mov	sl, r4
 800959a:	e7d2      	b.n	8009542 <_vfiprintf_r+0xe2>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	1d19      	adds	r1, r3, #4
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	9103      	str	r1, [sp, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bfbb      	ittet	lt
 80095a8:	425b      	neglt	r3, r3
 80095aa:	f042 0202 	orrlt.w	r2, r2, #2
 80095ae:	9307      	strge	r3, [sp, #28]
 80095b0:	9307      	strlt	r3, [sp, #28]
 80095b2:	bfb8      	it	lt
 80095b4:	9204      	strlt	r2, [sp, #16]
 80095b6:	7823      	ldrb	r3, [r4, #0]
 80095b8:	2b2e      	cmp	r3, #46	; 0x2e
 80095ba:	d10c      	bne.n	80095d6 <_vfiprintf_r+0x176>
 80095bc:	7863      	ldrb	r3, [r4, #1]
 80095be:	2b2a      	cmp	r3, #42	; 0x2a
 80095c0:	d135      	bne.n	800962e <_vfiprintf_r+0x1ce>
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	1d1a      	adds	r2, r3, #4
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	9203      	str	r2, [sp, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bfb8      	it	lt
 80095ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80095d2:	3402      	adds	r4, #2
 80095d4:	9305      	str	r3, [sp, #20]
 80095d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096bc <_vfiprintf_r+0x25c>
 80095da:	7821      	ldrb	r1, [r4, #0]
 80095dc:	2203      	movs	r2, #3
 80095de:	4650      	mov	r0, sl
 80095e0:	f7f6 fe1e 	bl	8000220 <memchr>
 80095e4:	b140      	cbz	r0, 80095f8 <_vfiprintf_r+0x198>
 80095e6:	2340      	movs	r3, #64	; 0x40
 80095e8:	eba0 000a 	sub.w	r0, r0, sl
 80095ec:	fa03 f000 	lsl.w	r0, r3, r0
 80095f0:	9b04      	ldr	r3, [sp, #16]
 80095f2:	4303      	orrs	r3, r0
 80095f4:	3401      	adds	r4, #1
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fc:	482c      	ldr	r0, [pc, #176]	; (80096b0 <_vfiprintf_r+0x250>)
 80095fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009602:	2206      	movs	r2, #6
 8009604:	f7f6 fe0c 	bl	8000220 <memchr>
 8009608:	2800      	cmp	r0, #0
 800960a:	d03f      	beq.n	800968c <_vfiprintf_r+0x22c>
 800960c:	4b29      	ldr	r3, [pc, #164]	; (80096b4 <_vfiprintf_r+0x254>)
 800960e:	bb1b      	cbnz	r3, 8009658 <_vfiprintf_r+0x1f8>
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	3307      	adds	r3, #7
 8009614:	f023 0307 	bic.w	r3, r3, #7
 8009618:	3308      	adds	r3, #8
 800961a:	9303      	str	r3, [sp, #12]
 800961c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961e:	443b      	add	r3, r7
 8009620:	9309      	str	r3, [sp, #36]	; 0x24
 8009622:	e767      	b.n	80094f4 <_vfiprintf_r+0x94>
 8009624:	fb0c 3202 	mla	r2, ip, r2, r3
 8009628:	460c      	mov	r4, r1
 800962a:	2001      	movs	r0, #1
 800962c:	e7a5      	b.n	800957a <_vfiprintf_r+0x11a>
 800962e:	2300      	movs	r3, #0
 8009630:	3401      	adds	r4, #1
 8009632:	9305      	str	r3, [sp, #20]
 8009634:	4619      	mov	r1, r3
 8009636:	f04f 0c0a 	mov.w	ip, #10
 800963a:	4620      	mov	r0, r4
 800963c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009640:	3a30      	subs	r2, #48	; 0x30
 8009642:	2a09      	cmp	r2, #9
 8009644:	d903      	bls.n	800964e <_vfiprintf_r+0x1ee>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0c5      	beq.n	80095d6 <_vfiprintf_r+0x176>
 800964a:	9105      	str	r1, [sp, #20]
 800964c:	e7c3      	b.n	80095d6 <_vfiprintf_r+0x176>
 800964e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009652:	4604      	mov	r4, r0
 8009654:	2301      	movs	r3, #1
 8009656:	e7f0      	b.n	800963a <_vfiprintf_r+0x1da>
 8009658:	ab03      	add	r3, sp, #12
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	462a      	mov	r2, r5
 800965e:	4b16      	ldr	r3, [pc, #88]	; (80096b8 <_vfiprintf_r+0x258>)
 8009660:	a904      	add	r1, sp, #16
 8009662:	4630      	mov	r0, r6
 8009664:	f7fd fcd0 	bl	8007008 <_printf_float>
 8009668:	4607      	mov	r7, r0
 800966a:	1c78      	adds	r0, r7, #1
 800966c:	d1d6      	bne.n	800961c <_vfiprintf_r+0x1bc>
 800966e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009670:	07d9      	lsls	r1, r3, #31
 8009672:	d405      	bmi.n	8009680 <_vfiprintf_r+0x220>
 8009674:	89ab      	ldrh	r3, [r5, #12]
 8009676:	059a      	lsls	r2, r3, #22
 8009678:	d402      	bmi.n	8009680 <_vfiprintf_r+0x220>
 800967a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800967c:	f7ff fa12 	bl	8008aa4 <__retarget_lock_release_recursive>
 8009680:	89ab      	ldrh	r3, [r5, #12]
 8009682:	065b      	lsls	r3, r3, #25
 8009684:	f53f af12 	bmi.w	80094ac <_vfiprintf_r+0x4c>
 8009688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800968a:	e711      	b.n	80094b0 <_vfiprintf_r+0x50>
 800968c:	ab03      	add	r3, sp, #12
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	462a      	mov	r2, r5
 8009692:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <_vfiprintf_r+0x258>)
 8009694:	a904      	add	r1, sp, #16
 8009696:	4630      	mov	r0, r6
 8009698:	f7fd ff5a 	bl	8007550 <_printf_i>
 800969c:	e7e4      	b.n	8009668 <_vfiprintf_r+0x208>
 800969e:	bf00      	nop
 80096a0:	08009bb8 	.word	0x08009bb8
 80096a4:	08009bd8 	.word	0x08009bd8
 80096a8:	08009b98 	.word	0x08009b98
 80096ac:	08009d54 	.word	0x08009d54
 80096b0:	08009d5e 	.word	0x08009d5e
 80096b4:	08007009 	.word	0x08007009
 80096b8:	0800943b 	.word	0x0800943b
 80096bc:	08009d5a 	.word	0x08009d5a

080096c0 <_sbrk_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	; (80096dc <_sbrk_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f8 f8ec 	bl	80018a8 <_sbrk>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_sbrk_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_sbrk_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	2000030c 	.word	0x2000030c

080096e0 <__sread>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	460c      	mov	r4, r1
 80096e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e8:	f000 f8e2 	bl	80098b0 <_read_r>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	bfab      	itete	ge
 80096f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096f2:	89a3      	ldrhlt	r3, [r4, #12]
 80096f4:	181b      	addge	r3, r3, r0
 80096f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096fa:	bfac      	ite	ge
 80096fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80096fe:	81a3      	strhlt	r3, [r4, #12]
 8009700:	bd10      	pop	{r4, pc}

08009702 <__swrite>:
 8009702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009706:	461f      	mov	r7, r3
 8009708:	898b      	ldrh	r3, [r1, #12]
 800970a:	05db      	lsls	r3, r3, #23
 800970c:	4605      	mov	r5, r0
 800970e:	460c      	mov	r4, r1
 8009710:	4616      	mov	r6, r2
 8009712:	d505      	bpl.n	8009720 <__swrite+0x1e>
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	2302      	movs	r3, #2
 800971a:	2200      	movs	r2, #0
 800971c:	f000 f898 	bl	8009850 <_lseek_r>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800972a:	81a3      	strh	r3, [r4, #12]
 800972c:	4632      	mov	r2, r6
 800972e:	463b      	mov	r3, r7
 8009730:	4628      	mov	r0, r5
 8009732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	f000 b817 	b.w	8009768 <_write_r>

0800973a <__sseek>:
 800973a:	b510      	push	{r4, lr}
 800973c:	460c      	mov	r4, r1
 800973e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009742:	f000 f885 	bl	8009850 <_lseek_r>
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	bf15      	itete	ne
 800974c:	6560      	strne	r0, [r4, #84]	; 0x54
 800974e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009756:	81a3      	strheq	r3, [r4, #12]
 8009758:	bf18      	it	ne
 800975a:	81a3      	strhne	r3, [r4, #12]
 800975c:	bd10      	pop	{r4, pc}

0800975e <__sclose>:
 800975e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009762:	f000 b831 	b.w	80097c8 <_close_r>
	...

08009768 <_write_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4d07      	ldr	r5, [pc, #28]	; (8009788 <_write_r+0x20>)
 800976c:	4604      	mov	r4, r0
 800976e:	4608      	mov	r0, r1
 8009770:	4611      	mov	r1, r2
 8009772:	2200      	movs	r2, #0
 8009774:	602a      	str	r2, [r5, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	f7f7 fcc0 	bl	80010fc <_write>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d102      	bne.n	8009786 <_write_r+0x1e>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	b103      	cbz	r3, 8009786 <_write_r+0x1e>
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	2000030c 	.word	0x2000030c

0800978c <__assert_func>:
 800978c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800978e:	4614      	mov	r4, r2
 8009790:	461a      	mov	r2, r3
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <__assert_func+0x2c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4605      	mov	r5, r0
 8009798:	68d8      	ldr	r0, [r3, #12]
 800979a:	b14c      	cbz	r4, 80097b0 <__assert_func+0x24>
 800979c:	4b07      	ldr	r3, [pc, #28]	; (80097bc <__assert_func+0x30>)
 800979e:	9100      	str	r1, [sp, #0]
 80097a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097a4:	4906      	ldr	r1, [pc, #24]	; (80097c0 <__assert_func+0x34>)
 80097a6:	462b      	mov	r3, r5
 80097a8:	f000 f81e 	bl	80097e8 <fiprintf>
 80097ac:	f000 f89f 	bl	80098ee <abort>
 80097b0:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <__assert_func+0x38>)
 80097b2:	461c      	mov	r4, r3
 80097b4:	e7f3      	b.n	800979e <__assert_func+0x12>
 80097b6:	bf00      	nop
 80097b8:	20000010 	.word	0x20000010
 80097bc:	08009d65 	.word	0x08009d65
 80097c0:	08009d72 	.word	0x08009d72
 80097c4:	08009da0 	.word	0x08009da0

080097c8 <_close_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4d06      	ldr	r5, [pc, #24]	; (80097e4 <_close_r+0x1c>)
 80097cc:	2300      	movs	r3, #0
 80097ce:	4604      	mov	r4, r0
 80097d0:	4608      	mov	r0, r1
 80097d2:	602b      	str	r3, [r5, #0]
 80097d4:	f7f8 f833 	bl	800183e <_close>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_close_r+0x1a>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_close_r+0x1a>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	2000030c 	.word	0x2000030c

080097e8 <fiprintf>:
 80097e8:	b40e      	push	{r1, r2, r3}
 80097ea:	b503      	push	{r0, r1, lr}
 80097ec:	4601      	mov	r1, r0
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	4805      	ldr	r0, [pc, #20]	; (8009808 <fiprintf+0x20>)
 80097f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f6:	6800      	ldr	r0, [r0, #0]
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	f7ff fe31 	bl	8009460 <_vfiprintf_r>
 80097fe:	b002      	add	sp, #8
 8009800:	f85d eb04 	ldr.w	lr, [sp], #4
 8009804:	b003      	add	sp, #12
 8009806:	4770      	bx	lr
 8009808:	20000010 	.word	0x20000010

0800980c <_fstat_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d07      	ldr	r5, [pc, #28]	; (800982c <_fstat_r+0x20>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	4611      	mov	r1, r2
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	f7f8 f81c 	bl	8001856 <_fstat>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d102      	bne.n	8009828 <_fstat_r+0x1c>
 8009822:	682b      	ldr	r3, [r5, #0]
 8009824:	b103      	cbz	r3, 8009828 <_fstat_r+0x1c>
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	bd38      	pop	{r3, r4, r5, pc}
 800982a:	bf00      	nop
 800982c:	2000030c 	.word	0x2000030c

08009830 <_isatty_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d06      	ldr	r5, [pc, #24]	; (800984c <_isatty_r+0x1c>)
 8009834:	2300      	movs	r3, #0
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	602b      	str	r3, [r5, #0]
 800983c:	f7f8 f81b 	bl	8001876 <_isatty>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_isatty_r+0x1a>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_isatty_r+0x1a>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	2000030c 	.word	0x2000030c

08009850 <_lseek_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d07      	ldr	r5, [pc, #28]	; (8009870 <_lseek_r+0x20>)
 8009854:	4604      	mov	r4, r0
 8009856:	4608      	mov	r0, r1
 8009858:	4611      	mov	r1, r2
 800985a:	2200      	movs	r2, #0
 800985c:	602a      	str	r2, [r5, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	f7f8 f814 	bl	800188c <_lseek>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d102      	bne.n	800986e <_lseek_r+0x1e>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	b103      	cbz	r3, 800986e <_lseek_r+0x1e>
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	2000030c 	.word	0x2000030c

08009874 <__ascii_mbtowc>:
 8009874:	b082      	sub	sp, #8
 8009876:	b901      	cbnz	r1, 800987a <__ascii_mbtowc+0x6>
 8009878:	a901      	add	r1, sp, #4
 800987a:	b142      	cbz	r2, 800988e <__ascii_mbtowc+0x1a>
 800987c:	b14b      	cbz	r3, 8009892 <__ascii_mbtowc+0x1e>
 800987e:	7813      	ldrb	r3, [r2, #0]
 8009880:	600b      	str	r3, [r1, #0]
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	1e10      	subs	r0, r2, #0
 8009886:	bf18      	it	ne
 8009888:	2001      	movne	r0, #1
 800988a:	b002      	add	sp, #8
 800988c:	4770      	bx	lr
 800988e:	4610      	mov	r0, r2
 8009890:	e7fb      	b.n	800988a <__ascii_mbtowc+0x16>
 8009892:	f06f 0001 	mvn.w	r0, #1
 8009896:	e7f8      	b.n	800988a <__ascii_mbtowc+0x16>

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_lock+0x8>)
 800989a:	f7ff b902 	b.w	8008aa2 <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20000304 	.word	0x20000304

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__malloc_unlock+0x8>)
 80098a6:	f7ff b8fd 	b.w	8008aa4 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20000304 	.word	0x20000304

080098b0 <_read_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4d07      	ldr	r5, [pc, #28]	; (80098d0 <_read_r+0x20>)
 80098b4:	4604      	mov	r4, r0
 80098b6:	4608      	mov	r0, r1
 80098b8:	4611      	mov	r1, r2
 80098ba:	2200      	movs	r2, #0
 80098bc:	602a      	str	r2, [r5, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	f7f7 ffa0 	bl	8001804 <_read>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d102      	bne.n	80098ce <_read_r+0x1e>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	b103      	cbz	r3, 80098ce <_read_r+0x1e>
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	2000030c 	.word	0x2000030c

080098d4 <__ascii_wctomb>:
 80098d4:	b149      	cbz	r1, 80098ea <__ascii_wctomb+0x16>
 80098d6:	2aff      	cmp	r2, #255	; 0xff
 80098d8:	bf85      	ittet	hi
 80098da:	238a      	movhi	r3, #138	; 0x8a
 80098dc:	6003      	strhi	r3, [r0, #0]
 80098de:	700a      	strbls	r2, [r1, #0]
 80098e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80098e4:	bf98      	it	ls
 80098e6:	2001      	movls	r0, #1
 80098e8:	4770      	bx	lr
 80098ea:	4608      	mov	r0, r1
 80098ec:	4770      	bx	lr

080098ee <abort>:
 80098ee:	b508      	push	{r3, lr}
 80098f0:	2006      	movs	r0, #6
 80098f2:	f000 f82b 	bl	800994c <raise>
 80098f6:	2001      	movs	r0, #1
 80098f8:	f7f7 ff7a 	bl	80017f0 <_exit>

080098fc <_raise_r>:
 80098fc:	291f      	cmp	r1, #31
 80098fe:	b538      	push	{r3, r4, r5, lr}
 8009900:	4604      	mov	r4, r0
 8009902:	460d      	mov	r5, r1
 8009904:	d904      	bls.n	8009910 <_raise_r+0x14>
 8009906:	2316      	movs	r3, #22
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	f04f 30ff 	mov.w	r0, #4294967295
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009912:	b112      	cbz	r2, 800991a <_raise_r+0x1e>
 8009914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009918:	b94b      	cbnz	r3, 800992e <_raise_r+0x32>
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f830 	bl	8009980 <_getpid_r>
 8009920:	462a      	mov	r2, r5
 8009922:	4601      	mov	r1, r0
 8009924:	4620      	mov	r0, r4
 8009926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800992a:	f000 b817 	b.w	800995c <_kill_r>
 800992e:	2b01      	cmp	r3, #1
 8009930:	d00a      	beq.n	8009948 <_raise_r+0x4c>
 8009932:	1c59      	adds	r1, r3, #1
 8009934:	d103      	bne.n	800993e <_raise_r+0x42>
 8009936:	2316      	movs	r3, #22
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	2001      	movs	r0, #1
 800993c:	e7e7      	b.n	800990e <_raise_r+0x12>
 800993e:	2400      	movs	r4, #0
 8009940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009944:	4628      	mov	r0, r5
 8009946:	4798      	blx	r3
 8009948:	2000      	movs	r0, #0
 800994a:	e7e0      	b.n	800990e <_raise_r+0x12>

0800994c <raise>:
 800994c:	4b02      	ldr	r3, [pc, #8]	; (8009958 <raise+0xc>)
 800994e:	4601      	mov	r1, r0
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	f7ff bfd3 	b.w	80098fc <_raise_r>
 8009956:	bf00      	nop
 8009958:	20000010 	.word	0x20000010

0800995c <_kill_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d07      	ldr	r5, [pc, #28]	; (800997c <_kill_r+0x20>)
 8009960:	2300      	movs	r3, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	f7f7 ff31 	bl	80017d0 <_kill>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d102      	bne.n	8009978 <_kill_r+0x1c>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	b103      	cbz	r3, 8009978 <_kill_r+0x1c>
 8009976:	6023      	str	r3, [r4, #0]
 8009978:	bd38      	pop	{r3, r4, r5, pc}
 800997a:	bf00      	nop
 800997c:	2000030c 	.word	0x2000030c

08009980 <_getpid_r>:
 8009980:	f7f7 bf1e 	b.w	80017c0 <_getpid>

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
