
GPS_NEO-G7A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000070  08005340  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005340  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a340  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa9  00000000  00000000  0002a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cee  00000000  00000000  0002ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a859  00000000  00000000  0004eaf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9b96  00000000  00000000  0005934f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122ee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c28  00000000  00000000  00122f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800510c 	.word	0x0800510c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800510c 	.word	0x0800510c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

// this interrupts changes flag to 1 as soon as the uint8_t buff[300] is full

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, buff, 255);
 80005cc:	22ff      	movs	r2, #255	; 0xff
 80005ce:	4905      	ldr	r1, [pc, #20]	; (80005e4 <HAL_UART_RxCpltCallback+0x20>)
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <HAL_UART_RxCpltCallback+0x24>)
 80005d2:	f002 fb46 	bl	8002c62 <HAL_UART_Receive_IT>
	flag = 1;
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_UART_RxCpltCallback+0x28>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000178 	.word	0x20000178
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	20000174 	.word	0x20000174

080005f0 <nmea0183_checksum>:

// function to calculate checksum of the NMEA sentence
// -4, but not -3 because the NMEA sentences are delimited with \r\n, and there also is the invisible \r in the end
int nmea0183_checksum(char *msg)
	{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	int checksum = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]

	// the first $ sign and the last two bytes of original CRC + the * sign
	for (j = 1; j < strlen(msg) - 4; j++)
 8000600:	2301      	movs	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	e00a      	b.n	800061c <nmea0183_checksum+0x2c>
	{
		checksum = checksum ^ (unsigned) msg[j];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4053      	eors	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
	for (j = 1; j < strlen(msg) - 4; j++)
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	3301      	adds	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff fdf7 	bl	8000210 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	1f1a      	subs	r2, r3, #4
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8ec      	bhi.n	8000606 <nmea0183_checksum+0x16>
	}
	return checksum;
 800062c:	68fb      	ldr	r3, [r7, #12]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_UART_Receive_IT(&huart1, buff, 255);
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	4953      	ldr	r1, [pc, #332]	; (8000790 <main+0x158>)
 8000642:	4854      	ldr	r0, [pc, #336]	; (8000794 <main+0x15c>)
 8000644:	f002 fb0d 	bl	8002c62 <HAL_UART_Receive_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fd72 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f9ea 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 faca 	bl	8000be8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000654:	f000 fa7e 	bl	8000b54 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000658:	f000 faa6 	bl	8000ba8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800065c:	f000 fa50 	bl	8000b00 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag == 1)					// interrupt signals that the buffer buff[300] is full
 8000660:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <main+0x160>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	f040 81a9 	bne.w	80009bc <main+0x384>
			 9. *xx Checksum
			 10. [CR][LF] Sentence terminator. In C \r\n (two characters).
			  or \r Carriage return
			  or \n Line feed, end delimiter
			 */
		  	  memset(buffStr, 0, 255);
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	2100      	movs	r1, #0
 800066e:	484b      	ldr	r0, [pc, #300]	; (800079c <main+0x164>)
 8000670:	f003 fab6 	bl	8003be0 <memset>
		  	  sprintf(buffStr, "%s", buff);
 8000674:	4a46      	ldr	r2, [pc, #280]	; (8000790 <main+0x158>)
 8000676:	494a      	ldr	r1, [pc, #296]	; (80007a0 <main+0x168>)
 8000678:	4848      	ldr	r0, [pc, #288]	; (800079c <main+0x164>)
 800067a:	f003 fab9 	bl	8003bf0 <siprintf>
		  	  // splitting the buffStr by the "\n" delimiter with the strsep() C function
		  	  // see http://www.manpagez.com/man/3/strsep/

		  	  char *token, *string;

		  	  string = strdup(buffStr);
 800067e:	4847      	ldr	r0, [pc, #284]	; (800079c <main+0x164>)
 8000680:	f003 fafa 	bl	8003c78 <strdup>
 8000684:	4603      	mov	r3, r0
 8000686:	613b      	str	r3, [r7, #16]

		  	  // actually splitting the string by "\n" delimiter
		  	  while ((token = strsep(&string, "\n")) != NULL)
 8000688:	e18a      	b.n	80009a0 <main+0x368>
		  	  {
		  		 memset(nmeaSnt, 0, 80);
 800068a:	2250      	movs	r2, #80	; 0x50
 800068c:	2100      	movs	r1, #0
 800068e:	4845      	ldr	r0, [pc, #276]	; (80007a4 <main+0x16c>)
 8000690:	f003 faa6 	bl	8003be0 <memset>
		  		 sprintf(nmeaSnt, "%s", token);
 8000694:	69ba      	ldr	r2, [r7, #24]
 8000696:	4942      	ldr	r1, [pc, #264]	; (80007a0 <main+0x168>)
 8000698:	4842      	ldr	r0, [pc, #264]	; (80007a4 <main+0x16c>)
 800069a:	f003 faa9 	bl	8003bf0 <siprintf>

 				// selecting only $GNGLL sentences, combined GPS and GLONASS
 				// on my GPS sensor this good NMEA sentence is always 50 characters
 				if ((strstr(nmeaSnt, "$GNGLL") != 0) && strlen(nmeaSnt) > 49 && strstr(nmeaSnt, "*") != 0)
 800069e:	4942      	ldr	r1, [pc, #264]	; (80007a8 <main+0x170>)
 80006a0:	4840      	ldr	r0, [pc, #256]	; (80007a4 <main+0x16c>)
 80006a2:	f003 fb0b 	bl	8003cbc <strstr>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 8179 	beq.w	80009a0 <main+0x368>
 80006ae:	483d      	ldr	r0, [pc, #244]	; (80007a4 <main+0x16c>)
 80006b0:	f7ff fdae 	bl	8000210 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b31      	cmp	r3, #49	; 0x31
 80006b8:	f240 8172 	bls.w	80009a0 <main+0x368>
 80006bc:	212a      	movs	r1, #42	; 0x2a
 80006be:	4839      	ldr	r0, [pc, #228]	; (80007a4 <main+0x16c>)
 80006c0:	f003 fac5 	bl	8003c4e <strchr>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f000 816a 	beq.w	80009a0 <main+0x368>
 				{
 					rawSum = strstr(nmeaSnt, "*");
 80006cc:	212a      	movs	r1, #42	; 0x2a
 80006ce:	4835      	ldr	r0, [pc, #212]	; (80007a4 <main+0x16c>)
 80006d0:	f003 fabd 	bl	8003c4e <strchr>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a35      	ldr	r2, [pc, #212]	; (80007ac <main+0x174>)
 80006d8:	6013      	str	r3, [r2, #0]
					memcpy(smNmbr, &rawSum[1], 2);
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <main+0x174>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <main+0x178>)
 80006e6:	801a      	strh	r2, [r3, #0]
					smNmbr[2] = '\0';
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <main+0x178>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	709a      	strb	r2, [r3, #2]
 					uint8_t intSum = nmea0183_checksum(nmeaSnt);
 80006ee:	482d      	ldr	r0, [pc, #180]	; (80007a4 <main+0x16c>)
 80006f0:	f7ff ff7e 	bl	80005f0 <nmea0183_checksum>
 80006f4:	4603      	mov	r3, r0
 80006f6:	75fb      	strb	r3, [r7, #23]
  					char hex[2];

					// "%X" unsigned hexadecimal integer (capital letters)
					sprintf(hex, "%X", intSum);
 80006f8:	7dfa      	ldrb	r2, [r7, #23]
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	492d      	ldr	r1, [pc, #180]	; (80007b4 <main+0x17c>)
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fa75 	bl	8003bf0 <siprintf>

					// checksum data verification, if OK, then we can really trust
					// the data in the the NMEA sentence
					if (strstr(smNmbr, hex) != NULL)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <main+0x178>)
 800070e:	f003 fad5 	bl	8003cbc <strstr>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 8143 	beq.w	80009a0 <main+0x368>
					{
						//if we want display good $GNGLL NMEA sentences
						//HAL_UART_Transmit(&huart2, nmeaSnt, 50, 70);
						//HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);
						cnt = 0;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <main+0x180>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]


						// splitting the good NMEA sentence into the tokens by the comma delimiter
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ","))
 8000720:	4926      	ldr	r1, [pc, #152]	; (80007bc <main+0x184>)
 8000722:	4820      	ldr	r0, [pc, #128]	; (80007a4 <main+0x16c>)
 8000724:	f003 fae0 	bl	8003ce8 <strtok>
 8000728:	61f8      	str	r0, [r7, #28]
 800072a:	e064      	b.n	80007f6 <main+0x1be>
						{
							switch (cnt)
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <main+0x180>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3b01      	subs	r3, #1
 8000732:	2b04      	cmp	r3, #4
 8000734:	d854      	bhi.n	80007e0 <main+0x1a8>
 8000736:	a201      	add	r2, pc, #4	; (adr r2, 800073c <main+0x104>)
 8000738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073c:	08000751 	.word	0x08000751
 8000740:	08000761 	.word	0x08000761
 8000744:	08000771 	.word	0x08000771
 8000748:	08000781 	.word	0x08000781
 800074c:	080007d1 	.word	0x080007d1
							{
							case 1:
 								latRaw = strdup(pV);
 8000750:	69f8      	ldr	r0, [r7, #28]
 8000752:	f003 fa91 	bl	8003c78 <strdup>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <main+0x188>)
 800075c:	601a      	str	r2, [r3, #0]
    							break;
 800075e:	e03f      	b.n	80007e0 <main+0x1a8>
							case 2:
								hemNS = strdup(pV);
 8000760:	69f8      	ldr	r0, [r7, #28]
 8000762:	f003 fa89 	bl	8003c78 <strdup>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <main+0x18c>)
 800076c:	601a      	str	r2, [r3, #0]
								break;
 800076e:	e037      	b.n	80007e0 <main+0x1a8>
							case 3:
								lonRaw = strdup(pV);
 8000770:	69f8      	ldr	r0, [r7, #28]
 8000772:	f003 fa81 	bl	8003c78 <strdup>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <main+0x190>)
 800077c:	601a      	str	r2, [r3, #0]
								break;
 800077e:	e02f      	b.n	80007e0 <main+0x1a8>
							case 4:
								hemEW = strdup(pV);
 8000780:	69f8      	ldr	r0, [r7, #28]
 8000782:	f003 fa79 	bl	8003c78 <strdup>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <main+0x194>)
 800078c:	601a      	str	r2, [r3, #0]
								break;
 800078e:	e027      	b.n	80007e0 <main+0x1a8>
 8000790:	20000178 	.word	0x20000178
 8000794:	2000008c 	.word	0x2000008c
 8000798:	20000174 	.word	0x20000174
 800079c:	20000194 	.word	0x20000194
 80007a0:	08005124 	.word	0x08005124
 80007a4:	20000294 	.word	0x20000294
 80007a8:	08005128 	.word	0x08005128
 80007ac:	200002e4 	.word	0x200002e4
 80007b0:	200002e8 	.word	0x200002e8
 80007b4:	08005130 	.word	0x08005130
 80007b8:	2000032a 	.word	0x2000032a
 80007bc:	08005134 	.word	0x08005134
 80007c0:	200002ec 	.word	0x200002ec
 80007c4:	200002fc 	.word	0x200002fc
 80007c8:	20000300 	.word	0x20000300
 80007cc:	20000310 	.word	0x20000310
							case 5:
								utcRaw = strdup(pV);
 80007d0:	69f8      	ldr	r0, [r7, #28]
 80007d2:	f003 fa51 	bl	8003c78 <strdup>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b7a      	ldr	r3, [pc, #488]	; (80009c4 <main+0x38c>)
 80007dc:	601a      	str	r2, [r3, #0]
								break;
 80007de:	bf00      	nop
							} //end seitch
							cnt++;
 80007e0:	4b79      	ldr	r3, [pc, #484]	; (80009c8 <main+0x390>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b77      	ldr	r3, [pc, #476]	; (80009c8 <main+0x390>)
 80007ea:	701a      	strb	r2, [r3, #0]
						for (char *pV = strtok(nmeaSnt, ","); pV != NULL; pV = strtok(NULL, ","))
 80007ec:	4977      	ldr	r1, [pc, #476]	; (80009cc <main+0x394>)
 80007ee:	2000      	movs	r0, #0
 80007f0:	f003 fa7a 	bl	8003ce8 <strtok>
 80007f4:	61f8      	str	r0, [r7, #28]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d197      	bne.n	800072c <main+0xf4>
						} // end for()

						memcpy(latDg, &latRaw[0], 2);
 80007fc:	4b74      	ldr	r3, [pc, #464]	; (80009d0 <main+0x398>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b73      	ldr	r3, [pc, #460]	; (80009d4 <main+0x39c>)
 8000806:	801a      	strh	r2, [r3, #0]
						latDg[2] = '\0';
 8000808:	4b72      	ldr	r3, [pc, #456]	; (80009d4 <main+0x39c>)
 800080a:	2200      	movs	r2, #0
 800080c:	709a      	strb	r2, [r3, #2]

						memcpy(latMS, &latRaw[2], 7);
 800080e:	4b70      	ldr	r3, [pc, #448]	; (80009d0 <main+0x398>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1c9a      	adds	r2, r3, #2
 8000814:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <main+0x3a0>)
 8000816:	6810      	ldr	r0, [r2, #0]
 8000818:	6018      	str	r0, [r3, #0]
 800081a:	8891      	ldrh	r1, [r2, #4]
 800081c:	7992      	ldrb	r2, [r2, #6]
 800081e:	8099      	strh	r1, [r3, #4]
 8000820:	719a      	strb	r2, [r3, #6]
						latMS[7] = '\0';
 8000822:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x3a0>)
 8000824:	2200      	movs	r2, #0
 8000826:	71da      	strb	r2, [r3, #7]

						memcpy(lonDg, &lonRaw[0], 3);
 8000828:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <main+0x3a4>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b6c      	ldr	r3, [pc, #432]	; (80009e0 <main+0x3a8>)
 800082e:	8811      	ldrh	r1, [r2, #0]
 8000830:	7892      	ldrb	r2, [r2, #2]
 8000832:	8019      	strh	r1, [r3, #0]
 8000834:	709a      	strb	r2, [r3, #2]
						lonDg[3] = '\0';
 8000836:	4b6a      	ldr	r3, [pc, #424]	; (80009e0 <main+0x3a8>)
 8000838:	2200      	movs	r2, #0
 800083a:	70da      	strb	r2, [r3, #3]

						memcpy(lonMS, &lonRaw[3], 7);
 800083c:	4b67      	ldr	r3, [pc, #412]	; (80009dc <main+0x3a4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1cda      	adds	r2, r3, #3
 8000842:	4b68      	ldr	r3, [pc, #416]	; (80009e4 <main+0x3ac>)
 8000844:	6810      	ldr	r0, [r2, #0]
 8000846:	6018      	str	r0, [r3, #0]
 8000848:	8891      	ldrh	r1, [r2, #4]
 800084a:	7992      	ldrb	r2, [r2, #6]
 800084c:	8099      	strh	r1, [r3, #4]
 800084e:	719a      	strb	r2, [r3, #6]
						lonMS[7] = '\0';
 8000850:	4b64      	ldr	r3, [pc, #400]	; (80009e4 <main+0x3ac>)
 8000852:	2200      	movs	r2, #0
 8000854:	71da      	strb	r2, [r3, #7]
						char strLonMS[7];
						sprintf(strLonMS, "%s", lonMS);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4a62      	ldr	r2, [pc, #392]	; (80009e4 <main+0x3ac>)
 800085a:	4963      	ldr	r1, [pc, #396]	; (80009e8 <main+0x3b0>)
 800085c:	4618      	mov	r0, r3
 800085e:	f003 f9c7 	bl	8003bf0 <siprintf>

						//converting the UTC time in the hh:mm:ss format
						memcpy(hH, &utcRaw[0], 2);
 8000862:	4b58      	ldr	r3, [pc, #352]	; (80009c4 <main+0x38c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b60      	ldr	r3, [pc, #384]	; (80009ec <main+0x3b4>)
 800086c:	801a      	strh	r2, [r3, #0]
						hH[2] = '\0';
 800086e:	4b5f      	ldr	r3, [pc, #380]	; (80009ec <main+0x3b4>)
 8000870:	2200      	movs	r2, #0
 8000872:	709a      	strb	r2, [r3, #2]

						memcpy(mM, &utcRaw[2], 2);
 8000874:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <main+0x38c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3302      	adds	r3, #2
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b5c      	ldr	r3, [pc, #368]	; (80009f0 <main+0x3b8>)
 8000880:	801a      	strh	r2, [r3, #0]
						mM[2] = '\0';
 8000882:	4b5b      	ldr	r3, [pc, #364]	; (80009f0 <main+0x3b8>)
 8000884:	2200      	movs	r2, #0
 8000886:	709a      	strb	r2, [r3, #2]

						memcpy(sS, &utcRaw[4], 2);
 8000888:	4b4e      	ldr	r3, [pc, #312]	; (80009c4 <main+0x38c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3304      	adds	r3, #4
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b58      	ldr	r3, [pc, #352]	; (80009f4 <main+0x3bc>)
 8000894:	801a      	strh	r2, [r3, #0]
						sS[2] = '\0';
 8000896:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <main+0x3bc>)
 8000898:	2200      	movs	r2, #0
 800089a:	709a      	strb	r2, [r3, #2]

						strcpy(strUTC, hH);
 800089c:	4953      	ldr	r1, [pc, #332]	; (80009ec <main+0x3b4>)
 800089e:	4856      	ldr	r0, [pc, #344]	; (80009f8 <main+0x3c0>)
 80008a0:	f003 f9e2 	bl	8003c68 <strcpy>
						strcat(strUTC, ":");
 80008a4:	4854      	ldr	r0, [pc, #336]	; (80009f8 <main+0x3c0>)
 80008a6:	f7ff fcb3 	bl	8000210 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <main+0x3c0>)
 80008b0:	4413      	add	r3, r2
 80008b2:	4952      	ldr	r1, [pc, #328]	; (80009fc <main+0x3c4>)
 80008b4:	461a      	mov	r2, r3
 80008b6:	460b      	mov	r3, r1
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, mM);
 80008bc:	494c      	ldr	r1, [pc, #304]	; (80009f0 <main+0x3b8>)
 80008be:	484e      	ldr	r0, [pc, #312]	; (80009f8 <main+0x3c0>)
 80008c0:	f003 f9b6 	bl	8003c30 <strcat>
						strcat(strUTC, ":");
 80008c4:	484c      	ldr	r0, [pc, #304]	; (80009f8 <main+0x3c0>)
 80008c6:	f7ff fca3 	bl	8000210 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <main+0x3c0>)
 80008d0:	4413      	add	r3, r2
 80008d2:	494a      	ldr	r1, [pc, #296]	; (80009fc <main+0x3c4>)
 80008d4:	461a      	mov	r2, r3
 80008d6:	460b      	mov	r3, r1
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	8013      	strh	r3, [r2, #0]
						strcat(strUTC, sS);
 80008dc:	4945      	ldr	r1, [pc, #276]	; (80009f4 <main+0x3bc>)
 80008de:	4846      	ldr	r0, [pc, #280]	; (80009f8 <main+0x3c0>)
 80008e0:	f003 f9a6 	bl	8003c30 <strcat>
						strUTC[8] = '\0';
 80008e4:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <main+0x3c0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	721a      	strb	r2, [r3, #8]

						HAL_UART_Transmit(&huart2, (uint8_t*) hemNS, 1, 200);
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <main+0x3c8>)
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	23c8      	movs	r3, #200	; 0xc8
 80008f0:	2201      	movs	r2, #1
 80008f2:	4844      	ldr	r0, [pc, #272]	; (8000a04 <main+0x3cc>)
 80008f4:	f002 f923 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 80008f8:	23c8      	movs	r3, #200	; 0xc8
 80008fa:	2201      	movs	r2, #1
 80008fc:	4942      	ldr	r1, [pc, #264]	; (8000a08 <main+0x3d0>)
 80008fe:	4841      	ldr	r0, [pc, #260]	; (8000a04 <main+0x3cc>)
 8000900:	f002 f91d 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latDg, 2, 200);
 8000904:	23c8      	movs	r3, #200	; 0xc8
 8000906:	2202      	movs	r2, #2
 8000908:	4932      	ldr	r1, [pc, #200]	; (80009d4 <main+0x39c>)
 800090a:	483e      	ldr	r0, [pc, #248]	; (8000a04 <main+0x3cc>)
 800090c:	f002 f917 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\241", 1, 200);
 8000910:	23c8      	movs	r3, #200	; 0xc8
 8000912:	2201      	movs	r2, #1
 8000914:	493d      	ldr	r1, [pc, #244]	; (8000a0c <main+0x3d4>)
 8000916:	483b      	ldr	r0, [pc, #236]	; (8000a04 <main+0x3cc>)
 8000918:	f002 f911 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) latMS, 7, 200);
 800091c:	23c8      	movs	r3, #200	; 0xc8
 800091e:	2207      	movs	r2, #7
 8000920:	492d      	ldr	r1, [pc, #180]	; (80009d8 <main+0x3a0>)
 8000922:	4838      	ldr	r0, [pc, #224]	; (8000a04 <main+0x3cc>)
 8000924:	f002 f90b 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', ", 3, 200);
 8000928:	23c8      	movs	r3, #200	; 0xc8
 800092a:	2203      	movs	r2, #3
 800092c:	4938      	ldr	r1, [pc, #224]	; (8000a10 <main+0x3d8>)
 800092e:	4835      	ldr	r0, [pc, #212]	; (8000a04 <main+0x3cc>)
 8000930:	f002 f905 	bl	8002b3e <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) hemEW, 1, 200);
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <main+0x3dc>)
 8000936:	6819      	ldr	r1, [r3, #0]
 8000938:	23c8      	movs	r3, #200	; 0xc8
 800093a:	2201      	movs	r2, #1
 800093c:	4831      	ldr	r0, [pc, #196]	; (8000a04 <main+0x3cc>)
 800093e:	f002 f8fe 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) " ", 1, 200);
 8000942:	23c8      	movs	r3, #200	; 0xc8
 8000944:	2201      	movs	r2, #1
 8000946:	4930      	ldr	r1, [pc, #192]	; (8000a08 <main+0x3d0>)
 8000948:	482e      	ldr	r0, [pc, #184]	; (8000a04 <main+0x3cc>)
 800094a:	f002 f8f8 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) lonDg, 3, 200);
 800094e:	23c8      	movs	r3, #200	; 0xc8
 8000950:	2203      	movs	r2, #3
 8000952:	4923      	ldr	r1, [pc, #140]	; (80009e0 <main+0x3a8>)
 8000954:	482b      	ldr	r0, [pc, #172]	; (8000a04 <main+0x3cc>)
 8000956:	f002 f8f2 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\241", 1, 200);
 800095a:	23c8      	movs	r3, #200	; 0xc8
 800095c:	2201      	movs	r2, #1
 800095e:	492b      	ldr	r1, [pc, #172]	; (8000a0c <main+0x3d4>)
 8000960:	4828      	ldr	r0, [pc, #160]	; (8000a04 <main+0x3cc>)
 8000962:	f002 f8ec 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) strLonMS, strlen(strLonMS), 200);
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fc51 	bl	8000210 <strlen>
 800096e:	4603      	mov	r3, r0
 8000970:	b29a      	uxth	r2, r3
 8000972:	1d39      	adds	r1, r7, #4
 8000974:	23c8      	movs	r3, #200	; 0xc8
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <main+0x3cc>)
 8000978:	f002 f8e1 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\', UTC: ", 8, 200);
 800097c:	23c8      	movs	r3, #200	; 0xc8
 800097e:	2208      	movs	r2, #8
 8000980:	4925      	ldr	r1, [pc, #148]	; (8000a18 <main+0x3e0>)
 8000982:	4820      	ldr	r0, [pc, #128]	; (8000a04 <main+0x3cc>)
 8000984:	f002 f8db 	bl	8002b3e <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart2, (uint8_t*) strUTC, 8, 200);
 8000988:	23c8      	movs	r3, #200	; 0xc8
 800098a:	2208      	movs	r2, #8
 800098c:	491a      	ldr	r1, [pc, #104]	; (80009f8 <main+0x3c0>)
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <main+0x3cc>)
 8000990:	f002 f8d5 	bl	8002b3e <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, 200);
 8000994:	23c8      	movs	r3, #200	; 0xc8
 8000996:	2201      	movs	r2, #1
 8000998:	4920      	ldr	r1, [pc, #128]	; (8000a1c <main+0x3e4>)
 800099a:	481a      	ldr	r0, [pc, #104]	; (8000a04 <main+0x3cc>)
 800099c:	f002 f8cf 	bl	8002b3e <HAL_UART_Transmit>
		  	  while ((token = strsep(&string, "\n")) != NULL)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	491d      	ldr	r1, [pc, #116]	; (8000a1c <main+0x3e4>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 f983 	bl	8003cb2 <strsep>
 80009ac:	61b8      	str	r0, [r7, #24]
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f47f ae6a 	bne.w	800068a <main+0x52>
					}// checksum verification
 				}// end of $GNGLL sentences selection
		  	  }// end of splitting the buffStr by the "\n" delimiter with the strsep() C function

  			flag = 0; // we are ready to get new data from the sensor
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <main+0x3e8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
	  }// end of one interrupt/full-buffer cycle
 		HAL_Delay(200);
 80009bc:	20c8      	movs	r0, #200	; 0xc8
 80009be:	f000 fc29 	bl	8001214 <HAL_Delay>
	  if (flag == 1)					// interrupt signals that the buffer buff[300] is full
 80009c2:	e64d      	b.n	8000660 <main+0x28>
 80009c4:	20000314 	.word	0x20000314
 80009c8:	2000032a 	.word	0x2000032a
 80009cc:	08005134 	.word	0x08005134
 80009d0:	200002ec 	.word	0x200002ec
 80009d4:	200002f0 	.word	0x200002f0
 80009d8:	200002f4 	.word	0x200002f4
 80009dc:	20000300 	.word	0x20000300
 80009e0:	20000304 	.word	0x20000304
 80009e4:	20000308 	.word	0x20000308
 80009e8:	08005124 	.word	0x08005124
 80009ec:	20000320 	.word	0x20000320
 80009f0:	20000324 	.word	0x20000324
 80009f4:	20000328 	.word	0x20000328
 80009f8:	20000318 	.word	0x20000318
 80009fc:	08005138 	.word	0x08005138
 8000a00:	200002fc 	.word	0x200002fc
 8000a04:	200000d0 	.word	0x200000d0
 8000a08:	0800513c 	.word	0x0800513c
 8000a0c:	08005140 	.word	0x08005140
 8000a10:	08005144 	.word	0x08005144
 8000a14:	20000310 	.word	0x20000310
 8000a18:	08005148 	.word	0x08005148
 8000a1c:	08005154 	.word	0x08005154
 8000a20:	20000174 	.word	0x20000174

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2234      	movs	r2, #52	; 0x34
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 f8d4 	bl	8003be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a29      	ldr	r2, [pc, #164]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <SystemClock_Config+0xd4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <SystemClock_Config+0xd8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <SystemClock_Config+0xd8>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <SystemClock_Config+0xd8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aa0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fd58 	bl	8002568 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000abe:	f000 f901 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f9f8 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aea:	f000 f8eb 	bl	8000cc4 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART1_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b38:	f001 ffb4 	bl	8002aa4 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f8bf 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	40011000 	.word	0x40011000

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART2_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f001 ff8a 	bl	8002aa4 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f895 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000d0 	.word	0x200000d0
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_DMA_Init+0x3c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <MX_DMA_Init+0x3c>)
 8000bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_DMA_Init+0x3c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	203a      	movs	r0, #58	; 0x3a
 8000bd0:	f000 fc1f 	bl	8001412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bd4:	203a      	movs	r0, #58	; 0x3a
 8000bd6:	f000 fc38 	bl	800144a <HAL_NVIC_EnableIRQ>

}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2120      	movs	r1, #32
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c74:	f001 f914 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <MX_GPIO_Init+0xd8>)
 8000c90:	f000 ff72 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000cac:	f000 ff64 	bl	8001b78 <HAL_GPIO_Init>

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	; 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020800 	.word	0x40020800

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0e:	2007      	movs	r0, #7
 8000d10:	f000 fb74 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <HAL_UART_MspInit+0x164>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d163      	bne.n	8000e0a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a4f      	ldr	r2, [pc, #316]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a48      	ldr	r2, [pc, #288]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	483d      	ldr	r0, [pc, #244]	; (8000e8c <HAL_UART_MspInit+0x16c>)
 8000d98:	f000 feee 	bl	8001b78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d9c:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000d9e:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <HAL_UART_MspInit+0x174>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000da4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ddc:	482c      	ldr	r0, [pc, #176]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000dde:	f000 fb4f 	bl	8001480 <HAL_DMA_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000de8:	f7ff ff6c 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38
 8000df2:	4a27      	ldr	r2, [pc, #156]	; (8000e90 <HAL_UART_MspInit+0x170>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2025      	movs	r0, #37	; 0x25
 8000dfe:	f000 fb08 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e02:	2025      	movs	r0, #37	; 0x25
 8000e04:	f000 fb21 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e08:	e038      	b.n	8000e7c <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART2)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <HAL_UART_MspInit+0x178>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d133      	bne.n	8000e7c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0x168>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4809      	ldr	r0, [pc, #36]	; (8000e8c <HAL_UART_MspInit+0x16c>)
 8000e68:	f000 fe86 	bl	8001b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2026      	movs	r0, #38	; 0x26
 8000e72:	f000 face 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	; 0x26
 8000e78:	f000 fae7 	bl	800144a <HAL_NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	; 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40011000 	.word	0x40011000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	20000114 	.word	0x20000114
 8000e94:	40026440 	.word	0x40026440
 8000e98:	40004400 	.word	0x40004400

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f974 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <USART1_IRQHandler+0x10>)
 8000ef6:	f001 fee5 	bl	8002cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000008c 	.word	0x2000008c

08000f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <USART2_IRQHandler+0x10>)
 8000f0a:	f001 fedb 	bl	8002cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000d0 	.word	0x200000d0

08000f18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA2_Stream2_IRQHandler+0x10>)
 8000f1e:	f000 fbef 	bl	8001700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000114 	.word	0x20000114

08000f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_kill>:

int _kill(int pid, int sig)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f46:	f002 fe21 	bl	8003b8c <__errno>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2216      	movs	r2, #22
 8000f4e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_exit>:

void _exit (int status)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffe7 	bl	8000f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f6e:	e7fe      	b.n	8000f6e <_exit+0x12>

08000f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
	}

return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
	}
	return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_close>:

int _close(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	605a      	str	r2, [r3, #4]
	return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f002 fd86 	bl	8003b8c <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20020000 	.word	0x20020000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	2000032c 	.word	0x2000032c
 80010b4:	20000348 	.word	0x20000348

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e2:	490e      	ldr	r1, [pc, #56]	; (800111c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f8:	4c0b      	ldr	r4, [pc, #44]	; (8001128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001106:	f7ff ffd7 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f002 fd45 	bl	8003b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fa93 	bl	8000638 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001120:	080052d0 	.word	0x080052d0
  ldr r2, =_sbss
 8001124:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001128:	20000344 	.word	0x20000344

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f94f 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fdb4 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f967 	bl	8001466 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f92f 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000330 	.word	0x20000330

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000330 	.word	0x20000330

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff feb6 	bl	80011fc <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e099      	b.n	80015d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014bc:	e00f      	b.n	80014de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014be:	f7ff fe9d 	bl	80011fc <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d908      	bls.n	80014de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e078      	b.n	80015d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e8      	bne.n	80014be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_DMA_Init+0x158>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	2b04      	cmp	r3, #4
 8001536:	d107      	bne.n	8001548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4313      	orrs	r3, r2
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4313      	orrs	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f023 0307 	bic.w	r3, r3, #7
 800155e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	4313      	orrs	r3, r2
 8001568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2b04      	cmp	r3, #4
 8001570:	d117      	bne.n	80015a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fa7b 	bl	8001a80 <DMA_CheckFifoParam>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800159e:	2301      	movs	r3, #1
 80015a0:	e016      	b.n	80015d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa32 	bl	8001a14 <DMA_CalcBaseAndBitshift>
 80015b0:	4603      	mov	r3, r0
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	223f      	movs	r2, #63	; 0x3f
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	f010803f 	.word	0xf010803f

080015dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015ea:	f7ff fe07 	bl	80011fc <HAL_GetTick>
 80015ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d008      	beq.n	800160e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e052      	b.n	80016b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0216 	bic.w	r2, r2, #22
 800161c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800162c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <HAL_DMA_Abort+0x62>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0208 	bic.w	r2, r2, #8
 800164c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165e:	e013      	b.n	8001688 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001660:	f7ff fdcc 	bl	80011fc <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b05      	cmp	r3, #5
 800166c:	d90c      	bls.n	8001688 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e015      	b.n	80016b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1e4      	bne.n	8001660 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	223f      	movs	r2, #63	; 0x3f
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d004      	beq.n	80016da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00c      	b.n	80016f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800170c:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <HAL_DMA_IRQHandler+0x248>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a8e      	ldr	r2, [pc, #568]	; (800194c <HAL_DMA_IRQHandler+0x24c>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0a9b      	lsrs	r3, r3, #10
 8001718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2208      	movs	r2, #8
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01a      	beq.n	800176c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0204 	bic.w	r2, r2, #4
 8001752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2208      	movs	r2, #8
 800175a:	409a      	lsls	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	2201      	movs	r2, #1
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d012      	beq.n	80017a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2201      	movs	r2, #1
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f043 0202 	orr.w	r2, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	2204      	movs	r2, #4
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d012      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	2204      	movs	r2, #4
 80017c6:	409a      	lsls	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f043 0204 	orr.w	r2, r3, #4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	2210      	movs	r2, #16
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d043      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03c      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	2210      	movs	r2, #16
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d018      	beq.n	8001842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d108      	bne.n	8001830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d024      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
 800182e:	e01f      	b.n	8001870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
 8001840:	e016      	b.n	8001870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0208 	bic.w	r2, r2, #8
 800185e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	2220      	movs	r2, #32
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 808f 	beq.w	80019a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8087 	beq.w	80019a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2220      	movs	r2, #32
 8001898:	409a      	lsls	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d136      	bne.n	8001918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0216 	bic.w	r2, r2, #22
 80018b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <HAL_DMA_IRQHandler+0x1da>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0208 	bic.w	r2, r2, #8
 80018e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	223f      	movs	r2, #63	; 0x3f
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190a:	2b00      	cmp	r3, #0
 800190c:	d07e      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
        }
        return;
 8001916:	e079      	b.n	8001a0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01d      	beq.n	8001962 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10d      	bne.n	8001950 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	2b00      	cmp	r3, #0
 800193a:	d031      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
 8001944:	e02c      	b.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
 8001960:	e01e      	b.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10f      	bne.n	8001990 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0210 	bic.w	r2, r2, #16
 800197e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d032      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d022      	beq.n	80019fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2205      	movs	r2, #5
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d307      	bcc.n	80019e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f2      	bne.n	80019cc <HAL_DMA_IRQHandler+0x2cc>
 80019e6:	e000      	b.n	80019ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
 8001a0a:	e000      	b.n	8001a0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a0c:	bf00      	nop
    }
  }
}
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3b10      	subs	r3, #16
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <DMA_CalcBaseAndBitshift+0x64>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <DMA_CalcBaseAndBitshift+0x68>)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d909      	bls.n	8001a56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	1d1a      	adds	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	659a      	str	r2, [r3, #88]	; 0x58
 8001a54:	e007      	b.n	8001a66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	aaaaaaab 	.word	0xaaaaaaab
 8001a7c:	08005170 	.word	0x08005170

08001a80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11f      	bne.n	8001ada <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d856      	bhi.n	8001b4e <DMA_CheckFifoParam+0xce>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <DMA_CheckFifoParam+0x28>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001ab9 	.word	0x08001ab9
 8001aac:	08001acb 	.word	0x08001acb
 8001ab0:	08001ab9 	.word	0x08001ab9
 8001ab4:	08001b4f 	.word	0x08001b4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d046      	beq.n	8001b52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac8:	e043      	b.n	8001b52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ad2:	d140      	bne.n	8001b56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad8:	e03d      	b.n	8001b56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae2:	d121      	bne.n	8001b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d837      	bhi.n	8001b5a <DMA_CheckFifoParam+0xda>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <DMA_CheckFifoParam+0x70>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b07 	.word	0x08001b07
 8001af8:	08001b01 	.word	0x08001b01
 8001afc:	08001b19 	.word	0x08001b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      break;
 8001b04:	e030      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d025      	beq.n	8001b5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b16:	e022      	b.n	8001b5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b20:	d11f      	bne.n	8001b62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b26:	e01c      	b.n	8001b62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d903      	bls.n	8001b36 <DMA_CheckFifoParam+0xb6>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d003      	beq.n	8001b3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b34:	e018      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
      break;
 8001b3a:	e015      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4c:	e00b      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      break;
 8001b4e:	bf00      	nop
 8001b50:	e00a      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
 8001b54:	e008      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      break;
 8001b56:	bf00      	nop
 8001b58:	e006      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5a:	bf00      	nop
 8001b5c:	e004      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5e:	bf00      	nop
 8001b60:	e002      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b62:	bf00      	nop
 8001b64:	e000      	b.n	8001b68 <DMA_CheckFifoParam+0xe8>
      break;
 8001b66:	bf00      	nop
    }
  } 
  
  return status; 
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e165      	b.n	8001e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 8154 	bne.w	8001e5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d005      	beq.n	8001bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d130      	bne.n	8001c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0201 	and.w	r2, r3, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d017      	beq.n	8001c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d123      	bne.n	8001cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	08da      	lsrs	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3208      	adds	r2, #8
 8001cb6:	69b9      	ldr	r1, [r7, #24]
 8001cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80ae 	beq.w	8001e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <HAL_GPIO_Init+0x300>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1a:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <HAL_GPIO_Init+0x308>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_Init+0x21a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_GPIO_Init+0x30c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x216>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_GPIO_Init+0x310>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0x212>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x314>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_GPIO_Init+0x318>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x20a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x31c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x206>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <HAL_GPIO_Init+0x320>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x202>
 8001d76:	2306      	movs	r3, #6
 8001d78:	e00c      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00a      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d7e:	2305      	movs	r3, #5
 8001d80:	e008      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d86:	2303      	movs	r3, #3
 8001d88:	e004      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x21c>
 8001d92:	2300      	movs	r3, #0
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	f002 0203 	and.w	r2, r2, #3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da4:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_GPIO_Init+0x304>)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd6:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e00:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_GPIO_Init+0x324>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	f67f ae96 	bls.w	8001b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40021400 	.word	0x40021400
 8001e98:	40021800 	.word	0x40021800
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ebc:	e003      	b.n	8001ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	041a      	lsls	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cc      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d90c      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d044      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e067      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4934      	ldr	r1, [pc, #208]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f91a 	bl	80011fc <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff f916 	bl	80011fc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e04f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d20c      	bcs.n	800201c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205a:	f000 f855 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	490a      	ldr	r1, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	5ccb      	ldrb	r3, [r1, r3]
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f87a 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	08005158 	.word	0x08005158
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4903      	ldr	r1, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08005168 	.word	0x08005168

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4903      	ldr	r1, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5ccb      	ldrb	r3, [r1, r3]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	08005168 	.word	0x08005168

08002108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800210c:	b0ae      	sub	sp, #184	; 0xb8
 800210e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800212e:	4bcb      	ldr	r3, [pc, #812]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b0c      	cmp	r3, #12
 8002138:	f200 8206 	bhi.w	8002548 <HAL_RCC_GetSysClockFreq+0x440>
 800213c:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <HAL_RCC_GetSysClockFreq+0x3c>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	08002179 	.word	0x08002179
 8002148:	08002549 	.word	0x08002549
 800214c:	08002549 	.word	0x08002549
 8002150:	08002549 	.word	0x08002549
 8002154:	08002181 	.word	0x08002181
 8002158:	08002549 	.word	0x08002549
 800215c:	08002549 	.word	0x08002549
 8002160:	08002549 	.word	0x08002549
 8002164:	08002189 	.word	0x08002189
 8002168:	08002549 	.word	0x08002549
 800216c:	08002549 	.word	0x08002549
 8002170:	08002549 	.word	0x08002549
 8002174:	08002379 	.word	0x08002379
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4bb9      	ldr	r3, [pc, #740]	; (8002460 <HAL_RCC_GetSysClockFreq+0x358>)
 800217a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800217e:	e1e7      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4bb8      	ldr	r3, [pc, #736]	; (8002464 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002186:	e1e3      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002188:	4bb4      	ldr	r3, [pc, #720]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002194:	4bb1      	ldr	r3, [pc, #708]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d071      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a0:	4bae      	ldr	r3, [pc, #696]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	2200      	movs	r2, #0
 80021a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021c6:	4622      	mov	r2, r4
 80021c8:	462b      	mov	r3, r5
 80021ca:	f04f 0000 	mov.w	r0, #0
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	0159      	lsls	r1, r3, #5
 80021d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d8:	0150      	lsls	r0, r2, #5
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4621      	mov	r1, r4
 80021e0:	1a51      	subs	r1, r2, r1
 80021e2:	6439      	str	r1, [r7, #64]	; 0x40
 80021e4:	4629      	mov	r1, r5
 80021e6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021f8:	4649      	mov	r1, r9
 80021fa:	018b      	lsls	r3, r1, #6
 80021fc:	4641      	mov	r1, r8
 80021fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002202:	4641      	mov	r1, r8
 8002204:	018a      	lsls	r2, r1, #6
 8002206:	4641      	mov	r1, r8
 8002208:	1a51      	subs	r1, r2, r1
 800220a:	63b9      	str	r1, [r7, #56]	; 0x38
 800220c:	4649      	mov	r1, r9
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002220:	4649      	mov	r1, r9
 8002222:	00cb      	lsls	r3, r1, #3
 8002224:	4641      	mov	r1, r8
 8002226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800222a:	4641      	mov	r1, r8
 800222c:	00ca      	lsls	r2, r1, #3
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	4603      	mov	r3, r0
 8002234:	4622      	mov	r2, r4
 8002236:	189b      	adds	r3, r3, r2
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
 800223a:	462b      	mov	r3, r5
 800223c:	460a      	mov	r2, r1
 800223e:	eb42 0303 	adc.w	r3, r2, r3
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002250:	4629      	mov	r1, r5
 8002252:	024b      	lsls	r3, r1, #9
 8002254:	4621      	mov	r1, r4
 8002256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800225a:	4621      	mov	r1, r4
 800225c:	024a      	lsls	r2, r1, #9
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002266:	2200      	movs	r2, #0
 8002268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800226c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002270:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002274:	f7fe f824 	bl	80002c0 <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4613      	mov	r3, r2
 800227e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002282:	e067      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	2200      	movs	r2, #0
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002290:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229c:	67bb      	str	r3, [r7, #120]	; 0x78
 800229e:	2300      	movs	r3, #0
 80022a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022a6:	4622      	mov	r2, r4
 80022a8:	462b      	mov	r3, r5
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b8:	0150      	lsls	r0, r2, #5
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4621      	mov	r1, r4
 80022c0:	1a51      	subs	r1, r2, r1
 80022c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80022c4:	4629      	mov	r1, r5
 80022c6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022d8:	4649      	mov	r1, r9
 80022da:	018b      	lsls	r3, r1, #6
 80022dc:	4641      	mov	r1, r8
 80022de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e2:	4641      	mov	r1, r8
 80022e4:	018a      	lsls	r2, r1, #6
 80022e6:	4641      	mov	r1, r8
 80022e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ec:	4649      	mov	r1, r9
 80022ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002306:	4692      	mov	sl, r2
 8002308:	469b      	mov	fp, r3
 800230a:	4623      	mov	r3, r4
 800230c:	eb1a 0303 	adds.w	r3, sl, r3
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	462b      	mov	r3, r5
 8002314:	eb4b 0303 	adc.w	r3, fp, r3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002326:	4629      	mov	r1, r5
 8002328:	028b      	lsls	r3, r1, #10
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002330:	4621      	mov	r1, r4
 8002332:	028a      	lsls	r2, r1, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800233c:	2200      	movs	r2, #0
 800233e:	673b      	str	r3, [r7, #112]	; 0x70
 8002340:	677a      	str	r2, [r7, #116]	; 0x74
 8002342:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002346:	f7fd ffbb 	bl	80002c0 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4613      	mov	r3, r2
 8002350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002354:	4b41      	ldr	r3, [pc, #260]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800236a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002376:	e0eb      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06b      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002390:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_RCC_GetSysClockFreq+0x354>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	2200      	movs	r2, #0
 8002398:	66bb      	str	r3, [r7, #104]	; 0x68
 800239a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800239c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800239e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a2:	663b      	str	r3, [r7, #96]	; 0x60
 80023a4:	2300      	movs	r3, #0
 80023a6:	667b      	str	r3, [r7, #100]	; 0x64
 80023a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80023ac:	4622      	mov	r2, r4
 80023ae:	462b      	mov	r3, r5
 80023b0:	f04f 0000 	mov.w	r0, #0
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	0159      	lsls	r1, r3, #5
 80023ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023be:	0150      	lsls	r0, r2, #5
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4621      	mov	r1, r4
 80023c6:	1a51      	subs	r1, r2, r1
 80023c8:	61b9      	str	r1, [r7, #24]
 80023ca:	4629      	mov	r1, r5
 80023cc:	eb63 0301 	sbc.w	r3, r3, r1
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023de:	4659      	mov	r1, fp
 80023e0:	018b      	lsls	r3, r1, #6
 80023e2:	4651      	mov	r1, sl
 80023e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023e8:	4651      	mov	r1, sl
 80023ea:	018a      	lsls	r2, r1, #6
 80023ec:	4651      	mov	r1, sl
 80023ee:	ebb2 0801 	subs.w	r8, r2, r1
 80023f2:	4659      	mov	r1, fp
 80023f4:	eb63 0901 	sbc.w	r9, r3, r1
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002404:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002408:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800240c:	4690      	mov	r8, r2
 800240e:	4699      	mov	r9, r3
 8002410:	4623      	mov	r3, r4
 8002412:	eb18 0303 	adds.w	r3, r8, r3
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	462b      	mov	r3, r5
 800241a:	eb49 0303 	adc.w	r3, r9, r3
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800242c:	4629      	mov	r1, r5
 800242e:	024b      	lsls	r3, r1, #9
 8002430:	4621      	mov	r1, r4
 8002432:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002436:	4621      	mov	r1, r4
 8002438:	024a      	lsls	r2, r1, #9
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002442:	2200      	movs	r2, #0
 8002444:	65bb      	str	r3, [r7, #88]	; 0x58
 8002446:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002448:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800244c:	f7fd ff38 	bl	80002c0 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4613      	mov	r3, r2
 8002456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800245a:	e065      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x420>
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_GetSysClockFreq+0x458>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	2200      	movs	r2, #0
 8002470:	4618      	mov	r0, r3
 8002472:	4611      	mov	r1, r2
 8002474:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002478:	653b      	str	r3, [r7, #80]	; 0x50
 800247a:	2300      	movs	r3, #0
 800247c:	657b      	str	r3, [r7, #84]	; 0x54
 800247e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002482:	4642      	mov	r2, r8
 8002484:	464b      	mov	r3, r9
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0159      	lsls	r1, r3, #5
 8002490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002494:	0150      	lsls	r0, r2, #5
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4641      	mov	r1, r8
 800249c:	1a51      	subs	r1, r2, r1
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	4649      	mov	r1, r9
 80024a2:	eb63 0301 	sbc.w	r3, r3, r1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024b4:	4659      	mov	r1, fp
 80024b6:	018b      	lsls	r3, r1, #6
 80024b8:	4651      	mov	r1, sl
 80024ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024be:	4651      	mov	r1, sl
 80024c0:	018a      	lsls	r2, r1, #6
 80024c2:	4651      	mov	r1, sl
 80024c4:	1a54      	subs	r4, r2, r1
 80024c6:	4659      	mov	r1, fp
 80024c8:	eb63 0501 	sbc.w	r5, r3, r1
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	00eb      	lsls	r3, r5, #3
 80024d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024da:	00e2      	lsls	r2, r4, #3
 80024dc:	4614      	mov	r4, r2
 80024de:	461d      	mov	r5, r3
 80024e0:	4643      	mov	r3, r8
 80024e2:	18e3      	adds	r3, r4, r3
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	464b      	mov	r3, r9
 80024e8:	eb45 0303 	adc.w	r3, r5, r3
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fa:	4629      	mov	r1, r5
 80024fc:	028b      	lsls	r3, r1, #10
 80024fe:	4621      	mov	r1, r4
 8002500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002504:	4621      	mov	r1, r4
 8002506:	028a      	lsls	r2, r1, #10
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002510:	2200      	movs	r2, #0
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
 8002514:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002516:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800251a:	f7fd fed1 	bl	80002c0 <__aeabi_uldivmod>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4613      	mov	r3, r2
 8002524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCC_GetSysClockFreq+0x458>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0f1b      	lsrs	r3, r3, #28
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800253a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002546:	e003      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_RCC_GetSysClockFreq+0x45c>)
 800254a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800254e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002554:	4618      	mov	r0, r3
 8002556:	37b8      	adds	r7, #184	; 0xb8
 8002558:	46bd      	mov	sp, r7
 800255a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	00f42400 	.word	0x00f42400

08002568 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e28d      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8083 	beq.w	800268e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002588:	4b94      	ldr	r3, [pc, #592]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b04      	cmp	r3, #4
 8002592:	d019      	beq.n	80025c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002594:	4b91      	ldr	r3, [pc, #580]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800259c:	2b08      	cmp	r3, #8
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025a0:	4b8e      	ldr	r3, [pc, #568]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ac:	d00c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b8b      	ldr	r3, [pc, #556]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d112      	bne.n	80025e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c6:	d10b      	bne.n	80025e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	4b84      	ldr	r3, [pc, #528]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d05b      	beq.n	800268c <HAL_RCC_OscConfig+0x124>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d157      	bne.n	800268c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e25a      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d106      	bne.n	80025f8 <HAL_RCC_OscConfig+0x90>
 80025ea:	4b7c      	ldr	r3, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7b      	ldr	r2, [pc, #492]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e01d      	b.n	8002634 <HAL_RCC_OscConfig+0xcc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0xb4>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0xcc>
 800261c:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6e      	ldr	r2, [pc, #440]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6b      	ldr	r2, [pc, #428]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fdde 	bl	80011fc <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fdda 	bl	80011fc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e21f      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0xdc>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fdca 	bl	80011fc <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fdc6 	bl	80011fc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e20b      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x104>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d06f      	beq.n	800277a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800269a:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d017      	beq.n	80026d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d105      	bne.n	80026be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x186>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1d3      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x278>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe fd73 	bl	80011fc <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe fd6f 	bl	80011fc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1b4      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x278>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fd52 	bl	80011fc <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe fd4e 	bl	80011fc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e193      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d036      	beq.n	80027f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_RCC_OscConfig+0x27c>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fd32 	bl	80011fc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe fd2e 	bl	80011fc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e173      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x274>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x234>
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x27c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7fe fd1b 	bl	80011fc <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00e      	b.n	80027e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fd17 	bl	80011fc <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d907      	bls.n	80027e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e15c      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ea      	bne.n	80027ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8097 	beq.w	8002930 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b83      	ldr	r3, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a7e      	ldr	r2, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b79      	ldr	r3, [pc, #484]	; (8002a18 <HAL_RCC_OscConfig+0x4b0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCC_OscConfig+0x4b0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a75      	ldr	r2, [pc, #468]	; (8002a18 <HAL_RCC_OscConfig+0x4b0>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe fcd7 	bl	80011fc <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe fcd3 	bl	80011fc <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e118      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <HAL_RCC_OscConfig+0x4b0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x31e>
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x358>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x340>
 800288e:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a60      	ldr	r2, [pc, #384]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a5d      	ldr	r2, [pc, #372]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x358>
 80028a8:	4b5a      	ldr	r3, [pc, #360]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a59      	ldr	r2, [pc, #356]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a56      	ldr	r2, [pc, #344]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fc98 	bl	80011fc <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe fc94 	bl	80011fc <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0d7      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x368>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fc82 	bl	80011fc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fc7e 	bl	80011fc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0c1      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a3a      	ldr	r2, [pc, #232]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80ad 	beq.w	8002a94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d060      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d145      	bne.n	80029da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <HAL_RCC_OscConfig+0x4b4>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fc52 	bl	80011fc <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fc4e 	bl	80011fc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e093      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	071b      	lsls	r3, r3, #28
 80029a6:	491b      	ldr	r1, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x4b4>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fc23 	bl	80011fc <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fc1f 	bl	80011fc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e064      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x452>
 80029d8:	e05c      	b.n	8002a94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCC_OscConfig+0x4b4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fc0c 	bl	80011fc <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fc08 	bl	80011fc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e04d      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x480>
 8002a06:	e045      	b.n	8002a94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e040      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_OscConfig+0x538>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d030      	beq.n	8002a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d129      	bne.n	8002a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d122      	bne.n	8002a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a50:	4013      	ands	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d119      	bne.n	8002a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d10f      	bne.n	8002a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e03f      	b.n	8002b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe f928 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fddb 	bl	80036a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b08a      	sub	sp, #40	; 0x28
 8002b42:	af02      	add	r7, sp, #8
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d17c      	bne.n	8002c58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_Transmit+0x2c>
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e075      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Transmit+0x3e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e06e      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b92:	f7fe fb33 	bl	80011fc <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d108      	bne.n	8002bc0 <HAL_UART_Transmit+0x82>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d104      	bne.n	8002bc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	e003      	b.n	8002bc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bd0:	e02a      	b.n	8002c28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fb1f 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3302      	adds	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e007      	b.n	8002c1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1cf      	bne.n	8002bd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 faef 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e006      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d11d      	bne.n	8002cb8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_Receive_IT+0x26>
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e016      	b.n	8002cba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Receive_IT+0x38>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e00f      	b.n	8002cba <HAL_UART_Receive_IT+0x58>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fb24 	bl	80032fc <UART_Start_Receive_IT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	e000      	b.n	8002cba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b0ba      	sub	sp, #232	; 0xe8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_UART_IRQHandler+0x66>
 8002d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fc03 	bl	800352e <UART_Receive_IT>
      return;
 8002d28:	e256      	b.n	80031d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80de 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x22c>
 8002d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80d1 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_UART_IRQHandler+0xae>
 8002d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_UART_IRQHandler+0xd2>
 8002d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f043 0202 	orr.w	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_UART_IRQHandler+0xf6>
 8002da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f043 0204 	orr.w	r2, r3, #4
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <HAL_UART_IRQHandler+0x126>
 8002dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0208 	orr.w	r2, r3, #8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 81ed 	beq.w	80031ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_UART_IRQHandler+0x14e>
 8002e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fb8e 	bl	800352e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_UART_IRQHandler+0x17a>
 8002e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04f      	beq.n	8002ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa96 	bl	8003370 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d141      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3314      	adds	r3, #20
 8002e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1d9      	bne.n	8002e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d013      	beq.n	8002ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	4a7d      	ldr	r2, [pc, #500]	; (80030a0 <HAL_UART_IRQHandler+0x3dc>)
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fc02 	bl	80016bc <HAL_DMA_Abort_IT>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	e00e      	b.n	8002eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f990 	bl	80031f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	e00a      	b.n	8002eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f98c 	bl	80031f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002edc:	e006      	b.n	8002eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f988 	bl	80031f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002eea:	e170      	b.n	80031ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	bf00      	nop
    return;
 8002eee:	e16e      	b.n	80031ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 814a 	bne.w	800318e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8143 	beq.w	800318e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 813c 	beq.w	800318e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	f040 80b4 	bne.w	80030a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8140 	beq.w	80031d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	f080 8139 	bcs.w	80031d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f72:	f000 8088 	beq.w	8003086 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1d9      	bne.n	8002f76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e1      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800300e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3314      	adds	r3, #20
 800301e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e3      	bne.n	8002ffe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003056:	f023 0310 	bic.w	r3, r3, #16
 800305a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003068:	65ba      	str	r2, [r7, #88]	; 0x58
 800306a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800306e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e3      	bne.n	8003044 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe faab 	bl	80015dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800308e:	b29b      	uxth	r3, r3
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	b29b      	uxth	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8b6 	bl	8003208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800309c:	e099      	b.n	80031d2 <HAL_UART_IRQHandler+0x50e>
 800309e:	bf00      	nop
 80030a0:	08003437 	.word	0x08003437
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 808b 	beq.w	80031d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80030c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8086 	beq.w	80031d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030ee:	647a      	str	r2, [r7, #68]	; 0x44
 80030f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e3      	bne.n	80030ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	623b      	str	r3, [r7, #32]
   return(result);
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3314      	adds	r3, #20
 8003122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003126:	633a      	str	r2, [r7, #48]	; 0x30
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800312c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e3      	bne.n	8003102 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	e853 3f00 	ldrex	r3, [r3]
 8003156:	60fb      	str	r3, [r7, #12]
   return(result);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0310 	bic.w	r3, r3, #16
 800315e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800316c:	61fa      	str	r2, [r7, #28]
 800316e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	69b9      	ldr	r1, [r7, #24]
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	617b      	str	r3, [r7, #20]
   return(result);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e3      	bne.n	8003148 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f83e 	bl	8003208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800318c:	e023      	b.n	80031d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800318e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_UART_IRQHandler+0x4ea>
 800319a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f959 	bl	800345e <UART_Transmit_IT>
    return;
 80031ac:	e014      	b.n	80031d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <HAL_UART_IRQHandler+0x514>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f999 	bl	80034fe <UART_EndTransmit_IT>
    return;
 80031cc:	e004      	b.n	80031d8 <HAL_UART_IRQHandler+0x514>
    return;
 80031ce:	bf00      	nop
 80031d0:	e002      	b.n	80031d8 <HAL_UART_IRQHandler+0x514>
      return;
 80031d2:	bf00      	nop
 80031d4:	e000      	b.n	80031d8 <HAL_UART_IRQHandler+0x514>
      return;
 80031d6:	bf00      	nop
  }
}
 80031d8:	37e8      	adds	r7, #232	; 0xe8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop

080031e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b090      	sub	sp, #64	; 0x40
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003230:	e050      	b.n	80032d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d04c      	beq.n	80032d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800323a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x30>
 8003240:	f7fd ffdc 	bl	80011fc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800324c:	429a      	cmp	r2, r3
 800324e:	d241      	bcs.n	80032d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	330c      	adds	r3, #12
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	330c      	adds	r3, #12
 800326e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003270:	637a      	str	r2, [r7, #52]	; 0x34
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003278:	e841 2300 	strex	r3, r2, [r1]
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e5      	bne.n	8003250 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3314      	adds	r3, #20
 800328a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	613b      	str	r3, [r7, #16]
   return(result);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	63bb      	str	r3, [r7, #56]	; 0x38
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3314      	adds	r3, #20
 80032a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032a4:	623a      	str	r2, [r7, #32]
 80032a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a8:	69f9      	ldr	r1, [r7, #28]
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	e841 2300 	strex	r3, r2, [r1]
 80032b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e5      	bne.n	8003284 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e00f      	b.n	80032f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d09f      	beq.n	8003232 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3740      	adds	r7, #64	; 0x40
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2222      	movs	r2, #34	; 0x22
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003340:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b095      	sub	sp, #84	; 0x54
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003398:	643a      	str	r2, [r7, #64]	; 0x40
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800339e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d119      	bne.n	800341c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f023 0310 	bic.w	r3, r3, #16
 80033fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003408:	61ba      	str	r2, [r7, #24]
 800340a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	613b      	str	r3, [r7, #16]
   return(result);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
}
 800342a:	bf00      	nop
 800342c:	3754      	adds	r7, #84	; 0x54
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fecf 	bl	80031f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b21      	cmp	r3, #33	; 0x21
 8003470:	d13e      	bne.n	80034f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d114      	bne.n	80034a6 <UART_Transmit_IT+0x48>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d110      	bne.n	80034a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003498:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	1c9a      	adds	r2, r3, #2
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]
 80034a4:	e008      	b.n	80034b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6211      	str	r1, [r2, #32]
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4619      	mov	r1, r3
 80034c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe5e 	bl	80031e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b08c      	sub	sp, #48	; 0x30
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b22      	cmp	r3, #34	; 0x22
 8003540:	f040 80ab 	bne.w	800369a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354c:	d117      	bne.n	800357e <UART_Receive_IT+0x50>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d113      	bne.n	800357e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	b29a      	uxth	r2, r3
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	1c9a      	adds	r2, r3, #2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
 800357c:	e026      	b.n	80035cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003590:	d007      	beq.n	80035a2 <UART_Receive_IT+0x74>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <UART_Receive_IT+0x82>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e008      	b.n	80035c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4619      	mov	r1, r3
 80035da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d15a      	bne.n	8003696 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0220 	bic.w	r2, r2, #32
 80035ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	2b01      	cmp	r3, #1
 800361e:	d135      	bne.n	800368c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	613b      	str	r3, [r7, #16]
   return(result);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f023 0310 	bic.w	r3, r3, #16
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	623a      	str	r2, [r7, #32]
 8003648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	69f9      	ldr	r1, [r7, #28]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	61bb      	str	r3, [r7, #24]
   return(result);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e5      	bne.n	8003626 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d10a      	bne.n	800367e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fdbf 	bl	8003208 <HAL_UARTEx_RxEventCallback>
 800368a:	e002      	b.n	8003692 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fc ff99 	bl	80005c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e002      	b.n	800369c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3730      	adds	r7, #48	; 0x30
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b0c0      	sub	sp, #256	; 0x100
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	68d9      	ldr	r1, [r3, #12]
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	ea40 0301 	orr.w	r3, r0, r1
 80036cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036fc:	f021 010c 	bic.w	r1, r1, #12
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800370a:	430b      	orrs	r3, r1
 800370c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	6999      	ldr	r1, [r3, #24]
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	ea40 0301 	orr.w	r3, r0, r1
 800372a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b8f      	ldr	r3, [pc, #572]	; (8003970 <UART_SetConfig+0x2cc>)
 8003734:	429a      	cmp	r2, r3
 8003736:	d005      	beq.n	8003744 <UART_SetConfig+0xa0>
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4b8d      	ldr	r3, [pc, #564]	; (8003974 <UART_SetConfig+0x2d0>)
 8003740:	429a      	cmp	r2, r3
 8003742:	d104      	bne.n	800374e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003744:	f7fe fccc 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8003748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800374c:	e003      	b.n	8003756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800374e:	f7fe fcb3 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8003752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003760:	f040 810c 	bne.w	800397c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800376e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	1891      	adds	r1, r2, r2
 800377c:	65b9      	str	r1, [r7, #88]	; 0x58
 800377e:	415b      	adcs	r3, r3
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003786:	4621      	mov	r1, r4
 8003788:	eb12 0801 	adds.w	r8, r2, r1
 800378c:	4629      	mov	r1, r5
 800378e:	eb43 0901 	adc.w	r9, r3, r1
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a6:	4690      	mov	r8, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	eb18 0303 	adds.w	r3, r8, r3
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037b4:	462b      	mov	r3, r5
 80037b6:	eb49 0303 	adc.w	r3, r9, r3
 80037ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037d2:	460b      	mov	r3, r1
 80037d4:	18db      	adds	r3, r3, r3
 80037d6:	653b      	str	r3, [r7, #80]	; 0x50
 80037d8:	4613      	mov	r3, r2
 80037da:	eb42 0303 	adc.w	r3, r2, r3
 80037de:	657b      	str	r3, [r7, #84]	; 0x54
 80037e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037e8:	f7fc fd6a 	bl	80002c0 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <UART_SetConfig+0x2d4>)
 80037f2:	fba3 2302 	umull	r2, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	011c      	lsls	r4, r3, #4
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	1891      	adds	r1, r2, r2
 8003812:	64b9      	str	r1, [r7, #72]	; 0x48
 8003814:	415b      	adcs	r3, r3
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800381c:	4641      	mov	r1, r8
 800381e:	eb12 0a01 	adds.w	sl, r2, r1
 8003822:	4649      	mov	r1, r9
 8003824:	eb43 0b01 	adc.w	fp, r3, r1
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800383c:	4692      	mov	sl, r2
 800383e:	469b      	mov	fp, r3
 8003840:	4643      	mov	r3, r8
 8003842:	eb1a 0303 	adds.w	r3, sl, r3
 8003846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800384a:	464b      	mov	r3, r9
 800384c:	eb4b 0303 	adc.w	r3, fp, r3
 8003850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003868:	460b      	mov	r3, r1
 800386a:	18db      	adds	r3, r3, r3
 800386c:	643b      	str	r3, [r7, #64]	; 0x40
 800386e:	4613      	mov	r3, r2
 8003870:	eb42 0303 	adc.w	r3, r2, r3
 8003874:	647b      	str	r3, [r7, #68]	; 0x44
 8003876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800387a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800387e:	f7fc fd1f 	bl	80002c0 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4611      	mov	r1, r2
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <UART_SetConfig+0x2d4>)
 800388a:	fba3 2301 	umull	r2, r3, r3, r1
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2264      	movs	r2, #100	; 0x64
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	1acb      	subs	r3, r1, r3
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <UART_SetConfig+0x2d4>)
 80038a0:	fba3 2302 	umull	r2, r3, r3, r2
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038ac:	441c      	add	r4, r3
 80038ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	1891      	adds	r1, r2, r2
 80038c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038c8:	415b      	adcs	r3, r3
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038d0:	4641      	mov	r1, r8
 80038d2:	1851      	adds	r1, r2, r1
 80038d4:	6339      	str	r1, [r7, #48]	; 0x30
 80038d6:	4649      	mov	r1, r9
 80038d8:	414b      	adcs	r3, r1
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038e8:	4659      	mov	r1, fp
 80038ea:	00cb      	lsls	r3, r1, #3
 80038ec:	4651      	mov	r1, sl
 80038ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f2:	4651      	mov	r1, sl
 80038f4:	00ca      	lsls	r2, r1, #3
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	4642      	mov	r2, r8
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003904:	464b      	mov	r3, r9
 8003906:	460a      	mov	r2, r1
 8003908:	eb42 0303 	adc.w	r3, r2, r3
 800390c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800391c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003924:	460b      	mov	r3, r1
 8003926:	18db      	adds	r3, r3, r3
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
 800392a:	4613      	mov	r3, r2
 800392c:	eb42 0303 	adc.w	r3, r2, r3
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800393a:	f7fc fcc1 	bl	80002c0 <__aeabi_uldivmod>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <UART_SetConfig+0x2d4>)
 8003944:	fba3 1302 	umull	r1, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	2164      	movs	r1, #100	; 0x64
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	3332      	adds	r3, #50	; 0x32
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <UART_SetConfig+0x2d4>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	f003 0207 	and.w	r2, r3, #7
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4422      	add	r2, r4
 800396a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800396c:	e105      	b.n	8003b7a <UART_SetConfig+0x4d6>
 800396e:	bf00      	nop
 8003970:	40011000 	.word	0x40011000
 8003974:	40011400 	.word	0x40011400
 8003978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800397c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800398a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800398e:	4642      	mov	r2, r8
 8003990:	464b      	mov	r3, r9
 8003992:	1891      	adds	r1, r2, r2
 8003994:	6239      	str	r1, [r7, #32]
 8003996:	415b      	adcs	r3, r3
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800399e:	4641      	mov	r1, r8
 80039a0:	1854      	adds	r4, r2, r1
 80039a2:	4649      	mov	r1, r9
 80039a4:	eb43 0501 	adc.w	r5, r3, r1
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	00eb      	lsls	r3, r5, #3
 80039b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	4614      	mov	r4, r2
 80039ba:	461d      	mov	r5, r3
 80039bc:	4643      	mov	r3, r8
 80039be:	18e3      	adds	r3, r4, r3
 80039c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039c4:	464b      	mov	r3, r9
 80039c6:	eb45 0303 	adc.w	r3, r5, r3
 80039ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039ea:	4629      	mov	r1, r5
 80039ec:	008b      	lsls	r3, r1, #2
 80039ee:	4621      	mov	r1, r4
 80039f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f4:	4621      	mov	r1, r4
 80039f6:	008a      	lsls	r2, r1, #2
 80039f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039fc:	f7fc fc60 	bl	80002c0 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4b60      	ldr	r3, [pc, #384]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003a06:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	011c      	lsls	r4, r3, #4
 8003a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	1891      	adds	r1, r2, r2
 8003a26:	61b9      	str	r1, [r7, #24]
 8003a28:	415b      	adcs	r3, r3
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a30:	4641      	mov	r1, r8
 8003a32:	1851      	adds	r1, r2, r1
 8003a34:	6139      	str	r1, [r7, #16]
 8003a36:	4649      	mov	r1, r9
 8003a38:	414b      	adcs	r3, r1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a48:	4659      	mov	r1, fp
 8003a4a:	00cb      	lsls	r3, r1, #3
 8003a4c:	4651      	mov	r1, sl
 8003a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a52:	4651      	mov	r1, sl
 8003a54:	00ca      	lsls	r2, r1, #3
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a64:	464b      	mov	r3, r9
 8003a66:	460a      	mov	r2, r1
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a88:	4649      	mov	r1, r9
 8003a8a:	008b      	lsls	r3, r1, #2
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a92:	4641      	mov	r1, r8
 8003a94:	008a      	lsls	r2, r1, #2
 8003a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a9a:	f7fc fc11 	bl	80002c0 <__aeabi_uldivmod>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	2164      	movs	r1, #100	; 0x64
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	3332      	adds	r3, #50	; 0x32
 8003ab6:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac2:	441c      	add	r4, r3
 8003ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac8:	2200      	movs	r2, #0
 8003aca:	673b      	str	r3, [r7, #112]	; 0x70
 8003acc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ace:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ad2:	4642      	mov	r2, r8
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	1891      	adds	r1, r2, r2
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	415b      	adcs	r3, r3
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae2:	4641      	mov	r1, r8
 8003ae4:	1851      	adds	r1, r2, r1
 8003ae6:	6039      	str	r1, [r7, #0]
 8003ae8:	4649      	mov	r1, r9
 8003aea:	414b      	adcs	r3, r1
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003afa:	4659      	mov	r1, fp
 8003afc:	00cb      	lsls	r3, r1, #3
 8003afe:	4651      	mov	r1, sl
 8003b00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b04:	4651      	mov	r1, sl
 8003b06:	00ca      	lsls	r2, r1, #3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4642      	mov	r2, r8
 8003b10:	189b      	adds	r3, r3, r2
 8003b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	663b      	str	r3, [r7, #96]	; 0x60
 8003b28:	667a      	str	r2, [r7, #100]	; 0x64
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b36:	4649      	mov	r1, r9
 8003b38:	008b      	lsls	r3, r1, #2
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b40:	4641      	mov	r1, r8
 8003b42:	008a      	lsls	r2, r1, #2
 8003b44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b48:	f7fc fbba 	bl	80002c0 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003b52:	fba3 1302 	umull	r1, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2164      	movs	r1, #100	; 0x64
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	3332      	adds	r3, #50	; 0x32
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	f003 020f 	and.w	r2, r3, #15
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4422      	add	r2, r4
 8003b78:	609a      	str	r2, [r3, #8]
}
 8003b7a:	bf00      	nop
 8003b7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	51eb851f 	.word	0x51eb851f

08003b8c <__errno>:
 8003b8c:	4b01      	ldr	r3, [pc, #4]	; (8003b94 <__errno+0x8>)
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	2000000c 	.word	0x2000000c

08003b98 <__libc_init_array>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	4d0d      	ldr	r5, [pc, #52]	; (8003bd0 <__libc_init_array+0x38>)
 8003b9c:	4c0d      	ldr	r4, [pc, #52]	; (8003bd4 <__libc_init_array+0x3c>)
 8003b9e:	1b64      	subs	r4, r4, r5
 8003ba0:	10a4      	asrs	r4, r4, #2
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	42a6      	cmp	r6, r4
 8003ba6:	d109      	bne.n	8003bbc <__libc_init_array+0x24>
 8003ba8:	4d0b      	ldr	r5, [pc, #44]	; (8003bd8 <__libc_init_array+0x40>)
 8003baa:	4c0c      	ldr	r4, [pc, #48]	; (8003bdc <__libc_init_array+0x44>)
 8003bac:	f001 faae 	bl	800510c <_init>
 8003bb0:	1b64      	subs	r4, r4, r5
 8003bb2:	10a4      	asrs	r4, r4, #2
 8003bb4:	2600      	movs	r6, #0
 8003bb6:	42a6      	cmp	r6, r4
 8003bb8:	d105      	bne.n	8003bc6 <__libc_init_array+0x2e>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc0:	4798      	blx	r3
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7ee      	b.n	8003ba4 <__libc_init_array+0xc>
 8003bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bca:	4798      	blx	r3
 8003bcc:	3601      	adds	r6, #1
 8003bce:	e7f2      	b.n	8003bb6 <__libc_init_array+0x1e>
 8003bd0:	080052c8 	.word	0x080052c8
 8003bd4:	080052c8 	.word	0x080052c8
 8003bd8:	080052c8 	.word	0x080052c8
 8003bdc:	080052cc 	.word	0x080052cc

08003be0 <memset>:
 8003be0:	4402      	add	r2, r0
 8003be2:	4603      	mov	r3, r0
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d100      	bne.n	8003bea <memset+0xa>
 8003be8:	4770      	bx	lr
 8003bea:	f803 1b01 	strb.w	r1, [r3], #1
 8003bee:	e7f9      	b.n	8003be4 <memset+0x4>

08003bf0 <siprintf>:
 8003bf0:	b40e      	push	{r1, r2, r3}
 8003bf2:	b500      	push	{lr}
 8003bf4:	b09c      	sub	sp, #112	; 0x70
 8003bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bf8:	9002      	str	r0, [sp, #8]
 8003bfa:	9006      	str	r0, [sp, #24]
 8003bfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c00:	4809      	ldr	r0, [pc, #36]	; (8003c28 <siprintf+0x38>)
 8003c02:	9107      	str	r1, [sp, #28]
 8003c04:	9104      	str	r1, [sp, #16]
 8003c06:	4909      	ldr	r1, [pc, #36]	; (8003c2c <siprintf+0x3c>)
 8003c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	6800      	ldr	r0, [r0, #0]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	a902      	add	r1, sp, #8
 8003c14:	f000 fa46 	bl	80040a4 <_svfiprintf_r>
 8003c18:	9b02      	ldr	r3, [sp, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	b01c      	add	sp, #112	; 0x70
 8003c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c24:	b003      	add	sp, #12
 8003c26:	4770      	bx	lr
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	ffff0208 	.word	0xffff0208

08003c30 <strcat>:
 8003c30:	b510      	push	{r4, lr}
 8003c32:	4602      	mov	r2, r0
 8003c34:	7814      	ldrb	r4, [r2, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	3201      	adds	r2, #1
 8003c3a:	2c00      	cmp	r4, #0
 8003c3c:	d1fa      	bne.n	8003c34 <strcat+0x4>
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	d1f9      	bne.n	8003c40 <strcat+0x10>
 8003c4c:	bd10      	pop	{r4, pc}

08003c4e <strchr>:
 8003c4e:	b2c9      	uxtb	r1, r1
 8003c50:	4603      	mov	r3, r0
 8003c52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c56:	b11a      	cbz	r2, 8003c60 <strchr+0x12>
 8003c58:	428a      	cmp	r2, r1
 8003c5a:	d1f9      	bne.n	8003c50 <strchr+0x2>
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	4770      	bx	lr
 8003c60:	2900      	cmp	r1, #0
 8003c62:	bf18      	it	ne
 8003c64:	2300      	movne	r3, #0
 8003c66:	e7f9      	b.n	8003c5c <strchr+0xe>

08003c68 <strcpy>:
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c6e:	f803 2b01 	strb.w	r2, [r3], #1
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	d1f9      	bne.n	8003c6a <strcpy+0x2>
 8003c76:	4770      	bx	lr

08003c78 <strdup>:
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <strdup+0xc>)
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	f000 b803 	b.w	8003c88 <_strdup_r>
 8003c82:	bf00      	nop
 8003c84:	2000000c 	.word	0x2000000c

08003c88 <_strdup_r>:
 8003c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	460d      	mov	r5, r1
 8003c90:	f7fc fabe 	bl	8000210 <strlen>
 8003c94:	1c42      	adds	r2, r0, #1
 8003c96:	4611      	mov	r1, r2
 8003c98:	4620      	mov	r0, r4
 8003c9a:	9201      	str	r2, [sp, #4]
 8003c9c:	f000 f932 	bl	8003f04 <_malloc_r>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	b118      	cbz	r0, 8003cac <_strdup_r+0x24>
 8003ca4:	9a01      	ldr	r2, [sp, #4]
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f000 f8b2 	bl	8003e10 <memcpy>
 8003cac:	4620      	mov	r0, r4
 8003cae:	b003      	add	sp, #12
 8003cb0:	bd30      	pop	{r4, r5, pc}

08003cb2 <strsep>:
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6800      	ldr	r0, [r0, #0]
 8003cb8:	f000 b84a 	b.w	8003d50 <__strtok_r>

08003cbc <strstr>:
 8003cbc:	780a      	ldrb	r2, [r1, #0]
 8003cbe:	b570      	push	{r4, r5, r6, lr}
 8003cc0:	b96a      	cbnz	r2, 8003cde <strstr+0x22>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d109      	bne.n	8003cdc <strstr+0x20>
 8003cc8:	460c      	mov	r4, r1
 8003cca:	4605      	mov	r5, r0
 8003ccc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f6      	beq.n	8003cc2 <strstr+0x6>
 8003cd4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003cd8:	429e      	cmp	r6, r3
 8003cda:	d0f7      	beq.n	8003ccc <strstr+0x10>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	7803      	ldrb	r3, [r0, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ef      	bne.n	8003cc4 <strstr+0x8>
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	e7ec      	b.n	8003cc2 <strstr+0x6>

08003ce8 <strtok>:
 8003ce8:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <strtok+0x5c>)
 8003cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cec:	681e      	ldr	r6, [r3, #0]
 8003cee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	b9fc      	cbnz	r4, 8003d34 <strtok+0x4c>
 8003cf4:	2050      	movs	r0, #80	; 0x50
 8003cf6:	9101      	str	r1, [sp, #4]
 8003cf8:	f000 f882 	bl	8003e00 <malloc>
 8003cfc:	9901      	ldr	r1, [sp, #4]
 8003cfe:	65b0      	str	r0, [r6, #88]	; 0x58
 8003d00:	4602      	mov	r2, r0
 8003d02:	b920      	cbnz	r0, 8003d0e <strtok+0x26>
 8003d04:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <strtok+0x60>)
 8003d06:	4811      	ldr	r0, [pc, #68]	; (8003d4c <strtok+0x64>)
 8003d08:	2157      	movs	r1, #87	; 0x57
 8003d0a:	f000 f849 	bl	8003da0 <__assert_func>
 8003d0e:	e9c0 4400 	strd	r4, r4, [r0]
 8003d12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003d16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003d1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003d1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003d22:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003d26:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003d2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003d2e:	6184      	str	r4, [r0, #24]
 8003d30:	7704      	strb	r4, [r0, #28]
 8003d32:	6244      	str	r4, [r0, #36]	; 0x24
 8003d34:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003d36:	2301      	movs	r3, #1
 8003d38:	4628      	mov	r0, r5
 8003d3a:	b002      	add	sp, #8
 8003d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d40:	f000 b806 	b.w	8003d50 <__strtok_r>
 8003d44:	2000000c 	.word	0x2000000c
 8003d48:	0800517c 	.word	0x0800517c
 8003d4c:	08005193 	.word	0x08005193

08003d50 <__strtok_r>:
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	b908      	cbnz	r0, 8003d58 <__strtok_r+0x8>
 8003d54:	6810      	ldr	r0, [r2, #0]
 8003d56:	b188      	cbz	r0, 8003d7c <__strtok_r+0x2c>
 8003d58:	4604      	mov	r4, r0
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003d60:	460f      	mov	r7, r1
 8003d62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003d66:	b91e      	cbnz	r6, 8003d70 <__strtok_r+0x20>
 8003d68:	b965      	cbnz	r5, 8003d84 <__strtok_r+0x34>
 8003d6a:	6015      	str	r5, [r2, #0]
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	e005      	b.n	8003d7c <__strtok_r+0x2c>
 8003d70:	42b5      	cmp	r5, r6
 8003d72:	d1f6      	bne.n	8003d62 <__strtok_r+0x12>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <__strtok_r+0xa>
 8003d78:	6014      	str	r4, [r2, #0]
 8003d7a:	7003      	strb	r3, [r0, #0]
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7e:	461c      	mov	r4, r3
 8003d80:	e00c      	b.n	8003d9c <__strtok_r+0x4c>
 8003d82:	b915      	cbnz	r5, 8003d8a <__strtok_r+0x3a>
 8003d84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d88:	460e      	mov	r6, r1
 8003d8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003d8e:	42ab      	cmp	r3, r5
 8003d90:	d1f7      	bne.n	8003d82 <__strtok_r+0x32>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f3      	beq.n	8003d7e <__strtok_r+0x2e>
 8003d96:	2300      	movs	r3, #0
 8003d98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003d9c:	6014      	str	r4, [r2, #0]
 8003d9e:	e7ed      	b.n	8003d7c <__strtok_r+0x2c>

08003da0 <__assert_func>:
 8003da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003da2:	4614      	mov	r4, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <__assert_func+0x2c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4605      	mov	r5, r0
 8003dac:	68d8      	ldr	r0, [r3, #12]
 8003dae:	b14c      	cbz	r4, 8003dc4 <__assert_func+0x24>
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <__assert_func+0x30>)
 8003db2:	9100      	str	r1, [sp, #0]
 8003db4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003db8:	4906      	ldr	r1, [pc, #24]	; (8003dd4 <__assert_func+0x34>)
 8003dba:	462b      	mov	r3, r5
 8003dbc:	f000 f80e 	bl	8003ddc <fiprintf>
 8003dc0:	f000 fe2e 	bl	8004a20 <abort>
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__assert_func+0x38>)
 8003dc6:	461c      	mov	r4, r3
 8003dc8:	e7f3      	b.n	8003db2 <__assert_func+0x12>
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	080051f0 	.word	0x080051f0
 8003dd4:	080051fd 	.word	0x080051fd
 8003dd8:	0800522b 	.word	0x0800522b

08003ddc <fiprintf>:
 8003ddc:	b40e      	push	{r1, r2, r3}
 8003dde:	b503      	push	{r0, r1, lr}
 8003de0:	4601      	mov	r1, r0
 8003de2:	ab03      	add	r3, sp, #12
 8003de4:	4805      	ldr	r0, [pc, #20]	; (8003dfc <fiprintf+0x20>)
 8003de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	f000 fa83 	bl	80042f8 <_vfiprintf_r>
 8003df2:	b002      	add	sp, #8
 8003df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df8:	b003      	add	sp, #12
 8003dfa:	4770      	bx	lr
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <malloc>:
 8003e00:	4b02      	ldr	r3, [pc, #8]	; (8003e0c <malloc+0xc>)
 8003e02:	4601      	mov	r1, r0
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f000 b87d 	b.w	8003f04 <_malloc_r>
 8003e0a:	bf00      	nop
 8003e0c:	2000000c 	.word	0x2000000c

08003e10 <memcpy>:
 8003e10:	440a      	add	r2, r1
 8003e12:	4291      	cmp	r1, r2
 8003e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e18:	d100      	bne.n	8003e1c <memcpy+0xc>
 8003e1a:	4770      	bx	lr
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e26:	4291      	cmp	r1, r2
 8003e28:	d1f9      	bne.n	8003e1e <memcpy+0xe>
 8003e2a:	bd10      	pop	{r4, pc}

08003e2c <_free_r>:
 8003e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d044      	beq.n	8003ebc <_free_r+0x90>
 8003e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e36:	9001      	str	r0, [sp, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e3e:	bfb8      	it	lt
 8003e40:	18e4      	addlt	r4, r4, r3
 8003e42:	f001 f82f 	bl	8004ea4 <__malloc_lock>
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <_free_r+0x94>)
 8003e48:	9801      	ldr	r0, [sp, #4]
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	b933      	cbnz	r3, 8003e5c <_free_r+0x30>
 8003e4e:	6063      	str	r3, [r4, #4]
 8003e50:	6014      	str	r4, [r2, #0]
 8003e52:	b003      	add	sp, #12
 8003e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e58:	f001 b82a 	b.w	8004eb0 <__malloc_unlock>
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d908      	bls.n	8003e72 <_free_r+0x46>
 8003e60:	6825      	ldr	r5, [r4, #0]
 8003e62:	1961      	adds	r1, r4, r5
 8003e64:	428b      	cmp	r3, r1
 8003e66:	bf01      	itttt	eq
 8003e68:	6819      	ldreq	r1, [r3, #0]
 8003e6a:	685b      	ldreq	r3, [r3, #4]
 8003e6c:	1949      	addeq	r1, r1, r5
 8003e6e:	6021      	streq	r1, [r4, #0]
 8003e70:	e7ed      	b.n	8003e4e <_free_r+0x22>
 8003e72:	461a      	mov	r2, r3
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b10b      	cbz	r3, 8003e7c <_free_r+0x50>
 8003e78:	42a3      	cmp	r3, r4
 8003e7a:	d9fa      	bls.n	8003e72 <_free_r+0x46>
 8003e7c:	6811      	ldr	r1, [r2, #0]
 8003e7e:	1855      	adds	r5, r2, r1
 8003e80:	42a5      	cmp	r5, r4
 8003e82:	d10b      	bne.n	8003e9c <_free_r+0x70>
 8003e84:	6824      	ldr	r4, [r4, #0]
 8003e86:	4421      	add	r1, r4
 8003e88:	1854      	adds	r4, r2, r1
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	d1e0      	bne.n	8003e52 <_free_r+0x26>
 8003e90:	681c      	ldr	r4, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	6053      	str	r3, [r2, #4]
 8003e96:	4421      	add	r1, r4
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	e7da      	b.n	8003e52 <_free_r+0x26>
 8003e9c:	d902      	bls.n	8003ea4 <_free_r+0x78>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	6003      	str	r3, [r0, #0]
 8003ea2:	e7d6      	b.n	8003e52 <_free_r+0x26>
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	1961      	adds	r1, r4, r5
 8003ea8:	428b      	cmp	r3, r1
 8003eaa:	bf04      	itt	eq
 8003eac:	6819      	ldreq	r1, [r3, #0]
 8003eae:	685b      	ldreq	r3, [r3, #4]
 8003eb0:	6063      	str	r3, [r4, #4]
 8003eb2:	bf04      	itt	eq
 8003eb4:	1949      	addeq	r1, r1, r5
 8003eb6:	6021      	streq	r1, [r4, #0]
 8003eb8:	6054      	str	r4, [r2, #4]
 8003eba:	e7ca      	b.n	8003e52 <_free_r+0x26>
 8003ebc:	b003      	add	sp, #12
 8003ebe:	bd30      	pop	{r4, r5, pc}
 8003ec0:	20000334 	.word	0x20000334

08003ec4 <sbrk_aligned>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	4e0e      	ldr	r6, [pc, #56]	; (8003f00 <sbrk_aligned+0x3c>)
 8003ec8:	460c      	mov	r4, r1
 8003eca:	6831      	ldr	r1, [r6, #0]
 8003ecc:	4605      	mov	r5, r0
 8003ece:	b911      	cbnz	r1, 8003ed6 <sbrk_aligned+0x12>
 8003ed0:	f000 fcd6 	bl	8004880 <_sbrk_r>
 8003ed4:	6030      	str	r0, [r6, #0]
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 fcd1 	bl	8004880 <_sbrk_r>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	d00a      	beq.n	8003ef8 <sbrk_aligned+0x34>
 8003ee2:	1cc4      	adds	r4, r0, #3
 8003ee4:	f024 0403 	bic.w	r4, r4, #3
 8003ee8:	42a0      	cmp	r0, r4
 8003eea:	d007      	beq.n	8003efc <sbrk_aligned+0x38>
 8003eec:	1a21      	subs	r1, r4, r0
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fcc6 	bl	8004880 <_sbrk_r>
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d101      	bne.n	8003efc <sbrk_aligned+0x38>
 8003ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8003efc:	4620      	mov	r0, r4
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	20000338 	.word	0x20000338

08003f04 <_malloc_r>:
 8003f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f08:	1ccd      	adds	r5, r1, #3
 8003f0a:	f025 0503 	bic.w	r5, r5, #3
 8003f0e:	3508      	adds	r5, #8
 8003f10:	2d0c      	cmp	r5, #12
 8003f12:	bf38      	it	cc
 8003f14:	250c      	movcc	r5, #12
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	4607      	mov	r7, r0
 8003f1a:	db01      	blt.n	8003f20 <_malloc_r+0x1c>
 8003f1c:	42a9      	cmp	r1, r5
 8003f1e:	d905      	bls.n	8003f2c <_malloc_r+0x28>
 8003f20:	230c      	movs	r3, #12
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	2600      	movs	r6, #0
 8003f26:	4630      	mov	r0, r6
 8003f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f2c:	4e2e      	ldr	r6, [pc, #184]	; (8003fe8 <_malloc_r+0xe4>)
 8003f2e:	f000 ffb9 	bl	8004ea4 <__malloc_lock>
 8003f32:	6833      	ldr	r3, [r6, #0]
 8003f34:	461c      	mov	r4, r3
 8003f36:	bb34      	cbnz	r4, 8003f86 <_malloc_r+0x82>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f7ff ffc2 	bl	8003ec4 <sbrk_aligned>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	4604      	mov	r4, r0
 8003f44:	d14d      	bne.n	8003fe2 <_malloc_r+0xde>
 8003f46:	6834      	ldr	r4, [r6, #0]
 8003f48:	4626      	mov	r6, r4
 8003f4a:	2e00      	cmp	r6, #0
 8003f4c:	d140      	bne.n	8003fd0 <_malloc_r+0xcc>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	4631      	mov	r1, r6
 8003f52:	4638      	mov	r0, r7
 8003f54:	eb04 0803 	add.w	r8, r4, r3
 8003f58:	f000 fc92 	bl	8004880 <_sbrk_r>
 8003f5c:	4580      	cmp	r8, r0
 8003f5e:	d13a      	bne.n	8003fd6 <_malloc_r+0xd2>
 8003f60:	6821      	ldr	r1, [r4, #0]
 8003f62:	3503      	adds	r5, #3
 8003f64:	1a6d      	subs	r5, r5, r1
 8003f66:	f025 0503 	bic.w	r5, r5, #3
 8003f6a:	3508      	adds	r5, #8
 8003f6c:	2d0c      	cmp	r5, #12
 8003f6e:	bf38      	it	cc
 8003f70:	250c      	movcc	r5, #12
 8003f72:	4629      	mov	r1, r5
 8003f74:	4638      	mov	r0, r7
 8003f76:	f7ff ffa5 	bl	8003ec4 <sbrk_aligned>
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d02b      	beq.n	8003fd6 <_malloc_r+0xd2>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	442b      	add	r3, r5
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	e00e      	b.n	8003fa4 <_malloc_r+0xa0>
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	1b52      	subs	r2, r2, r5
 8003f8a:	d41e      	bmi.n	8003fca <_malloc_r+0xc6>
 8003f8c:	2a0b      	cmp	r2, #11
 8003f8e:	d916      	bls.n	8003fbe <_malloc_r+0xba>
 8003f90:	1961      	adds	r1, r4, r5
 8003f92:	42a3      	cmp	r3, r4
 8003f94:	6025      	str	r5, [r4, #0]
 8003f96:	bf18      	it	ne
 8003f98:	6059      	strne	r1, [r3, #4]
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	bf08      	it	eq
 8003f9e:	6031      	streq	r1, [r6, #0]
 8003fa0:	5162      	str	r2, [r4, r5]
 8003fa2:	604b      	str	r3, [r1, #4]
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	f104 060b 	add.w	r6, r4, #11
 8003faa:	f000 ff81 	bl	8004eb0 <__malloc_unlock>
 8003fae:	f026 0607 	bic.w	r6, r6, #7
 8003fb2:	1d23      	adds	r3, r4, #4
 8003fb4:	1af2      	subs	r2, r6, r3
 8003fb6:	d0b6      	beq.n	8003f26 <_malloc_r+0x22>
 8003fb8:	1b9b      	subs	r3, r3, r6
 8003fba:	50a3      	str	r3, [r4, r2]
 8003fbc:	e7b3      	b.n	8003f26 <_malloc_r+0x22>
 8003fbe:	6862      	ldr	r2, [r4, #4]
 8003fc0:	42a3      	cmp	r3, r4
 8003fc2:	bf0c      	ite	eq
 8003fc4:	6032      	streq	r2, [r6, #0]
 8003fc6:	605a      	strne	r2, [r3, #4]
 8003fc8:	e7ec      	b.n	8003fa4 <_malloc_r+0xa0>
 8003fca:	4623      	mov	r3, r4
 8003fcc:	6864      	ldr	r4, [r4, #4]
 8003fce:	e7b2      	b.n	8003f36 <_malloc_r+0x32>
 8003fd0:	4634      	mov	r4, r6
 8003fd2:	6876      	ldr	r6, [r6, #4]
 8003fd4:	e7b9      	b.n	8003f4a <_malloc_r+0x46>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f000 ff68 	bl	8004eb0 <__malloc_unlock>
 8003fe0:	e7a1      	b.n	8003f26 <_malloc_r+0x22>
 8003fe2:	6025      	str	r5, [r4, #0]
 8003fe4:	e7de      	b.n	8003fa4 <_malloc_r+0xa0>
 8003fe6:	bf00      	nop
 8003fe8:	20000334 	.word	0x20000334

08003fec <__ssputs_r>:
 8003fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff0:	688e      	ldr	r6, [r1, #8]
 8003ff2:	429e      	cmp	r6, r3
 8003ff4:	4682      	mov	sl, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	4690      	mov	r8, r2
 8003ffa:	461f      	mov	r7, r3
 8003ffc:	d838      	bhi.n	8004070 <__ssputs_r+0x84>
 8003ffe:	898a      	ldrh	r2, [r1, #12]
 8004000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004004:	d032      	beq.n	800406c <__ssputs_r+0x80>
 8004006:	6825      	ldr	r5, [r4, #0]
 8004008:	6909      	ldr	r1, [r1, #16]
 800400a:	eba5 0901 	sub.w	r9, r5, r1
 800400e:	6965      	ldr	r5, [r4, #20]
 8004010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004018:	3301      	adds	r3, #1
 800401a:	444b      	add	r3, r9
 800401c:	106d      	asrs	r5, r5, #1
 800401e:	429d      	cmp	r5, r3
 8004020:	bf38      	it	cc
 8004022:	461d      	movcc	r5, r3
 8004024:	0553      	lsls	r3, r2, #21
 8004026:	d531      	bpl.n	800408c <__ssputs_r+0xa0>
 8004028:	4629      	mov	r1, r5
 800402a:	f7ff ff6b 	bl	8003f04 <_malloc_r>
 800402e:	4606      	mov	r6, r0
 8004030:	b950      	cbnz	r0, 8004048 <__ssputs_r+0x5c>
 8004032:	230c      	movs	r3, #12
 8004034:	f8ca 3000 	str.w	r3, [sl]
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403e:	81a3      	strh	r3, [r4, #12]
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	6921      	ldr	r1, [r4, #16]
 800404a:	464a      	mov	r2, r9
 800404c:	f7ff fee0 	bl	8003e10 <memcpy>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405a:	81a3      	strh	r3, [r4, #12]
 800405c:	6126      	str	r6, [r4, #16]
 800405e:	6165      	str	r5, [r4, #20]
 8004060:	444e      	add	r6, r9
 8004062:	eba5 0509 	sub.w	r5, r5, r9
 8004066:	6026      	str	r6, [r4, #0]
 8004068:	60a5      	str	r5, [r4, #8]
 800406a:	463e      	mov	r6, r7
 800406c:	42be      	cmp	r6, r7
 800406e:	d900      	bls.n	8004072 <__ssputs_r+0x86>
 8004070:	463e      	mov	r6, r7
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	4632      	mov	r2, r6
 8004076:	4641      	mov	r1, r8
 8004078:	f000 fefa 	bl	8004e70 <memmove>
 800407c:	68a3      	ldr	r3, [r4, #8]
 800407e:	1b9b      	subs	r3, r3, r6
 8004080:	60a3      	str	r3, [r4, #8]
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	4433      	add	r3, r6
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	2000      	movs	r0, #0
 800408a:	e7db      	b.n	8004044 <__ssputs_r+0x58>
 800408c:	462a      	mov	r2, r5
 800408e:	f000 ff15 	bl	8004ebc <_realloc_r>
 8004092:	4606      	mov	r6, r0
 8004094:	2800      	cmp	r0, #0
 8004096:	d1e1      	bne.n	800405c <__ssputs_r+0x70>
 8004098:	6921      	ldr	r1, [r4, #16]
 800409a:	4650      	mov	r0, sl
 800409c:	f7ff fec6 	bl	8003e2c <_free_r>
 80040a0:	e7c7      	b.n	8004032 <__ssputs_r+0x46>
	...

080040a4 <_svfiprintf_r>:
 80040a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a8:	4698      	mov	r8, r3
 80040aa:	898b      	ldrh	r3, [r1, #12]
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	b09d      	sub	sp, #116	; 0x74
 80040b0:	4607      	mov	r7, r0
 80040b2:	460d      	mov	r5, r1
 80040b4:	4614      	mov	r4, r2
 80040b6:	d50e      	bpl.n	80040d6 <_svfiprintf_r+0x32>
 80040b8:	690b      	ldr	r3, [r1, #16]
 80040ba:	b963      	cbnz	r3, 80040d6 <_svfiprintf_r+0x32>
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	f7ff ff21 	bl	8003f04 <_malloc_r>
 80040c2:	6028      	str	r0, [r5, #0]
 80040c4:	6128      	str	r0, [r5, #16]
 80040c6:	b920      	cbnz	r0, 80040d2 <_svfiprintf_r+0x2e>
 80040c8:	230c      	movs	r3, #12
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	e0d1      	b.n	8004276 <_svfiprintf_r+0x1d2>
 80040d2:	2340      	movs	r3, #64	; 0x40
 80040d4:	616b      	str	r3, [r5, #20]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9309      	str	r3, [sp, #36]	; 0x24
 80040da:	2320      	movs	r3, #32
 80040dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e4:	2330      	movs	r3, #48	; 0x30
 80040e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004290 <_svfiprintf_r+0x1ec>
 80040ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040ee:	f04f 0901 	mov.w	r9, #1
 80040f2:	4623      	mov	r3, r4
 80040f4:	469a      	mov	sl, r3
 80040f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040fa:	b10a      	cbz	r2, 8004100 <_svfiprintf_r+0x5c>
 80040fc:	2a25      	cmp	r2, #37	; 0x25
 80040fe:	d1f9      	bne.n	80040f4 <_svfiprintf_r+0x50>
 8004100:	ebba 0b04 	subs.w	fp, sl, r4
 8004104:	d00b      	beq.n	800411e <_svfiprintf_r+0x7a>
 8004106:	465b      	mov	r3, fp
 8004108:	4622      	mov	r2, r4
 800410a:	4629      	mov	r1, r5
 800410c:	4638      	mov	r0, r7
 800410e:	f7ff ff6d 	bl	8003fec <__ssputs_r>
 8004112:	3001      	adds	r0, #1
 8004114:	f000 80aa 	beq.w	800426c <_svfiprintf_r+0x1c8>
 8004118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800411a:	445a      	add	r2, fp
 800411c:	9209      	str	r2, [sp, #36]	; 0x24
 800411e:	f89a 3000 	ldrb.w	r3, [sl]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80a2 	beq.w	800426c <_svfiprintf_r+0x1c8>
 8004128:	2300      	movs	r3, #0
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004132:	f10a 0a01 	add.w	sl, sl, #1
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	9307      	str	r3, [sp, #28]
 800413a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800413e:	931a      	str	r3, [sp, #104]	; 0x68
 8004140:	4654      	mov	r4, sl
 8004142:	2205      	movs	r2, #5
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	4851      	ldr	r0, [pc, #324]	; (8004290 <_svfiprintf_r+0x1ec>)
 800414a:	f7fc f869 	bl	8000220 <memchr>
 800414e:	9a04      	ldr	r2, [sp, #16]
 8004150:	b9d8      	cbnz	r0, 800418a <_svfiprintf_r+0xe6>
 8004152:	06d0      	lsls	r0, r2, #27
 8004154:	bf44      	itt	mi
 8004156:	2320      	movmi	r3, #32
 8004158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800415c:	0711      	lsls	r1, r2, #28
 800415e:	bf44      	itt	mi
 8004160:	232b      	movmi	r3, #43	; 0x2b
 8004162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004166:	f89a 3000 	ldrb.w	r3, [sl]
 800416a:	2b2a      	cmp	r3, #42	; 0x2a
 800416c:	d015      	beq.n	800419a <_svfiprintf_r+0xf6>
 800416e:	9a07      	ldr	r2, [sp, #28]
 8004170:	4654      	mov	r4, sl
 8004172:	2000      	movs	r0, #0
 8004174:	f04f 0c0a 	mov.w	ip, #10
 8004178:	4621      	mov	r1, r4
 800417a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800417e:	3b30      	subs	r3, #48	; 0x30
 8004180:	2b09      	cmp	r3, #9
 8004182:	d94e      	bls.n	8004222 <_svfiprintf_r+0x17e>
 8004184:	b1b0      	cbz	r0, 80041b4 <_svfiprintf_r+0x110>
 8004186:	9207      	str	r2, [sp, #28]
 8004188:	e014      	b.n	80041b4 <_svfiprintf_r+0x110>
 800418a:	eba0 0308 	sub.w	r3, r0, r8
 800418e:	fa09 f303 	lsl.w	r3, r9, r3
 8004192:	4313      	orrs	r3, r2
 8004194:	9304      	str	r3, [sp, #16]
 8004196:	46a2      	mov	sl, r4
 8004198:	e7d2      	b.n	8004140 <_svfiprintf_r+0x9c>
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	1d19      	adds	r1, r3, #4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	9103      	str	r1, [sp, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bfbb      	ittet	lt
 80041a6:	425b      	neglt	r3, r3
 80041a8:	f042 0202 	orrlt.w	r2, r2, #2
 80041ac:	9307      	strge	r3, [sp, #28]
 80041ae:	9307      	strlt	r3, [sp, #28]
 80041b0:	bfb8      	it	lt
 80041b2:	9204      	strlt	r2, [sp, #16]
 80041b4:	7823      	ldrb	r3, [r4, #0]
 80041b6:	2b2e      	cmp	r3, #46	; 0x2e
 80041b8:	d10c      	bne.n	80041d4 <_svfiprintf_r+0x130>
 80041ba:	7863      	ldrb	r3, [r4, #1]
 80041bc:	2b2a      	cmp	r3, #42	; 0x2a
 80041be:	d135      	bne.n	800422c <_svfiprintf_r+0x188>
 80041c0:	9b03      	ldr	r3, [sp, #12]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	9203      	str	r2, [sp, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bfb8      	it	lt
 80041cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80041d0:	3402      	adds	r4, #2
 80041d2:	9305      	str	r3, [sp, #20]
 80041d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042a0 <_svfiprintf_r+0x1fc>
 80041d8:	7821      	ldrb	r1, [r4, #0]
 80041da:	2203      	movs	r2, #3
 80041dc:	4650      	mov	r0, sl
 80041de:	f7fc f81f 	bl	8000220 <memchr>
 80041e2:	b140      	cbz	r0, 80041f6 <_svfiprintf_r+0x152>
 80041e4:	2340      	movs	r3, #64	; 0x40
 80041e6:	eba0 000a 	sub.w	r0, r0, sl
 80041ea:	fa03 f000 	lsl.w	r0, r3, r0
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	4303      	orrs	r3, r0
 80041f2:	3401      	adds	r4, #1
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fa:	4826      	ldr	r0, [pc, #152]	; (8004294 <_svfiprintf_r+0x1f0>)
 80041fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004200:	2206      	movs	r2, #6
 8004202:	f7fc f80d 	bl	8000220 <memchr>
 8004206:	2800      	cmp	r0, #0
 8004208:	d038      	beq.n	800427c <_svfiprintf_r+0x1d8>
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <_svfiprintf_r+0x1f4>)
 800420c:	bb1b      	cbnz	r3, 8004256 <_svfiprintf_r+0x1b2>
 800420e:	9b03      	ldr	r3, [sp, #12]
 8004210:	3307      	adds	r3, #7
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	3308      	adds	r3, #8
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421c:	4433      	add	r3, r6
 800421e:	9309      	str	r3, [sp, #36]	; 0x24
 8004220:	e767      	b.n	80040f2 <_svfiprintf_r+0x4e>
 8004222:	fb0c 3202 	mla	r2, ip, r2, r3
 8004226:	460c      	mov	r4, r1
 8004228:	2001      	movs	r0, #1
 800422a:	e7a5      	b.n	8004178 <_svfiprintf_r+0xd4>
 800422c:	2300      	movs	r3, #0
 800422e:	3401      	adds	r4, #1
 8004230:	9305      	str	r3, [sp, #20]
 8004232:	4619      	mov	r1, r3
 8004234:	f04f 0c0a 	mov.w	ip, #10
 8004238:	4620      	mov	r0, r4
 800423a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800423e:	3a30      	subs	r2, #48	; 0x30
 8004240:	2a09      	cmp	r2, #9
 8004242:	d903      	bls.n	800424c <_svfiprintf_r+0x1a8>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0c5      	beq.n	80041d4 <_svfiprintf_r+0x130>
 8004248:	9105      	str	r1, [sp, #20]
 800424a:	e7c3      	b.n	80041d4 <_svfiprintf_r+0x130>
 800424c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004250:	4604      	mov	r4, r0
 8004252:	2301      	movs	r3, #1
 8004254:	e7f0      	b.n	8004238 <_svfiprintf_r+0x194>
 8004256:	ab03      	add	r3, sp, #12
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	462a      	mov	r2, r5
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <_svfiprintf_r+0x1f8>)
 800425e:	a904      	add	r1, sp, #16
 8004260:	4638      	mov	r0, r7
 8004262:	f3af 8000 	nop.w
 8004266:	1c42      	adds	r2, r0, #1
 8004268:	4606      	mov	r6, r0
 800426a:	d1d6      	bne.n	800421a <_svfiprintf_r+0x176>
 800426c:	89ab      	ldrh	r3, [r5, #12]
 800426e:	065b      	lsls	r3, r3, #25
 8004270:	f53f af2c 	bmi.w	80040cc <_svfiprintf_r+0x28>
 8004274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004276:	b01d      	add	sp, #116	; 0x74
 8004278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427c:	ab03      	add	r3, sp, #12
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	462a      	mov	r2, r5
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <_svfiprintf_r+0x1f8>)
 8004284:	a904      	add	r1, sp, #16
 8004286:	4638      	mov	r0, r7
 8004288:	f000 f9d4 	bl	8004634 <_printf_i>
 800428c:	e7eb      	b.n	8004266 <_svfiprintf_r+0x1c2>
 800428e:	bf00      	nop
 8004290:	0800522c 	.word	0x0800522c
 8004294:	08005236 	.word	0x08005236
 8004298:	00000000 	.word	0x00000000
 800429c:	08003fed 	.word	0x08003fed
 80042a0:	08005232 	.word	0x08005232

080042a4 <__sfputc_r>:
 80042a4:	6893      	ldr	r3, [r2, #8]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	b410      	push	{r4}
 80042ac:	6093      	str	r3, [r2, #8]
 80042ae:	da08      	bge.n	80042c2 <__sfputc_r+0x1e>
 80042b0:	6994      	ldr	r4, [r2, #24]
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	db01      	blt.n	80042ba <__sfputc_r+0x16>
 80042b6:	290a      	cmp	r1, #10
 80042b8:	d103      	bne.n	80042c2 <__sfputc_r+0x1e>
 80042ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042be:	f000 baef 	b.w	80048a0 <__swbuf_r>
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	1c58      	adds	r0, r3, #1
 80042c6:	6010      	str	r0, [r2, #0]
 80042c8:	7019      	strb	r1, [r3, #0]
 80042ca:	4608      	mov	r0, r1
 80042cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <__sfputs_r>:
 80042d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d4:	4606      	mov	r6, r0
 80042d6:	460f      	mov	r7, r1
 80042d8:	4614      	mov	r4, r2
 80042da:	18d5      	adds	r5, r2, r3
 80042dc:	42ac      	cmp	r4, r5
 80042de:	d101      	bne.n	80042e4 <__sfputs_r+0x12>
 80042e0:	2000      	movs	r0, #0
 80042e2:	e007      	b.n	80042f4 <__sfputs_r+0x22>
 80042e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e8:	463a      	mov	r2, r7
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7ff ffda 	bl	80042a4 <__sfputc_r>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d1f3      	bne.n	80042dc <__sfputs_r+0xa>
 80042f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042f8 <_vfiprintf_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	460d      	mov	r5, r1
 80042fe:	b09d      	sub	sp, #116	; 0x74
 8004300:	4614      	mov	r4, r2
 8004302:	4698      	mov	r8, r3
 8004304:	4606      	mov	r6, r0
 8004306:	b118      	cbz	r0, 8004310 <_vfiprintf_r+0x18>
 8004308:	6983      	ldr	r3, [r0, #24]
 800430a:	b90b      	cbnz	r3, 8004310 <_vfiprintf_r+0x18>
 800430c:	f000 fcaa 	bl	8004c64 <__sinit>
 8004310:	4b89      	ldr	r3, [pc, #548]	; (8004538 <_vfiprintf_r+0x240>)
 8004312:	429d      	cmp	r5, r3
 8004314:	d11b      	bne.n	800434e <_vfiprintf_r+0x56>
 8004316:	6875      	ldr	r5, [r6, #4]
 8004318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800431a:	07d9      	lsls	r1, r3, #31
 800431c:	d405      	bmi.n	800432a <_vfiprintf_r+0x32>
 800431e:	89ab      	ldrh	r3, [r5, #12]
 8004320:	059a      	lsls	r2, r3, #22
 8004322:	d402      	bmi.n	800432a <_vfiprintf_r+0x32>
 8004324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004326:	f000 fd3b 	bl	8004da0 <__retarget_lock_acquire_recursive>
 800432a:	89ab      	ldrh	r3, [r5, #12]
 800432c:	071b      	lsls	r3, r3, #28
 800432e:	d501      	bpl.n	8004334 <_vfiprintf_r+0x3c>
 8004330:	692b      	ldr	r3, [r5, #16]
 8004332:	b9eb      	cbnz	r3, 8004370 <_vfiprintf_r+0x78>
 8004334:	4629      	mov	r1, r5
 8004336:	4630      	mov	r0, r6
 8004338:	f000 fb04 	bl	8004944 <__swsetup_r>
 800433c:	b1c0      	cbz	r0, 8004370 <_vfiprintf_r+0x78>
 800433e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004340:	07dc      	lsls	r4, r3, #31
 8004342:	d50e      	bpl.n	8004362 <_vfiprintf_r+0x6a>
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	b01d      	add	sp, #116	; 0x74
 800434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434e:	4b7b      	ldr	r3, [pc, #492]	; (800453c <_vfiprintf_r+0x244>)
 8004350:	429d      	cmp	r5, r3
 8004352:	d101      	bne.n	8004358 <_vfiprintf_r+0x60>
 8004354:	68b5      	ldr	r5, [r6, #8]
 8004356:	e7df      	b.n	8004318 <_vfiprintf_r+0x20>
 8004358:	4b79      	ldr	r3, [pc, #484]	; (8004540 <_vfiprintf_r+0x248>)
 800435a:	429d      	cmp	r5, r3
 800435c:	bf08      	it	eq
 800435e:	68f5      	ldreq	r5, [r6, #12]
 8004360:	e7da      	b.n	8004318 <_vfiprintf_r+0x20>
 8004362:	89ab      	ldrh	r3, [r5, #12]
 8004364:	0598      	lsls	r0, r3, #22
 8004366:	d4ed      	bmi.n	8004344 <_vfiprintf_r+0x4c>
 8004368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800436a:	f000 fd1a 	bl	8004da2 <__retarget_lock_release_recursive>
 800436e:	e7e9      	b.n	8004344 <_vfiprintf_r+0x4c>
 8004370:	2300      	movs	r3, #0
 8004372:	9309      	str	r3, [sp, #36]	; 0x24
 8004374:	2320      	movs	r3, #32
 8004376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800437a:	f8cd 800c 	str.w	r8, [sp, #12]
 800437e:	2330      	movs	r3, #48	; 0x30
 8004380:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004544 <_vfiprintf_r+0x24c>
 8004384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004388:	f04f 0901 	mov.w	r9, #1
 800438c:	4623      	mov	r3, r4
 800438e:	469a      	mov	sl, r3
 8004390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004394:	b10a      	cbz	r2, 800439a <_vfiprintf_r+0xa2>
 8004396:	2a25      	cmp	r2, #37	; 0x25
 8004398:	d1f9      	bne.n	800438e <_vfiprintf_r+0x96>
 800439a:	ebba 0b04 	subs.w	fp, sl, r4
 800439e:	d00b      	beq.n	80043b8 <_vfiprintf_r+0xc0>
 80043a0:	465b      	mov	r3, fp
 80043a2:	4622      	mov	r2, r4
 80043a4:	4629      	mov	r1, r5
 80043a6:	4630      	mov	r0, r6
 80043a8:	f7ff ff93 	bl	80042d2 <__sfputs_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	f000 80aa 	beq.w	8004506 <_vfiprintf_r+0x20e>
 80043b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043b4:	445a      	add	r2, fp
 80043b6:	9209      	str	r2, [sp, #36]	; 0x24
 80043b8:	f89a 3000 	ldrb.w	r3, [sl]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a2 	beq.w	8004506 <_vfiprintf_r+0x20e>
 80043c2:	2300      	movs	r3, #0
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043cc:	f10a 0a01 	add.w	sl, sl, #1
 80043d0:	9304      	str	r3, [sp, #16]
 80043d2:	9307      	str	r3, [sp, #28]
 80043d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043d8:	931a      	str	r3, [sp, #104]	; 0x68
 80043da:	4654      	mov	r4, sl
 80043dc:	2205      	movs	r2, #5
 80043de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e2:	4858      	ldr	r0, [pc, #352]	; (8004544 <_vfiprintf_r+0x24c>)
 80043e4:	f7fb ff1c 	bl	8000220 <memchr>
 80043e8:	9a04      	ldr	r2, [sp, #16]
 80043ea:	b9d8      	cbnz	r0, 8004424 <_vfiprintf_r+0x12c>
 80043ec:	06d1      	lsls	r1, r2, #27
 80043ee:	bf44      	itt	mi
 80043f0:	2320      	movmi	r3, #32
 80043f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f6:	0713      	lsls	r3, r2, #28
 80043f8:	bf44      	itt	mi
 80043fa:	232b      	movmi	r3, #43	; 0x2b
 80043fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004400:	f89a 3000 	ldrb.w	r3, [sl]
 8004404:	2b2a      	cmp	r3, #42	; 0x2a
 8004406:	d015      	beq.n	8004434 <_vfiprintf_r+0x13c>
 8004408:	9a07      	ldr	r2, [sp, #28]
 800440a:	4654      	mov	r4, sl
 800440c:	2000      	movs	r0, #0
 800440e:	f04f 0c0a 	mov.w	ip, #10
 8004412:	4621      	mov	r1, r4
 8004414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004418:	3b30      	subs	r3, #48	; 0x30
 800441a:	2b09      	cmp	r3, #9
 800441c:	d94e      	bls.n	80044bc <_vfiprintf_r+0x1c4>
 800441e:	b1b0      	cbz	r0, 800444e <_vfiprintf_r+0x156>
 8004420:	9207      	str	r2, [sp, #28]
 8004422:	e014      	b.n	800444e <_vfiprintf_r+0x156>
 8004424:	eba0 0308 	sub.w	r3, r0, r8
 8004428:	fa09 f303 	lsl.w	r3, r9, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	46a2      	mov	sl, r4
 8004432:	e7d2      	b.n	80043da <_vfiprintf_r+0xe2>
 8004434:	9b03      	ldr	r3, [sp, #12]
 8004436:	1d19      	adds	r1, r3, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	9103      	str	r1, [sp, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfbb      	ittet	lt
 8004440:	425b      	neglt	r3, r3
 8004442:	f042 0202 	orrlt.w	r2, r2, #2
 8004446:	9307      	strge	r3, [sp, #28]
 8004448:	9307      	strlt	r3, [sp, #28]
 800444a:	bfb8      	it	lt
 800444c:	9204      	strlt	r2, [sp, #16]
 800444e:	7823      	ldrb	r3, [r4, #0]
 8004450:	2b2e      	cmp	r3, #46	; 0x2e
 8004452:	d10c      	bne.n	800446e <_vfiprintf_r+0x176>
 8004454:	7863      	ldrb	r3, [r4, #1]
 8004456:	2b2a      	cmp	r3, #42	; 0x2a
 8004458:	d135      	bne.n	80044c6 <_vfiprintf_r+0x1ce>
 800445a:	9b03      	ldr	r3, [sp, #12]
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	9203      	str	r2, [sp, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfb8      	it	lt
 8004466:	f04f 33ff 	movlt.w	r3, #4294967295
 800446a:	3402      	adds	r4, #2
 800446c:	9305      	str	r3, [sp, #20]
 800446e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004554 <_vfiprintf_r+0x25c>
 8004472:	7821      	ldrb	r1, [r4, #0]
 8004474:	2203      	movs	r2, #3
 8004476:	4650      	mov	r0, sl
 8004478:	f7fb fed2 	bl	8000220 <memchr>
 800447c:	b140      	cbz	r0, 8004490 <_vfiprintf_r+0x198>
 800447e:	2340      	movs	r3, #64	; 0x40
 8004480:	eba0 000a 	sub.w	r0, r0, sl
 8004484:	fa03 f000 	lsl.w	r0, r3, r0
 8004488:	9b04      	ldr	r3, [sp, #16]
 800448a:	4303      	orrs	r3, r0
 800448c:	3401      	adds	r4, #1
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004494:	482c      	ldr	r0, [pc, #176]	; (8004548 <_vfiprintf_r+0x250>)
 8004496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800449a:	2206      	movs	r2, #6
 800449c:	f7fb fec0 	bl	8000220 <memchr>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d03f      	beq.n	8004524 <_vfiprintf_r+0x22c>
 80044a4:	4b29      	ldr	r3, [pc, #164]	; (800454c <_vfiprintf_r+0x254>)
 80044a6:	bb1b      	cbnz	r3, 80044f0 <_vfiprintf_r+0x1f8>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	3307      	adds	r3, #7
 80044ac:	f023 0307 	bic.w	r3, r3, #7
 80044b0:	3308      	adds	r3, #8
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b6:	443b      	add	r3, r7
 80044b8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ba:	e767      	b.n	800438c <_vfiprintf_r+0x94>
 80044bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c0:	460c      	mov	r4, r1
 80044c2:	2001      	movs	r0, #1
 80044c4:	e7a5      	b.n	8004412 <_vfiprintf_r+0x11a>
 80044c6:	2300      	movs	r3, #0
 80044c8:	3401      	adds	r4, #1
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0c0a 	mov.w	ip, #10
 80044d2:	4620      	mov	r0, r4
 80044d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d8:	3a30      	subs	r2, #48	; 0x30
 80044da:	2a09      	cmp	r2, #9
 80044dc:	d903      	bls.n	80044e6 <_vfiprintf_r+0x1ee>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0c5      	beq.n	800446e <_vfiprintf_r+0x176>
 80044e2:	9105      	str	r1, [sp, #20]
 80044e4:	e7c3      	b.n	800446e <_vfiprintf_r+0x176>
 80044e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ea:	4604      	mov	r4, r0
 80044ec:	2301      	movs	r3, #1
 80044ee:	e7f0      	b.n	80044d2 <_vfiprintf_r+0x1da>
 80044f0:	ab03      	add	r3, sp, #12
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	462a      	mov	r2, r5
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <_vfiprintf_r+0x258>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	4630      	mov	r0, r6
 80044fc:	f3af 8000 	nop.w
 8004500:	4607      	mov	r7, r0
 8004502:	1c78      	adds	r0, r7, #1
 8004504:	d1d6      	bne.n	80044b4 <_vfiprintf_r+0x1bc>
 8004506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004508:	07d9      	lsls	r1, r3, #31
 800450a:	d405      	bmi.n	8004518 <_vfiprintf_r+0x220>
 800450c:	89ab      	ldrh	r3, [r5, #12]
 800450e:	059a      	lsls	r2, r3, #22
 8004510:	d402      	bmi.n	8004518 <_vfiprintf_r+0x220>
 8004512:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004514:	f000 fc45 	bl	8004da2 <__retarget_lock_release_recursive>
 8004518:	89ab      	ldrh	r3, [r5, #12]
 800451a:	065b      	lsls	r3, r3, #25
 800451c:	f53f af12 	bmi.w	8004344 <_vfiprintf_r+0x4c>
 8004520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004522:	e711      	b.n	8004348 <_vfiprintf_r+0x50>
 8004524:	ab03      	add	r3, sp, #12
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	462a      	mov	r2, r5
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <_vfiprintf_r+0x258>)
 800452c:	a904      	add	r1, sp, #16
 800452e:	4630      	mov	r0, r6
 8004530:	f000 f880 	bl	8004634 <_printf_i>
 8004534:	e7e4      	b.n	8004500 <_vfiprintf_r+0x208>
 8004536:	bf00      	nop
 8004538:	08005280 	.word	0x08005280
 800453c:	080052a0 	.word	0x080052a0
 8004540:	08005260 	.word	0x08005260
 8004544:	0800522c 	.word	0x0800522c
 8004548:	08005236 	.word	0x08005236
 800454c:	00000000 	.word	0x00000000
 8004550:	080042d3 	.word	0x080042d3
 8004554:	08005232 	.word	0x08005232

08004558 <_printf_common>:
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	4616      	mov	r6, r2
 800455e:	4699      	mov	r9, r3
 8004560:	688a      	ldr	r2, [r1, #8]
 8004562:	690b      	ldr	r3, [r1, #16]
 8004564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004568:	4293      	cmp	r3, r2
 800456a:	bfb8      	it	lt
 800456c:	4613      	movlt	r3, r2
 800456e:	6033      	str	r3, [r6, #0]
 8004570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004574:	4607      	mov	r7, r0
 8004576:	460c      	mov	r4, r1
 8004578:	b10a      	cbz	r2, 800457e <_printf_common+0x26>
 800457a:	3301      	adds	r3, #1
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	0699      	lsls	r1, r3, #26
 8004582:	bf42      	ittt	mi
 8004584:	6833      	ldrmi	r3, [r6, #0]
 8004586:	3302      	addmi	r3, #2
 8004588:	6033      	strmi	r3, [r6, #0]
 800458a:	6825      	ldr	r5, [r4, #0]
 800458c:	f015 0506 	ands.w	r5, r5, #6
 8004590:	d106      	bne.n	80045a0 <_printf_common+0x48>
 8004592:	f104 0a19 	add.w	sl, r4, #25
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	6832      	ldr	r2, [r6, #0]
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	42ab      	cmp	r3, r5
 800459e:	dc26      	bgt.n	80045ee <_printf_common+0x96>
 80045a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045a4:	1e13      	subs	r3, r2, #0
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	bf18      	it	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	0692      	lsls	r2, r2, #26
 80045ae:	d42b      	bmi.n	8004608 <_printf_common+0xb0>
 80045b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045b4:	4649      	mov	r1, r9
 80045b6:	4638      	mov	r0, r7
 80045b8:	47c0      	blx	r8
 80045ba:	3001      	adds	r0, #1
 80045bc:	d01e      	beq.n	80045fc <_printf_common+0xa4>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	68e5      	ldr	r5, [r4, #12]
 80045c2:	6832      	ldr	r2, [r6, #0]
 80045c4:	f003 0306 	and.w	r3, r3, #6
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	bf08      	it	eq
 80045cc:	1aad      	subeq	r5, r5, r2
 80045ce:	68a3      	ldr	r3, [r4, #8]
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	bf0c      	ite	eq
 80045d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d8:	2500      	movne	r5, #0
 80045da:	4293      	cmp	r3, r2
 80045dc:	bfc4      	itt	gt
 80045de:	1a9b      	subgt	r3, r3, r2
 80045e0:	18ed      	addgt	r5, r5, r3
 80045e2:	2600      	movs	r6, #0
 80045e4:	341a      	adds	r4, #26
 80045e6:	42b5      	cmp	r5, r6
 80045e8:	d11a      	bne.n	8004620 <_printf_common+0xc8>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e008      	b.n	8004600 <_printf_common+0xa8>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4652      	mov	r2, sl
 80045f2:	4649      	mov	r1, r9
 80045f4:	4638      	mov	r0, r7
 80045f6:	47c0      	blx	r8
 80045f8:	3001      	adds	r0, #1
 80045fa:	d103      	bne.n	8004604 <_printf_common+0xac>
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004604:	3501      	adds	r5, #1
 8004606:	e7c6      	b.n	8004596 <_printf_common+0x3e>
 8004608:	18e1      	adds	r1, r4, r3
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	2030      	movs	r0, #48	; 0x30
 800460e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004612:	4422      	add	r2, r4
 8004614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800461c:	3302      	adds	r3, #2
 800461e:	e7c7      	b.n	80045b0 <_printf_common+0x58>
 8004620:	2301      	movs	r3, #1
 8004622:	4622      	mov	r2, r4
 8004624:	4649      	mov	r1, r9
 8004626:	4638      	mov	r0, r7
 8004628:	47c0      	blx	r8
 800462a:	3001      	adds	r0, #1
 800462c:	d0e6      	beq.n	80045fc <_printf_common+0xa4>
 800462e:	3601      	adds	r6, #1
 8004630:	e7d9      	b.n	80045e6 <_printf_common+0x8e>
	...

08004634 <_printf_i>:
 8004634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	7e0f      	ldrb	r7, [r1, #24]
 800463a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800463c:	2f78      	cmp	r7, #120	; 0x78
 800463e:	4691      	mov	r9, r2
 8004640:	4680      	mov	r8, r0
 8004642:	460c      	mov	r4, r1
 8004644:	469a      	mov	sl, r3
 8004646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800464a:	d807      	bhi.n	800465c <_printf_i+0x28>
 800464c:	2f62      	cmp	r7, #98	; 0x62
 800464e:	d80a      	bhi.n	8004666 <_printf_i+0x32>
 8004650:	2f00      	cmp	r7, #0
 8004652:	f000 80d8 	beq.w	8004806 <_printf_i+0x1d2>
 8004656:	2f58      	cmp	r7, #88	; 0x58
 8004658:	f000 80a3 	beq.w	80047a2 <_printf_i+0x16e>
 800465c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004664:	e03a      	b.n	80046dc <_printf_i+0xa8>
 8004666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800466a:	2b15      	cmp	r3, #21
 800466c:	d8f6      	bhi.n	800465c <_printf_i+0x28>
 800466e:	a101      	add	r1, pc, #4	; (adr r1, 8004674 <_printf_i+0x40>)
 8004670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004674:	080046cd 	.word	0x080046cd
 8004678:	080046e1 	.word	0x080046e1
 800467c:	0800465d 	.word	0x0800465d
 8004680:	0800465d 	.word	0x0800465d
 8004684:	0800465d 	.word	0x0800465d
 8004688:	0800465d 	.word	0x0800465d
 800468c:	080046e1 	.word	0x080046e1
 8004690:	0800465d 	.word	0x0800465d
 8004694:	0800465d 	.word	0x0800465d
 8004698:	0800465d 	.word	0x0800465d
 800469c:	0800465d 	.word	0x0800465d
 80046a0:	080047ed 	.word	0x080047ed
 80046a4:	08004711 	.word	0x08004711
 80046a8:	080047cf 	.word	0x080047cf
 80046ac:	0800465d 	.word	0x0800465d
 80046b0:	0800465d 	.word	0x0800465d
 80046b4:	0800480f 	.word	0x0800480f
 80046b8:	0800465d 	.word	0x0800465d
 80046bc:	08004711 	.word	0x08004711
 80046c0:	0800465d 	.word	0x0800465d
 80046c4:	0800465d 	.word	0x0800465d
 80046c8:	080047d7 	.word	0x080047d7
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	602a      	str	r2, [r5, #0]
 80046d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046dc:	2301      	movs	r3, #1
 80046de:	e0a3      	b.n	8004828 <_printf_i+0x1f4>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	6829      	ldr	r1, [r5, #0]
 80046e4:	0606      	lsls	r6, r0, #24
 80046e6:	f101 0304 	add.w	r3, r1, #4
 80046ea:	d50a      	bpl.n	8004702 <_printf_i+0xce>
 80046ec:	680e      	ldr	r6, [r1, #0]
 80046ee:	602b      	str	r3, [r5, #0]
 80046f0:	2e00      	cmp	r6, #0
 80046f2:	da03      	bge.n	80046fc <_printf_i+0xc8>
 80046f4:	232d      	movs	r3, #45	; 0x2d
 80046f6:	4276      	negs	r6, r6
 80046f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fc:	485e      	ldr	r0, [pc, #376]	; (8004878 <_printf_i+0x244>)
 80046fe:	230a      	movs	r3, #10
 8004700:	e019      	b.n	8004736 <_printf_i+0x102>
 8004702:	680e      	ldr	r6, [r1, #0]
 8004704:	602b      	str	r3, [r5, #0]
 8004706:	f010 0f40 	tst.w	r0, #64	; 0x40
 800470a:	bf18      	it	ne
 800470c:	b236      	sxthne	r6, r6
 800470e:	e7ef      	b.n	80046f0 <_printf_i+0xbc>
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	1d19      	adds	r1, r3, #4
 8004716:	6029      	str	r1, [r5, #0]
 8004718:	0601      	lsls	r1, r0, #24
 800471a:	d501      	bpl.n	8004720 <_printf_i+0xec>
 800471c:	681e      	ldr	r6, [r3, #0]
 800471e:	e002      	b.n	8004726 <_printf_i+0xf2>
 8004720:	0646      	lsls	r6, r0, #25
 8004722:	d5fb      	bpl.n	800471c <_printf_i+0xe8>
 8004724:	881e      	ldrh	r6, [r3, #0]
 8004726:	4854      	ldr	r0, [pc, #336]	; (8004878 <_printf_i+0x244>)
 8004728:	2f6f      	cmp	r7, #111	; 0x6f
 800472a:	bf0c      	ite	eq
 800472c:	2308      	moveq	r3, #8
 800472e:	230a      	movne	r3, #10
 8004730:	2100      	movs	r1, #0
 8004732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004736:	6865      	ldr	r5, [r4, #4]
 8004738:	60a5      	str	r5, [r4, #8]
 800473a:	2d00      	cmp	r5, #0
 800473c:	bfa2      	ittt	ge
 800473e:	6821      	ldrge	r1, [r4, #0]
 8004740:	f021 0104 	bicge.w	r1, r1, #4
 8004744:	6021      	strge	r1, [r4, #0]
 8004746:	b90e      	cbnz	r6, 800474c <_printf_i+0x118>
 8004748:	2d00      	cmp	r5, #0
 800474a:	d04d      	beq.n	80047e8 <_printf_i+0x1b4>
 800474c:	4615      	mov	r5, r2
 800474e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004752:	fb03 6711 	mls	r7, r3, r1, r6
 8004756:	5dc7      	ldrb	r7, [r0, r7]
 8004758:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800475c:	4637      	mov	r7, r6
 800475e:	42bb      	cmp	r3, r7
 8004760:	460e      	mov	r6, r1
 8004762:	d9f4      	bls.n	800474e <_printf_i+0x11a>
 8004764:	2b08      	cmp	r3, #8
 8004766:	d10b      	bne.n	8004780 <_printf_i+0x14c>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	07de      	lsls	r6, r3, #31
 800476c:	d508      	bpl.n	8004780 <_printf_i+0x14c>
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	6861      	ldr	r1, [r4, #4]
 8004772:	4299      	cmp	r1, r3
 8004774:	bfde      	ittt	le
 8004776:	2330      	movle	r3, #48	; 0x30
 8004778:	f805 3c01 	strble.w	r3, [r5, #-1]
 800477c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004780:	1b52      	subs	r2, r2, r5
 8004782:	6122      	str	r2, [r4, #16]
 8004784:	f8cd a000 	str.w	sl, [sp]
 8004788:	464b      	mov	r3, r9
 800478a:	aa03      	add	r2, sp, #12
 800478c:	4621      	mov	r1, r4
 800478e:	4640      	mov	r0, r8
 8004790:	f7ff fee2 	bl	8004558 <_printf_common>
 8004794:	3001      	adds	r0, #1
 8004796:	d14c      	bne.n	8004832 <_printf_i+0x1fe>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	b004      	add	sp, #16
 800479e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a2:	4835      	ldr	r0, [pc, #212]	; (8004878 <_printf_i+0x244>)
 80047a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047a8:	6829      	ldr	r1, [r5, #0]
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b0:	6029      	str	r1, [r5, #0]
 80047b2:	061d      	lsls	r5, r3, #24
 80047b4:	d514      	bpl.n	80047e0 <_printf_i+0x1ac>
 80047b6:	07df      	lsls	r7, r3, #31
 80047b8:	bf44      	itt	mi
 80047ba:	f043 0320 	orrmi.w	r3, r3, #32
 80047be:	6023      	strmi	r3, [r4, #0]
 80047c0:	b91e      	cbnz	r6, 80047ca <_printf_i+0x196>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	f023 0320 	bic.w	r3, r3, #32
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	2310      	movs	r3, #16
 80047cc:	e7b0      	b.n	8004730 <_printf_i+0xfc>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	f043 0320 	orr.w	r3, r3, #32
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	2378      	movs	r3, #120	; 0x78
 80047d8:	4828      	ldr	r0, [pc, #160]	; (800487c <_printf_i+0x248>)
 80047da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047de:	e7e3      	b.n	80047a8 <_printf_i+0x174>
 80047e0:	0659      	lsls	r1, r3, #25
 80047e2:	bf48      	it	mi
 80047e4:	b2b6      	uxthmi	r6, r6
 80047e6:	e7e6      	b.n	80047b6 <_printf_i+0x182>
 80047e8:	4615      	mov	r5, r2
 80047ea:	e7bb      	b.n	8004764 <_printf_i+0x130>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	6826      	ldr	r6, [r4, #0]
 80047f0:	6961      	ldr	r1, [r4, #20]
 80047f2:	1d18      	adds	r0, r3, #4
 80047f4:	6028      	str	r0, [r5, #0]
 80047f6:	0635      	lsls	r5, r6, #24
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	d501      	bpl.n	8004800 <_printf_i+0x1cc>
 80047fc:	6019      	str	r1, [r3, #0]
 80047fe:	e002      	b.n	8004806 <_printf_i+0x1d2>
 8004800:	0670      	lsls	r0, r6, #25
 8004802:	d5fb      	bpl.n	80047fc <_printf_i+0x1c8>
 8004804:	8019      	strh	r1, [r3, #0]
 8004806:	2300      	movs	r3, #0
 8004808:	6123      	str	r3, [r4, #16]
 800480a:	4615      	mov	r5, r2
 800480c:	e7ba      	b.n	8004784 <_printf_i+0x150>
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	1d1a      	adds	r2, r3, #4
 8004812:	602a      	str	r2, [r5, #0]
 8004814:	681d      	ldr	r5, [r3, #0]
 8004816:	6862      	ldr	r2, [r4, #4]
 8004818:	2100      	movs	r1, #0
 800481a:	4628      	mov	r0, r5
 800481c:	f7fb fd00 	bl	8000220 <memchr>
 8004820:	b108      	cbz	r0, 8004826 <_printf_i+0x1f2>
 8004822:	1b40      	subs	r0, r0, r5
 8004824:	6060      	str	r0, [r4, #4]
 8004826:	6863      	ldr	r3, [r4, #4]
 8004828:	6123      	str	r3, [r4, #16]
 800482a:	2300      	movs	r3, #0
 800482c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004830:	e7a8      	b.n	8004784 <_printf_i+0x150>
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	462a      	mov	r2, r5
 8004836:	4649      	mov	r1, r9
 8004838:	4640      	mov	r0, r8
 800483a:	47d0      	blx	sl
 800483c:	3001      	adds	r0, #1
 800483e:	d0ab      	beq.n	8004798 <_printf_i+0x164>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	079b      	lsls	r3, r3, #30
 8004844:	d413      	bmi.n	800486e <_printf_i+0x23a>
 8004846:	68e0      	ldr	r0, [r4, #12]
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	4298      	cmp	r0, r3
 800484c:	bfb8      	it	lt
 800484e:	4618      	movlt	r0, r3
 8004850:	e7a4      	b.n	800479c <_printf_i+0x168>
 8004852:	2301      	movs	r3, #1
 8004854:	4632      	mov	r2, r6
 8004856:	4649      	mov	r1, r9
 8004858:	4640      	mov	r0, r8
 800485a:	47d0      	blx	sl
 800485c:	3001      	adds	r0, #1
 800485e:	d09b      	beq.n	8004798 <_printf_i+0x164>
 8004860:	3501      	adds	r5, #1
 8004862:	68e3      	ldr	r3, [r4, #12]
 8004864:	9903      	ldr	r1, [sp, #12]
 8004866:	1a5b      	subs	r3, r3, r1
 8004868:	42ab      	cmp	r3, r5
 800486a:	dcf2      	bgt.n	8004852 <_printf_i+0x21e>
 800486c:	e7eb      	b.n	8004846 <_printf_i+0x212>
 800486e:	2500      	movs	r5, #0
 8004870:	f104 0619 	add.w	r6, r4, #25
 8004874:	e7f5      	b.n	8004862 <_printf_i+0x22e>
 8004876:	bf00      	nop
 8004878:	0800523d 	.word	0x0800523d
 800487c:	0800524e 	.word	0x0800524e

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d06      	ldr	r5, [pc, #24]	; (800489c <_sbrk_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fc fbde 	bl	800104c <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000340 	.word	0x20000340

080048a0 <__swbuf_r>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	460e      	mov	r6, r1
 80048a4:	4614      	mov	r4, r2
 80048a6:	4605      	mov	r5, r0
 80048a8:	b118      	cbz	r0, 80048b2 <__swbuf_r+0x12>
 80048aa:	6983      	ldr	r3, [r0, #24]
 80048ac:	b90b      	cbnz	r3, 80048b2 <__swbuf_r+0x12>
 80048ae:	f000 f9d9 	bl	8004c64 <__sinit>
 80048b2:	4b21      	ldr	r3, [pc, #132]	; (8004938 <__swbuf_r+0x98>)
 80048b4:	429c      	cmp	r4, r3
 80048b6:	d12b      	bne.n	8004910 <__swbuf_r+0x70>
 80048b8:	686c      	ldr	r4, [r5, #4]
 80048ba:	69a3      	ldr	r3, [r4, #24]
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	071a      	lsls	r2, r3, #28
 80048c2:	d52f      	bpl.n	8004924 <__swbuf_r+0x84>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	b36b      	cbz	r3, 8004924 <__swbuf_r+0x84>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	6820      	ldr	r0, [r4, #0]
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	6963      	ldr	r3, [r4, #20]
 80048d0:	b2f6      	uxtb	r6, r6
 80048d2:	4283      	cmp	r3, r0
 80048d4:	4637      	mov	r7, r6
 80048d6:	dc04      	bgt.n	80048e2 <__swbuf_r+0x42>
 80048d8:	4621      	mov	r1, r4
 80048da:	4628      	mov	r0, r5
 80048dc:	f000 f92e 	bl	8004b3c <_fflush_r>
 80048e0:	bb30      	cbnz	r0, 8004930 <__swbuf_r+0x90>
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60a3      	str	r3, [r4, #8]
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	701e      	strb	r6, [r3, #0]
 80048f0:	6963      	ldr	r3, [r4, #20]
 80048f2:	3001      	adds	r0, #1
 80048f4:	4283      	cmp	r3, r0
 80048f6:	d004      	beq.n	8004902 <__swbuf_r+0x62>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	07db      	lsls	r3, r3, #31
 80048fc:	d506      	bpl.n	800490c <__swbuf_r+0x6c>
 80048fe:	2e0a      	cmp	r6, #10
 8004900:	d104      	bne.n	800490c <__swbuf_r+0x6c>
 8004902:	4621      	mov	r1, r4
 8004904:	4628      	mov	r0, r5
 8004906:	f000 f919 	bl	8004b3c <_fflush_r>
 800490a:	b988      	cbnz	r0, 8004930 <__swbuf_r+0x90>
 800490c:	4638      	mov	r0, r7
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <__swbuf_r+0x9c>)
 8004912:	429c      	cmp	r4, r3
 8004914:	d101      	bne.n	800491a <__swbuf_r+0x7a>
 8004916:	68ac      	ldr	r4, [r5, #8]
 8004918:	e7cf      	b.n	80048ba <__swbuf_r+0x1a>
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <__swbuf_r+0xa0>)
 800491c:	429c      	cmp	r4, r3
 800491e:	bf08      	it	eq
 8004920:	68ec      	ldreq	r4, [r5, #12]
 8004922:	e7ca      	b.n	80048ba <__swbuf_r+0x1a>
 8004924:	4621      	mov	r1, r4
 8004926:	4628      	mov	r0, r5
 8004928:	f000 f80c 	bl	8004944 <__swsetup_r>
 800492c:	2800      	cmp	r0, #0
 800492e:	d0cb      	beq.n	80048c8 <__swbuf_r+0x28>
 8004930:	f04f 37ff 	mov.w	r7, #4294967295
 8004934:	e7ea      	b.n	800490c <__swbuf_r+0x6c>
 8004936:	bf00      	nop
 8004938:	08005280 	.word	0x08005280
 800493c:	080052a0 	.word	0x080052a0
 8004940:	08005260 	.word	0x08005260

08004944 <__swsetup_r>:
 8004944:	4b32      	ldr	r3, [pc, #200]	; (8004a10 <__swsetup_r+0xcc>)
 8004946:	b570      	push	{r4, r5, r6, lr}
 8004948:	681d      	ldr	r5, [r3, #0]
 800494a:	4606      	mov	r6, r0
 800494c:	460c      	mov	r4, r1
 800494e:	b125      	cbz	r5, 800495a <__swsetup_r+0x16>
 8004950:	69ab      	ldr	r3, [r5, #24]
 8004952:	b913      	cbnz	r3, 800495a <__swsetup_r+0x16>
 8004954:	4628      	mov	r0, r5
 8004956:	f000 f985 	bl	8004c64 <__sinit>
 800495a:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <__swsetup_r+0xd0>)
 800495c:	429c      	cmp	r4, r3
 800495e:	d10f      	bne.n	8004980 <__swsetup_r+0x3c>
 8004960:	686c      	ldr	r4, [r5, #4]
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004968:	0719      	lsls	r1, r3, #28
 800496a:	d42c      	bmi.n	80049c6 <__swsetup_r+0x82>
 800496c:	06dd      	lsls	r5, r3, #27
 800496e:	d411      	bmi.n	8004994 <__swsetup_r+0x50>
 8004970:	2309      	movs	r3, #9
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	e03e      	b.n	80049fe <__swsetup_r+0xba>
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <__swsetup_r+0xd4>)
 8004982:	429c      	cmp	r4, r3
 8004984:	d101      	bne.n	800498a <__swsetup_r+0x46>
 8004986:	68ac      	ldr	r4, [r5, #8]
 8004988:	e7eb      	b.n	8004962 <__swsetup_r+0x1e>
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <__swsetup_r+0xd8>)
 800498c:	429c      	cmp	r4, r3
 800498e:	bf08      	it	eq
 8004990:	68ec      	ldreq	r4, [r5, #12]
 8004992:	e7e6      	b.n	8004962 <__swsetup_r+0x1e>
 8004994:	0758      	lsls	r0, r3, #29
 8004996:	d512      	bpl.n	80049be <__swsetup_r+0x7a>
 8004998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800499a:	b141      	cbz	r1, 80049ae <__swsetup_r+0x6a>
 800499c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049a0:	4299      	cmp	r1, r3
 80049a2:	d002      	beq.n	80049aa <__swsetup_r+0x66>
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff fa41 	bl	8003e2c <_free_r>
 80049aa:	2300      	movs	r3, #0
 80049ac:	6363      	str	r3, [r4, #52]	; 0x34
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	2300      	movs	r3, #0
 80049b8:	6063      	str	r3, [r4, #4]
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f043 0308 	orr.w	r3, r3, #8
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	b94b      	cbnz	r3, 80049de <__swsetup_r+0x9a>
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	d003      	beq.n	80049de <__swsetup_r+0x9a>
 80049d6:	4621      	mov	r1, r4
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 fa09 	bl	8004df0 <__smakebuf_r>
 80049de:	89a0      	ldrh	r0, [r4, #12]
 80049e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049e4:	f010 0301 	ands.w	r3, r0, #1
 80049e8:	d00a      	beq.n	8004a00 <__swsetup_r+0xbc>
 80049ea:	2300      	movs	r3, #0
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	6963      	ldr	r3, [r4, #20]
 80049f0:	425b      	negs	r3, r3
 80049f2:	61a3      	str	r3, [r4, #24]
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	b943      	cbnz	r3, 8004a0a <__swsetup_r+0xc6>
 80049f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049fc:	d1ba      	bne.n	8004974 <__swsetup_r+0x30>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	0781      	lsls	r1, r0, #30
 8004a02:	bf58      	it	pl
 8004a04:	6963      	ldrpl	r3, [r4, #20]
 8004a06:	60a3      	str	r3, [r4, #8]
 8004a08:	e7f4      	b.n	80049f4 <__swsetup_r+0xb0>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e7f7      	b.n	80049fe <__swsetup_r+0xba>
 8004a0e:	bf00      	nop
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	08005280 	.word	0x08005280
 8004a18:	080052a0 	.word	0x080052a0
 8004a1c:	08005260 	.word	0x08005260

08004a20 <abort>:
 8004a20:	b508      	push	{r3, lr}
 8004a22:	2006      	movs	r0, #6
 8004a24:	f000 faa2 	bl	8004f6c <raise>
 8004a28:	2001      	movs	r0, #1
 8004a2a:	f7fc fa97 	bl	8000f5c <_exit>
	...

08004a30 <__sflush_r>:
 8004a30:	898a      	ldrh	r2, [r1, #12]
 8004a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a36:	4605      	mov	r5, r0
 8004a38:	0710      	lsls	r0, r2, #28
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	d458      	bmi.n	8004af0 <__sflush_r+0xc0>
 8004a3e:	684b      	ldr	r3, [r1, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	dc05      	bgt.n	8004a50 <__sflush_r+0x20>
 8004a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	dc02      	bgt.n	8004a50 <__sflush_r+0x20>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a52:	2e00      	cmp	r6, #0
 8004a54:	d0f9      	beq.n	8004a4a <__sflush_r+0x1a>
 8004a56:	2300      	movs	r3, #0
 8004a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a5c:	682f      	ldr	r7, [r5, #0]
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	d032      	beq.n	8004ac8 <__sflush_r+0x98>
 8004a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	075a      	lsls	r2, r3, #29
 8004a68:	d505      	bpl.n	8004a76 <__sflush_r+0x46>
 8004a6a:	6863      	ldr	r3, [r4, #4]
 8004a6c:	1ac0      	subs	r0, r0, r3
 8004a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a70:	b10b      	cbz	r3, 8004a76 <__sflush_r+0x46>
 8004a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a74:	1ac0      	subs	r0, r0, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a7c:	6a21      	ldr	r1, [r4, #32]
 8004a7e:	4628      	mov	r0, r5
 8004a80:	47b0      	blx	r6
 8004a82:	1c43      	adds	r3, r0, #1
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	d106      	bne.n	8004a96 <__sflush_r+0x66>
 8004a88:	6829      	ldr	r1, [r5, #0]
 8004a8a:	291d      	cmp	r1, #29
 8004a8c:	d82c      	bhi.n	8004ae8 <__sflush_r+0xb8>
 8004a8e:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <__sflush_r+0x108>)
 8004a90:	40ca      	lsrs	r2, r1
 8004a92:	07d6      	lsls	r6, r2, #31
 8004a94:	d528      	bpl.n	8004ae8 <__sflush_r+0xb8>
 8004a96:	2200      	movs	r2, #0
 8004a98:	6062      	str	r2, [r4, #4]
 8004a9a:	04d9      	lsls	r1, r3, #19
 8004a9c:	6922      	ldr	r2, [r4, #16]
 8004a9e:	6022      	str	r2, [r4, #0]
 8004aa0:	d504      	bpl.n	8004aac <__sflush_r+0x7c>
 8004aa2:	1c42      	adds	r2, r0, #1
 8004aa4:	d101      	bne.n	8004aaa <__sflush_r+0x7a>
 8004aa6:	682b      	ldr	r3, [r5, #0]
 8004aa8:	b903      	cbnz	r3, 8004aac <__sflush_r+0x7c>
 8004aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8004aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aae:	602f      	str	r7, [r5, #0]
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	d0ca      	beq.n	8004a4a <__sflush_r+0x1a>
 8004ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	d002      	beq.n	8004ac2 <__sflush_r+0x92>
 8004abc:	4628      	mov	r0, r5
 8004abe:	f7ff f9b5 	bl	8003e2c <_free_r>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ac6:	e7c1      	b.n	8004a4c <__sflush_r+0x1c>
 8004ac8:	6a21      	ldr	r1, [r4, #32]
 8004aca:	2301      	movs	r3, #1
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b0      	blx	r6
 8004ad0:	1c41      	adds	r1, r0, #1
 8004ad2:	d1c7      	bne.n	8004a64 <__sflush_r+0x34>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0c4      	beq.n	8004a64 <__sflush_r+0x34>
 8004ada:	2b1d      	cmp	r3, #29
 8004adc:	d001      	beq.n	8004ae2 <__sflush_r+0xb2>
 8004ade:	2b16      	cmp	r3, #22
 8004ae0:	d101      	bne.n	8004ae6 <__sflush_r+0xb6>
 8004ae2:	602f      	str	r7, [r5, #0]
 8004ae4:	e7b1      	b.n	8004a4a <__sflush_r+0x1a>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	e7ad      	b.n	8004a4c <__sflush_r+0x1c>
 8004af0:	690f      	ldr	r7, [r1, #16]
 8004af2:	2f00      	cmp	r7, #0
 8004af4:	d0a9      	beq.n	8004a4a <__sflush_r+0x1a>
 8004af6:	0793      	lsls	r3, r2, #30
 8004af8:	680e      	ldr	r6, [r1, #0]
 8004afa:	bf08      	it	eq
 8004afc:	694b      	ldreq	r3, [r1, #20]
 8004afe:	600f      	str	r7, [r1, #0]
 8004b00:	bf18      	it	ne
 8004b02:	2300      	movne	r3, #0
 8004b04:	eba6 0807 	sub.w	r8, r6, r7
 8004b08:	608b      	str	r3, [r1, #8]
 8004b0a:	f1b8 0f00 	cmp.w	r8, #0
 8004b0e:	dd9c      	ble.n	8004a4a <__sflush_r+0x1a>
 8004b10:	6a21      	ldr	r1, [r4, #32]
 8004b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b14:	4643      	mov	r3, r8
 8004b16:	463a      	mov	r2, r7
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b0      	blx	r6
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	dc06      	bgt.n	8004b2e <__sflush_r+0xfe>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	e78e      	b.n	8004a4c <__sflush_r+0x1c>
 8004b2e:	4407      	add	r7, r0
 8004b30:	eba8 0800 	sub.w	r8, r8, r0
 8004b34:	e7e9      	b.n	8004b0a <__sflush_r+0xda>
 8004b36:	bf00      	nop
 8004b38:	20400001 	.word	0x20400001

08004b3c <_fflush_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	690b      	ldr	r3, [r1, #16]
 8004b40:	4605      	mov	r5, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	b913      	cbnz	r3, 8004b4c <_fflush_r+0x10>
 8004b46:	2500      	movs	r5, #0
 8004b48:	4628      	mov	r0, r5
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	b118      	cbz	r0, 8004b56 <_fflush_r+0x1a>
 8004b4e:	6983      	ldr	r3, [r0, #24]
 8004b50:	b90b      	cbnz	r3, 8004b56 <_fflush_r+0x1a>
 8004b52:	f000 f887 	bl	8004c64 <__sinit>
 8004b56:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <_fflush_r+0x6c>)
 8004b58:	429c      	cmp	r4, r3
 8004b5a:	d11b      	bne.n	8004b94 <_fflush_r+0x58>
 8004b5c:	686c      	ldr	r4, [r5, #4]
 8004b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0ef      	beq.n	8004b46 <_fflush_r+0xa>
 8004b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b68:	07d0      	lsls	r0, r2, #31
 8004b6a:	d404      	bmi.n	8004b76 <_fflush_r+0x3a>
 8004b6c:	0599      	lsls	r1, r3, #22
 8004b6e:	d402      	bmi.n	8004b76 <_fflush_r+0x3a>
 8004b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b72:	f000 f915 	bl	8004da0 <__retarget_lock_acquire_recursive>
 8004b76:	4628      	mov	r0, r5
 8004b78:	4621      	mov	r1, r4
 8004b7a:	f7ff ff59 	bl	8004a30 <__sflush_r>
 8004b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b80:	07da      	lsls	r2, r3, #31
 8004b82:	4605      	mov	r5, r0
 8004b84:	d4e0      	bmi.n	8004b48 <_fflush_r+0xc>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	059b      	lsls	r3, r3, #22
 8004b8a:	d4dd      	bmi.n	8004b48 <_fflush_r+0xc>
 8004b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b8e:	f000 f908 	bl	8004da2 <__retarget_lock_release_recursive>
 8004b92:	e7d9      	b.n	8004b48 <_fflush_r+0xc>
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <_fflush_r+0x70>)
 8004b96:	429c      	cmp	r4, r3
 8004b98:	d101      	bne.n	8004b9e <_fflush_r+0x62>
 8004b9a:	68ac      	ldr	r4, [r5, #8]
 8004b9c:	e7df      	b.n	8004b5e <_fflush_r+0x22>
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <_fflush_r+0x74>)
 8004ba0:	429c      	cmp	r4, r3
 8004ba2:	bf08      	it	eq
 8004ba4:	68ec      	ldreq	r4, [r5, #12]
 8004ba6:	e7da      	b.n	8004b5e <_fflush_r+0x22>
 8004ba8:	08005280 	.word	0x08005280
 8004bac:	080052a0 	.word	0x080052a0
 8004bb0:	08005260 	.word	0x08005260

08004bb4 <std>:
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	4604      	mov	r4, r0
 8004bba:	e9c0 3300 	strd	r3, r3, [r0]
 8004bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bc2:	6083      	str	r3, [r0, #8]
 8004bc4:	8181      	strh	r1, [r0, #12]
 8004bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8004bc8:	81c2      	strh	r2, [r0, #14]
 8004bca:	6183      	str	r3, [r0, #24]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	2208      	movs	r2, #8
 8004bd0:	305c      	adds	r0, #92	; 0x5c
 8004bd2:	f7ff f805 	bl	8003be0 <memset>
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <std+0x38>)
 8004bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <std+0x3c>)
 8004bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <std+0x40>)
 8004be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <std+0x44>)
 8004be4:	6224      	str	r4, [r4, #32]
 8004be6:	6323      	str	r3, [r4, #48]	; 0x30
 8004be8:	bd10      	pop	{r4, pc}
 8004bea:	bf00      	nop
 8004bec:	08004fa5 	.word	0x08004fa5
 8004bf0:	08004fc7 	.word	0x08004fc7
 8004bf4:	08004fff 	.word	0x08004fff
 8004bf8:	08005023 	.word	0x08005023

08004bfc <_cleanup_r>:
 8004bfc:	4901      	ldr	r1, [pc, #4]	; (8004c04 <_cleanup_r+0x8>)
 8004bfe:	f000 b8af 	b.w	8004d60 <_fwalk_reent>
 8004c02:	bf00      	nop
 8004c04:	08004b3d 	.word	0x08004b3d

08004c08 <__sfmoreglue>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	2268      	movs	r2, #104	; 0x68
 8004c0c:	1e4d      	subs	r5, r1, #1
 8004c0e:	4355      	muls	r5, r2
 8004c10:	460e      	mov	r6, r1
 8004c12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c16:	f7ff f975 	bl	8003f04 <_malloc_r>
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	b140      	cbz	r0, 8004c30 <__sfmoreglue+0x28>
 8004c1e:	2100      	movs	r1, #0
 8004c20:	e9c0 1600 	strd	r1, r6, [r0]
 8004c24:	300c      	adds	r0, #12
 8004c26:	60a0      	str	r0, [r4, #8]
 8004c28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c2c:	f7fe ffd8 	bl	8003be0 <memset>
 8004c30:	4620      	mov	r0, r4
 8004c32:	bd70      	pop	{r4, r5, r6, pc}

08004c34 <__sfp_lock_acquire>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__sfp_lock_acquire+0x8>)
 8004c36:	f000 b8b3 	b.w	8004da0 <__retarget_lock_acquire_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	2000033d 	.word	0x2000033d

08004c40 <__sfp_lock_release>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sfp_lock_release+0x8>)
 8004c42:	f000 b8ae 	b.w	8004da2 <__retarget_lock_release_recursive>
 8004c46:	bf00      	nop
 8004c48:	2000033d 	.word	0x2000033d

08004c4c <__sinit_lock_acquire>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sinit_lock_acquire+0x8>)
 8004c4e:	f000 b8a7 	b.w	8004da0 <__retarget_lock_acquire_recursive>
 8004c52:	bf00      	nop
 8004c54:	2000033e 	.word	0x2000033e

08004c58 <__sinit_lock_release>:
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <__sinit_lock_release+0x8>)
 8004c5a:	f000 b8a2 	b.w	8004da2 <__retarget_lock_release_recursive>
 8004c5e:	bf00      	nop
 8004c60:	2000033e 	.word	0x2000033e

08004c64 <__sinit>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	4604      	mov	r4, r0
 8004c68:	f7ff fff0 	bl	8004c4c <__sinit_lock_acquire>
 8004c6c:	69a3      	ldr	r3, [r4, #24]
 8004c6e:	b11b      	cbz	r3, 8004c78 <__sinit+0x14>
 8004c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c74:	f7ff bff0 	b.w	8004c58 <__sinit_lock_release>
 8004c78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c7e:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <__sinit+0x68>)
 8004c80:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <__sinit+0x6c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	bf04      	itt	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	61a3      	streq	r3, [r4, #24]
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 f820 	bl	8004cd4 <__sfp>
 8004c94:	6060      	str	r0, [r4, #4]
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 f81c 	bl	8004cd4 <__sfp>
 8004c9c:	60a0      	str	r0, [r4, #8]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f000 f818 	bl	8004cd4 <__sfp>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	60e0      	str	r0, [r4, #12]
 8004ca8:	2104      	movs	r1, #4
 8004caa:	6860      	ldr	r0, [r4, #4]
 8004cac:	f7ff ff82 	bl	8004bb4 <std>
 8004cb0:	68a0      	ldr	r0, [r4, #8]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	2109      	movs	r1, #9
 8004cb6:	f7ff ff7d 	bl	8004bb4 <std>
 8004cba:	68e0      	ldr	r0, [r4, #12]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	2112      	movs	r1, #18
 8004cc0:	f7ff ff78 	bl	8004bb4 <std>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61a3      	str	r3, [r4, #24]
 8004cc8:	e7d2      	b.n	8004c70 <__sinit+0xc>
 8004cca:	bf00      	nop
 8004ccc:	08005178 	.word	0x08005178
 8004cd0:	08004bfd 	.word	0x08004bfd

08004cd4 <__sfp>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	4607      	mov	r7, r0
 8004cd8:	f7ff ffac 	bl	8004c34 <__sfp_lock_acquire>
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <__sfp+0x84>)
 8004cde:	681e      	ldr	r6, [r3, #0]
 8004ce0:	69b3      	ldr	r3, [r6, #24]
 8004ce2:	b913      	cbnz	r3, 8004cea <__sfp+0x16>
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f7ff ffbd 	bl	8004c64 <__sinit>
 8004cea:	3648      	adds	r6, #72	; 0x48
 8004cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	d503      	bpl.n	8004cfc <__sfp+0x28>
 8004cf4:	6833      	ldr	r3, [r6, #0]
 8004cf6:	b30b      	cbz	r3, 8004d3c <__sfp+0x68>
 8004cf8:	6836      	ldr	r6, [r6, #0]
 8004cfa:	e7f7      	b.n	8004cec <__sfp+0x18>
 8004cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d00:	b9d5      	cbnz	r5, 8004d38 <__sfp+0x64>
 8004d02:	4b16      	ldr	r3, [pc, #88]	; (8004d5c <__sfp+0x88>)
 8004d04:	60e3      	str	r3, [r4, #12]
 8004d06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8004d0c:	f000 f847 	bl	8004d9e <__retarget_lock_init_recursive>
 8004d10:	f7ff ff96 	bl	8004c40 <__sfp_lock_release>
 8004d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d1c:	6025      	str	r5, [r4, #0]
 8004d1e:	61a5      	str	r5, [r4, #24]
 8004d20:	2208      	movs	r2, #8
 8004d22:	4629      	mov	r1, r5
 8004d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d28:	f7fe ff5a 	bl	8003be0 <memset>
 8004d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d34:	4620      	mov	r0, r4
 8004d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d38:	3468      	adds	r4, #104	; 0x68
 8004d3a:	e7d9      	b.n	8004cf0 <__sfp+0x1c>
 8004d3c:	2104      	movs	r1, #4
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f7ff ff62 	bl	8004c08 <__sfmoreglue>
 8004d44:	4604      	mov	r4, r0
 8004d46:	6030      	str	r0, [r6, #0]
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d1d5      	bne.n	8004cf8 <__sfp+0x24>
 8004d4c:	f7ff ff78 	bl	8004c40 <__sfp_lock_release>
 8004d50:	230c      	movs	r3, #12
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	e7ee      	b.n	8004d34 <__sfp+0x60>
 8004d56:	bf00      	nop
 8004d58:	08005178 	.word	0x08005178
 8004d5c:	ffff0001 	.word	0xffff0001

08004d60 <_fwalk_reent>:
 8004d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d64:	4606      	mov	r6, r0
 8004d66:	4688      	mov	r8, r1
 8004d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d6c:	2700      	movs	r7, #0
 8004d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d72:	f1b9 0901 	subs.w	r9, r9, #1
 8004d76:	d505      	bpl.n	8004d84 <_fwalk_reent+0x24>
 8004d78:	6824      	ldr	r4, [r4, #0]
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	d1f7      	bne.n	8004d6e <_fwalk_reent+0xe>
 8004d7e:	4638      	mov	r0, r7
 8004d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d84:	89ab      	ldrh	r3, [r5, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d907      	bls.n	8004d9a <_fwalk_reent+0x3a>
 8004d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	d003      	beq.n	8004d9a <_fwalk_reent+0x3a>
 8004d92:	4629      	mov	r1, r5
 8004d94:	4630      	mov	r0, r6
 8004d96:	47c0      	blx	r8
 8004d98:	4307      	orrs	r7, r0
 8004d9a:	3568      	adds	r5, #104	; 0x68
 8004d9c:	e7e9      	b.n	8004d72 <_fwalk_reent+0x12>

08004d9e <__retarget_lock_init_recursive>:
 8004d9e:	4770      	bx	lr

08004da0 <__retarget_lock_acquire_recursive>:
 8004da0:	4770      	bx	lr

08004da2 <__retarget_lock_release_recursive>:
 8004da2:	4770      	bx	lr

08004da4 <__swhatbuf_r>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	460e      	mov	r6, r1
 8004da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dac:	2900      	cmp	r1, #0
 8004dae:	b096      	sub	sp, #88	; 0x58
 8004db0:	4614      	mov	r4, r2
 8004db2:	461d      	mov	r5, r3
 8004db4:	da08      	bge.n	8004dc8 <__swhatbuf_r+0x24>
 8004db6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	602a      	str	r2, [r5, #0]
 8004dbe:	061a      	lsls	r2, r3, #24
 8004dc0:	d410      	bmi.n	8004de4 <__swhatbuf_r+0x40>
 8004dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc6:	e00e      	b.n	8004de6 <__swhatbuf_r+0x42>
 8004dc8:	466a      	mov	r2, sp
 8004dca:	f000 f951 	bl	8005070 <_fstat_r>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	dbf1      	blt.n	8004db6 <__swhatbuf_r+0x12>
 8004dd2:	9a01      	ldr	r2, [sp, #4]
 8004dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ddc:	425a      	negs	r2, r3
 8004dde:	415a      	adcs	r2, r3
 8004de0:	602a      	str	r2, [r5, #0]
 8004de2:	e7ee      	b.n	8004dc2 <__swhatbuf_r+0x1e>
 8004de4:	2340      	movs	r3, #64	; 0x40
 8004de6:	2000      	movs	r0, #0
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	b016      	add	sp, #88	; 0x58
 8004dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08004df0 <__smakebuf_r>:
 8004df0:	898b      	ldrh	r3, [r1, #12]
 8004df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004df4:	079d      	lsls	r5, r3, #30
 8004df6:	4606      	mov	r6, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	d507      	bpl.n	8004e0c <__smakebuf_r+0x1c>
 8004dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	6123      	str	r3, [r4, #16]
 8004e04:	2301      	movs	r3, #1
 8004e06:	6163      	str	r3, [r4, #20]
 8004e08:	b002      	add	sp, #8
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	ab01      	add	r3, sp, #4
 8004e0e:	466a      	mov	r2, sp
 8004e10:	f7ff ffc8 	bl	8004da4 <__swhatbuf_r>
 8004e14:	9900      	ldr	r1, [sp, #0]
 8004e16:	4605      	mov	r5, r0
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff f873 	bl	8003f04 <_malloc_r>
 8004e1e:	b948      	cbnz	r0, 8004e34 <__smakebuf_r+0x44>
 8004e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e24:	059a      	lsls	r2, r3, #22
 8004e26:	d4ef      	bmi.n	8004e08 <__smakebuf_r+0x18>
 8004e28:	f023 0303 	bic.w	r3, r3, #3
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	e7e3      	b.n	8004dfc <__smakebuf_r+0xc>
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <__smakebuf_r+0x7c>)
 8004e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	6020      	str	r0, [r4, #0]
 8004e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e40:	81a3      	strh	r3, [r4, #12]
 8004e42:	9b00      	ldr	r3, [sp, #0]
 8004e44:	6163      	str	r3, [r4, #20]
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	6120      	str	r0, [r4, #16]
 8004e4a:	b15b      	cbz	r3, 8004e64 <__smakebuf_r+0x74>
 8004e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e50:	4630      	mov	r0, r6
 8004e52:	f000 f91f 	bl	8005094 <_isatty_r>
 8004e56:	b128      	cbz	r0, 8004e64 <__smakebuf_r+0x74>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	89a0      	ldrh	r0, [r4, #12]
 8004e66:	4305      	orrs	r5, r0
 8004e68:	81a5      	strh	r5, [r4, #12]
 8004e6a:	e7cd      	b.n	8004e08 <__smakebuf_r+0x18>
 8004e6c:	08004bfd 	.word	0x08004bfd

08004e70 <memmove>:
 8004e70:	4288      	cmp	r0, r1
 8004e72:	b510      	push	{r4, lr}
 8004e74:	eb01 0402 	add.w	r4, r1, r2
 8004e78:	d902      	bls.n	8004e80 <memmove+0x10>
 8004e7a:	4284      	cmp	r4, r0
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	d807      	bhi.n	8004e90 <memmove+0x20>
 8004e80:	1e43      	subs	r3, r0, #1
 8004e82:	42a1      	cmp	r1, r4
 8004e84:	d008      	beq.n	8004e98 <memmove+0x28>
 8004e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e8e:	e7f8      	b.n	8004e82 <memmove+0x12>
 8004e90:	4402      	add	r2, r0
 8004e92:	4601      	mov	r1, r0
 8004e94:	428a      	cmp	r2, r1
 8004e96:	d100      	bne.n	8004e9a <memmove+0x2a>
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ea2:	e7f7      	b.n	8004e94 <memmove+0x24>

08004ea4 <__malloc_lock>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <__malloc_lock+0x8>)
 8004ea6:	f7ff bf7b 	b.w	8004da0 <__retarget_lock_acquire_recursive>
 8004eaa:	bf00      	nop
 8004eac:	2000033c 	.word	0x2000033c

08004eb0 <__malloc_unlock>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <__malloc_unlock+0x8>)
 8004eb2:	f7ff bf76 	b.w	8004da2 <__retarget_lock_release_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	2000033c 	.word	0x2000033c

08004ebc <_realloc_r>:
 8004ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	4614      	mov	r4, r2
 8004ec4:	460e      	mov	r6, r1
 8004ec6:	b921      	cbnz	r1, 8004ed2 <_realloc_r+0x16>
 8004ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ecc:	4611      	mov	r1, r2
 8004ece:	f7ff b819 	b.w	8003f04 <_malloc_r>
 8004ed2:	b92a      	cbnz	r2, 8004ee0 <_realloc_r+0x24>
 8004ed4:	f7fe ffaa 	bl	8003e2c <_free_r>
 8004ed8:	4625      	mov	r5, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee0:	f000 f8fa 	bl	80050d8 <_malloc_usable_size_r>
 8004ee4:	4284      	cmp	r4, r0
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	d802      	bhi.n	8004ef0 <_realloc_r+0x34>
 8004eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eee:	d812      	bhi.n	8004f16 <_realloc_r+0x5a>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f7ff f806 	bl	8003f04 <_malloc_r>
 8004ef8:	4605      	mov	r5, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d0ed      	beq.n	8004eda <_realloc_r+0x1e>
 8004efe:	42bc      	cmp	r4, r7
 8004f00:	4622      	mov	r2, r4
 8004f02:	4631      	mov	r1, r6
 8004f04:	bf28      	it	cs
 8004f06:	463a      	movcs	r2, r7
 8004f08:	f7fe ff82 	bl	8003e10 <memcpy>
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f7fe ff8c 	bl	8003e2c <_free_r>
 8004f14:	e7e1      	b.n	8004eda <_realloc_r+0x1e>
 8004f16:	4635      	mov	r5, r6
 8004f18:	e7df      	b.n	8004eda <_realloc_r+0x1e>

08004f1a <_raise_r>:
 8004f1a:	291f      	cmp	r1, #31
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4604      	mov	r4, r0
 8004f20:	460d      	mov	r5, r1
 8004f22:	d904      	bls.n	8004f2e <_raise_r+0x14>
 8004f24:	2316      	movs	r3, #22
 8004f26:	6003      	str	r3, [r0, #0]
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	bd38      	pop	{r3, r4, r5, pc}
 8004f2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f30:	b112      	cbz	r2, 8004f38 <_raise_r+0x1e>
 8004f32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f36:	b94b      	cbnz	r3, 8004f4c <_raise_r+0x32>
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 f831 	bl	8004fa0 <_getpid_r>
 8004f3e:	462a      	mov	r2, r5
 8004f40:	4601      	mov	r1, r0
 8004f42:	4620      	mov	r0, r4
 8004f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f48:	f000 b818 	b.w	8004f7c <_kill_r>
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d00a      	beq.n	8004f66 <_raise_r+0x4c>
 8004f50:	1c59      	adds	r1, r3, #1
 8004f52:	d103      	bne.n	8004f5c <_raise_r+0x42>
 8004f54:	2316      	movs	r3, #22
 8004f56:	6003      	str	r3, [r0, #0]
 8004f58:	2001      	movs	r0, #1
 8004f5a:	e7e7      	b.n	8004f2c <_raise_r+0x12>
 8004f5c:	2400      	movs	r4, #0
 8004f5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f62:	4628      	mov	r0, r5
 8004f64:	4798      	blx	r3
 8004f66:	2000      	movs	r0, #0
 8004f68:	e7e0      	b.n	8004f2c <_raise_r+0x12>
	...

08004f6c <raise>:
 8004f6c:	4b02      	ldr	r3, [pc, #8]	; (8004f78 <raise+0xc>)
 8004f6e:	4601      	mov	r1, r0
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	f7ff bfd2 	b.w	8004f1a <_raise_r>
 8004f76:	bf00      	nop
 8004f78:	2000000c 	.word	0x2000000c

08004f7c <_kill_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	; (8004f9c <_kill_r+0x20>)
 8004f80:	2300      	movs	r3, #0
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	f7fb ffd7 	bl	8000f3c <_kill>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	d102      	bne.n	8004f98 <_kill_r+0x1c>
 8004f92:	682b      	ldr	r3, [r5, #0]
 8004f94:	b103      	cbz	r3, 8004f98 <_kill_r+0x1c>
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	bd38      	pop	{r3, r4, r5, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000340 	.word	0x20000340

08004fa0 <_getpid_r>:
 8004fa0:	f7fb bfc4 	b.w	8000f2c <_getpid>

08004fa4 <__sread>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fac:	f000 f89c 	bl	80050e8 <_read_r>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	bfab      	itete	ge
 8004fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fb8:	181b      	addge	r3, r3, r0
 8004fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fbe:	bfac      	ite	ge
 8004fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fc2:	81a3      	strhlt	r3, [r4, #12]
 8004fc4:	bd10      	pop	{r4, pc}

08004fc6 <__swrite>:
 8004fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fca:	461f      	mov	r7, r3
 8004fcc:	898b      	ldrh	r3, [r1, #12]
 8004fce:	05db      	lsls	r3, r3, #23
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	d505      	bpl.n	8004fe4 <__swrite+0x1e>
 8004fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f000 f868 	bl	80050b4 <_lseek_r>
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffa:	f000 b817 	b.w	800502c <_write_r>

08004ffe <__sseek>:
 8004ffe:	b510      	push	{r4, lr}
 8005000:	460c      	mov	r4, r1
 8005002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005006:	f000 f855 	bl	80050b4 <_lseek_r>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	bf15      	itete	ne
 8005010:	6560      	strne	r0, [r4, #84]	; 0x54
 8005012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800501a:	81a3      	strheq	r3, [r4, #12]
 800501c:	bf18      	it	ne
 800501e:	81a3      	strhne	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__sclose>:
 8005022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005026:	f000 b813 	b.w	8005050 <_close_r>
	...

0800502c <_write_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d07      	ldr	r5, [pc, #28]	; (800504c <_write_r+0x20>)
 8005030:	4604      	mov	r4, r0
 8005032:	4608      	mov	r0, r1
 8005034:	4611      	mov	r1, r2
 8005036:	2200      	movs	r2, #0
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fb ffb5 	bl	8000faa <_write>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_write_r+0x1e>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_write_r+0x1e>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20000340 	.word	0x20000340

08005050 <_close_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d06      	ldr	r5, [pc, #24]	; (800506c <_close_r+0x1c>)
 8005054:	2300      	movs	r3, #0
 8005056:	4604      	mov	r4, r0
 8005058:	4608      	mov	r0, r1
 800505a:	602b      	str	r3, [r5, #0]
 800505c:	f7fb ffc1 	bl	8000fe2 <_close>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_close_r+0x1a>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_close_r+0x1a>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20000340 	.word	0x20000340

08005070 <_fstat_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4d07      	ldr	r5, [pc, #28]	; (8005090 <_fstat_r+0x20>)
 8005074:	2300      	movs	r3, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	4611      	mov	r1, r2
 800507c:	602b      	str	r3, [r5, #0]
 800507e:	f7fb ffbc 	bl	8000ffa <_fstat>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d102      	bne.n	800508c <_fstat_r+0x1c>
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	b103      	cbz	r3, 800508c <_fstat_r+0x1c>
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	bd38      	pop	{r3, r4, r5, pc}
 800508e:	bf00      	nop
 8005090:	20000340 	.word	0x20000340

08005094 <_isatty_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d06      	ldr	r5, [pc, #24]	; (80050b0 <_isatty_r+0x1c>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f7fb ffbb 	bl	800101a <_isatty>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_isatty_r+0x1a>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_isatty_r+0x1a>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	20000340 	.word	0x20000340

080050b4 <_lseek_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4d07      	ldr	r5, [pc, #28]	; (80050d4 <_lseek_r+0x20>)
 80050b8:	4604      	mov	r4, r0
 80050ba:	4608      	mov	r0, r1
 80050bc:	4611      	mov	r1, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	602a      	str	r2, [r5, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f7fb ffb4 	bl	8001030 <_lseek>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_lseek_r+0x1e>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_lseek_r+0x1e>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	20000340 	.word	0x20000340

080050d8 <_malloc_usable_size_r>:
 80050d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050dc:	1f18      	subs	r0, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bfbc      	itt	lt
 80050e2:	580b      	ldrlt	r3, [r1, r0]
 80050e4:	18c0      	addlt	r0, r0, r3
 80050e6:	4770      	bx	lr

080050e8 <_read_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d07      	ldr	r5, [pc, #28]	; (8005108 <_read_r+0x20>)
 80050ec:	4604      	mov	r4, r0
 80050ee:	4608      	mov	r0, r1
 80050f0:	4611      	mov	r1, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f7fb ff3a 	bl	8000f70 <_read>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_read_r+0x1e>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_read_r+0x1e>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	20000340 	.word	0x20000340

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
